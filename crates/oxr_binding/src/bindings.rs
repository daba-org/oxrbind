/* automatically generated by rust-bindgen 0.69.4 */

pub const OPENXR_H_: u32 = 1;
pub const XR_VERSION_1_0: u32 = 1;
pub const OPENXR_PLATFORM_DEFINES_H_: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const XR_PTR_SIZE: u32 = 8;
pub const XR_CPP_NULLPTR_SUPPORTED: u32 = 0;
pub const XR_MIN_COMPOSITION_LAYERS_SUPPORTED: u32 = 16;
pub const XR_NULL_HANDLE: u32 = 0;
pub const XR_NULL_SYSTEM_ID: u32 = 0;
pub const XR_NULL_PATH: u32 = 0;
pub const XR_NO_DURATION: u32 = 0;
pub const XR_INFINITE_DURATION: u64 = 9223372036854775807;
pub const XR_MIN_HAPTIC_DURATION: i32 = -1;
pub const XR_FREQUENCY_UNSPECIFIED: u32 = 0;
pub const XR_EXTENSION_ENUM_BASE: u32 = 1000000000;
pub const XR_EXTENSION_ENUM_STRIDE: u32 = 1000;
pub const XR_TRUE: u32 = 1;
pub const XR_FALSE: u32 = 0;
pub const XR_MAX_EXTENSION_NAME_SIZE: u32 = 128;
pub const XR_MAX_API_LAYER_NAME_SIZE: u32 = 256;
pub const XR_MAX_API_LAYER_DESCRIPTION_SIZE: u32 = 256;
pub const XR_MAX_SYSTEM_NAME_SIZE: u32 = 256;
pub const XR_MAX_APPLICATION_NAME_SIZE: u32 = 128;
pub const XR_MAX_ENGINE_NAME_SIZE: u32 = 128;
pub const XR_MAX_RUNTIME_NAME_SIZE: u32 = 128;
pub const XR_MAX_PATH_LENGTH: u32 = 256;
pub const XR_MAX_STRUCTURE_NAME_SIZE: u32 = 64;
pub const XR_MAX_RESULT_STRING_SIZE: u32 = 64;
pub const XR_MAX_ACTION_SET_NAME_SIZE: u32 = 64;
pub const XR_MAX_LOCALIZED_ACTION_SET_NAME_SIZE: u32 = 128;
pub const XR_MAX_ACTION_NAME_SIZE: u32 = 64;
pub const XR_MAX_LOCALIZED_ACTION_NAME_SIZE: u32 = 128;
pub const XR_VERSION_1_1: u32 = 1;
pub const XR_UUID_SIZE: u32 = 16;
pub const XR_KHR_composition_layer_cube: u32 = 1;
pub const XR_KHR_composition_layer_cube_SPEC_VERSION: u32 = 8;
pub const XR_KHR_COMPOSITION_LAYER_CUBE_EXTENSION_NAME: &[u8; 30] =
    b"XR_KHR_composition_layer_cube\0";
pub const XR_KHR_composition_layer_depth: u32 = 1;
pub const XR_KHR_composition_layer_depth_SPEC_VERSION: u32 = 6;
pub const XR_KHR_COMPOSITION_LAYER_DEPTH_EXTENSION_NAME: &[u8; 31] =
    b"XR_KHR_composition_layer_depth\0";
pub const XR_KHR_composition_layer_cylinder: u32 = 1;
pub const XR_KHR_composition_layer_cylinder_SPEC_VERSION: u32 = 4;
pub const XR_KHR_COMPOSITION_LAYER_CYLINDER_EXTENSION_NAME: &[u8; 34] =
    b"XR_KHR_composition_layer_cylinder\0";
pub const XR_KHR_composition_layer_equirect: u32 = 1;
pub const XR_KHR_composition_layer_equirect_SPEC_VERSION: u32 = 3;
pub const XR_KHR_COMPOSITION_LAYER_EQUIRECT_EXTENSION_NAME: &[u8; 34] =
    b"XR_KHR_composition_layer_equirect\0";
pub const XR_KHR_visibility_mask: u32 = 1;
pub const XR_KHR_visibility_mask_SPEC_VERSION: u32 = 2;
pub const XR_KHR_VISIBILITY_MASK_EXTENSION_NAME: &[u8; 23] = b"XR_KHR_visibility_mask\0";
pub const XR_KHR_composition_layer_color_scale_bias: u32 = 1;
pub const XR_KHR_composition_layer_color_scale_bias_SPEC_VERSION: u32 = 5;
pub const XR_KHR_COMPOSITION_LAYER_COLOR_SCALE_BIAS_EXTENSION_NAME: &[u8; 42] =
    b"XR_KHR_composition_layer_color_scale_bias\0";
pub const XR_KHR_loader_init: u32 = 1;
pub const XR_KHR_loader_init_SPEC_VERSION: u32 = 2;
pub const XR_KHR_LOADER_INIT_EXTENSION_NAME: &[u8; 19] = b"XR_KHR_loader_init\0";
pub const XR_KHR_composition_layer_equirect2: u32 = 1;
pub const XR_KHR_composition_layer_equirect2_SPEC_VERSION: u32 = 1;
pub const XR_KHR_COMPOSITION_LAYER_EQUIRECT2_EXTENSION_NAME: &[u8; 35] =
    b"XR_KHR_composition_layer_equirect2\0";
pub const XR_KHR_binding_modification: u32 = 1;
pub const XR_KHR_binding_modification_SPEC_VERSION: u32 = 1;
pub const XR_KHR_BINDING_MODIFICATION_EXTENSION_NAME: &[u8; 28] = b"XR_KHR_binding_modification\0";
pub const XR_KHR_swapchain_usage_input_attachment_bit: u32 = 1;
pub const XR_KHR_swapchain_usage_input_attachment_bit_SPEC_VERSION: u32 = 3;
pub const XR_KHR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_EXTENSION_NAME: &[u8; 44] =
    b"XR_KHR_swapchain_usage_input_attachment_bit\0";
pub const XR_KHR_locate_spaces: u32 = 1;
pub const XR_KHR_locate_spaces_SPEC_VERSION: u32 = 1;
pub const XR_KHR_LOCATE_SPACES_EXTENSION_NAME: &[u8; 21] = b"XR_KHR_locate_spaces\0";
pub const XR_KHR_maintenance1: u32 = 1;
pub const XR_KHR_maintenance1_SPEC_VERSION: u32 = 1;
pub const XR_KHR_MAINTENANCE1_EXTENSION_NAME: &[u8; 20] = b"XR_KHR_maintenance1\0";
pub const XR_EXT_performance_settings: u32 = 1;
pub const XR_EXT_performance_settings_SPEC_VERSION: u32 = 4;
pub const XR_EXT_PERFORMANCE_SETTINGS_EXTENSION_NAME: &[u8; 28] = b"XR_EXT_performance_settings\0";
pub const XR_EXT_thermal_query: u32 = 1;
pub const XR_EXT_thermal_query_SPEC_VERSION: u32 = 2;
pub const XR_EXT_THERMAL_QUERY_EXTENSION_NAME: &[u8; 21] = b"XR_EXT_thermal_query\0";
pub const XR_EXT_debug_utils: u32 = 1;
pub const XR_EXT_debug_utils_SPEC_VERSION: u32 = 5;
pub const XR_EXT_DEBUG_UTILS_EXTENSION_NAME: &[u8; 19] = b"XR_EXT_debug_utils\0";
pub const XR_EXT_eye_gaze_interaction: u32 = 1;
pub const XR_EXT_eye_gaze_interaction_SPEC_VERSION: u32 = 2;
pub const XR_EXT_EYE_GAZE_INTERACTION_EXTENSION_NAME: &[u8; 28] = b"XR_EXT_eye_gaze_interaction\0";
pub const XR_EXTX_overlay: u32 = 1;
pub const XR_EXTX_overlay_SPEC_VERSION: u32 = 5;
pub const XR_EXTX_OVERLAY_EXTENSION_NAME: &[u8; 16] = b"XR_EXTX_overlay\0";
pub const XR_VARJO_quad_views: u32 = 1;
pub const XR_VARJO_quad_views_SPEC_VERSION: u32 = 1;
pub const XR_VARJO_QUAD_VIEWS_EXTENSION_NAME: &[u8; 20] = b"XR_VARJO_quad_views\0";
pub const XR_MSFT_unbounded_reference_space: u32 = 1;
pub const XR_MSFT_unbounded_reference_space_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_UNBOUNDED_REFERENCE_SPACE_EXTENSION_NAME: &[u8; 34] =
    b"XR_MSFT_unbounded_reference_space\0";
pub const XR_MSFT_spatial_anchor: u32 = 1;
pub const XR_MSFT_spatial_anchor_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_SPATIAL_ANCHOR_EXTENSION_NAME: &[u8; 23] = b"XR_MSFT_spatial_anchor\0";
pub const XR_FB_composition_layer_image_layout: u32 = 1;
pub const XR_FB_composition_layer_image_layout_SPEC_VERSION: u32 = 1;
pub const XR_FB_COMPOSITION_LAYER_IMAGE_LAYOUT_EXTENSION_NAME: &[u8; 37] =
    b"XR_FB_composition_layer_image_layout\0";
pub const XR_FB_composition_layer_alpha_blend: u32 = 1;
pub const XR_FB_composition_layer_alpha_blend_SPEC_VERSION: u32 = 3;
pub const XR_FB_COMPOSITION_LAYER_ALPHA_BLEND_EXTENSION_NAME: &[u8; 36] =
    b"XR_FB_composition_layer_alpha_blend\0";
pub const XR_MND_headless: u32 = 1;
pub const XR_MND_headless_SPEC_VERSION: u32 = 2;
pub const XR_MND_HEADLESS_EXTENSION_NAME: &[u8; 16] = b"XR_MND_headless\0";
pub const XR_OCULUS_android_session_state_enable: u32 = 1;
pub const XR_OCULUS_android_session_state_enable_SPEC_VERSION: u32 = 1;
pub const XR_OCULUS_ANDROID_SESSION_STATE_ENABLE_EXTENSION_NAME: &[u8; 39] =
    b"XR_OCULUS_android_session_state_enable\0";
pub const XR_EXT_view_configuration_depth_range: u32 = 1;
pub const XR_EXT_view_configuration_depth_range_SPEC_VERSION: u32 = 1;
pub const XR_EXT_VIEW_CONFIGURATION_DEPTH_RANGE_EXTENSION_NAME: &[u8; 38] =
    b"XR_EXT_view_configuration_depth_range\0";
pub const XR_EXT_conformance_automation: u32 = 1;
pub const XR_EXT_conformance_automation_SPEC_VERSION: u32 = 3;
pub const XR_EXT_CONFORMANCE_AUTOMATION_EXTENSION_NAME: &[u8; 30] =
    b"XR_EXT_conformance_automation\0";
pub const XR_MSFT_spatial_graph_bridge: u32 = 1;
pub const XR_GUID_SIZE_MSFT: u32 = 16;
pub const XR_MSFT_spatial_graph_bridge_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_SPATIAL_GRAPH_BRIDGE_EXTENSION_NAME: &[u8; 29] =
    b"XR_MSFT_spatial_graph_bridge\0";
pub const XR_MSFT_hand_interaction: u32 = 1;
pub const XR_MSFT_hand_interaction_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_HAND_INTERACTION_EXTENSION_NAME: &[u8; 25] = b"XR_MSFT_hand_interaction\0";
pub const XR_EXT_hand_tracking: u32 = 1;
pub const XR_HAND_JOINT_COUNT_EXT: u32 = 26;
pub const XR_EXT_hand_tracking_SPEC_VERSION: u32 = 4;
pub const XR_EXT_HAND_TRACKING_EXTENSION_NAME: &[u8; 21] = b"XR_EXT_hand_tracking\0";
pub const XR_MSFT_hand_tracking_mesh: u32 = 1;
pub const XR_MSFT_hand_tracking_mesh_SPEC_VERSION: u32 = 4;
pub const XR_MSFT_HAND_TRACKING_MESH_EXTENSION_NAME: &[u8; 27] = b"XR_MSFT_hand_tracking_mesh\0";
pub const XR_MSFT_secondary_view_configuration: u32 = 1;
pub const XR_MSFT_secondary_view_configuration_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_SECONDARY_VIEW_CONFIGURATION_EXTENSION_NAME: &[u8; 37] =
    b"XR_MSFT_secondary_view_configuration\0";
pub const XR_MSFT_first_person_observer: u32 = 1;
pub const XR_MSFT_first_person_observer_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_FIRST_PERSON_OBSERVER_EXTENSION_NAME: &[u8; 30] =
    b"XR_MSFT_first_person_observer\0";
pub const XR_MSFT_controller_model: u32 = 1;
pub const XR_NULL_CONTROLLER_MODEL_KEY_MSFT: u32 = 0;
pub const XR_MAX_CONTROLLER_MODEL_NODE_NAME_SIZE_MSFT: u32 = 64;
pub const XR_MSFT_controller_model_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_CONTROLLER_MODEL_EXTENSION_NAME: &[u8; 25] = b"XR_MSFT_controller_model\0";
pub const XR_EXT_win32_appcontainer_compatible: u32 = 1;
pub const XR_EXT_win32_appcontainer_compatible_SPEC_VERSION: u32 = 1;
pub const XR_EXT_WIN32_APPCONTAINER_COMPATIBLE_EXTENSION_NAME: &[u8; 37] =
    b"XR_EXT_win32_appcontainer_compatible\0";
pub const XR_EPIC_view_configuration_fov: u32 = 1;
pub const XR_EPIC_view_configuration_fov_SPEC_VERSION: u32 = 2;
pub const XR_EPIC_VIEW_CONFIGURATION_FOV_EXTENSION_NAME: &[u8; 31] =
    b"XR_EPIC_view_configuration_fov\0";
pub const XR_MSFT_composition_layer_reprojection: u32 = 1;
pub const XR_MSFT_composition_layer_reprojection_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_COMPOSITION_LAYER_REPROJECTION_EXTENSION_NAME: &[u8; 39] =
    b"XR_MSFT_composition_layer_reprojection\0";
pub const XR_HUAWEI_controller_interaction: u32 = 1;
pub const XR_HUAWEI_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_HUAWEI_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 33] =
    b"XR_HUAWEI_controller_interaction\0";
pub const XR_FB_swapchain_update_state: u32 = 1;
pub const XR_FB_swapchain_update_state_SPEC_VERSION: u32 = 3;
pub const XR_FB_SWAPCHAIN_UPDATE_STATE_EXTENSION_NAME: &[u8; 29] =
    b"XR_FB_swapchain_update_state\0";
pub const XR_FB_composition_layer_secure_content: u32 = 1;
pub const XR_FB_composition_layer_secure_content_SPEC_VERSION: u32 = 1;
pub const XR_FB_COMPOSITION_LAYER_SECURE_CONTENT_EXTENSION_NAME: &[u8; 39] =
    b"XR_FB_composition_layer_secure_content\0";
pub const XR_FB_body_tracking: u32 = 1;
pub const XR_FB_body_tracking_SPEC_VERSION: u32 = 1;
pub const XR_FB_BODY_TRACKING_EXTENSION_NAME: &[u8; 20] = b"XR_FB_body_tracking\0";
pub const XR_EXT_dpad_binding: u32 = 1;
pub const XR_EXT_dpad_binding_SPEC_VERSION: u32 = 1;
pub const XR_EXT_DPAD_BINDING_EXTENSION_NAME: &[u8; 20] = b"XR_EXT_dpad_binding\0";
pub const XR_VALVE_analog_threshold: u32 = 1;
pub const XR_VALVE_analog_threshold_SPEC_VERSION: u32 = 2;
pub const XR_VALVE_ANALOG_THRESHOLD_EXTENSION_NAME: &[u8; 26] = b"XR_VALVE_analog_threshold\0";
pub const XR_EXT_hand_joints_motion_range: u32 = 1;
pub const XR_EXT_hand_joints_motion_range_SPEC_VERSION: u32 = 1;
pub const XR_EXT_HAND_JOINTS_MOTION_RANGE_EXTENSION_NAME: &[u8; 32] =
    b"XR_EXT_hand_joints_motion_range\0";
pub const XR_EXT_samsung_odyssey_controller: u32 = 1;
pub const XR_EXT_samsung_odyssey_controller_SPEC_VERSION: u32 = 1;
pub const XR_EXT_SAMSUNG_ODYSSEY_CONTROLLER_EXTENSION_NAME: &[u8; 34] =
    b"XR_EXT_samsung_odyssey_controller\0";
pub const XR_EXT_hp_mixed_reality_controller: u32 = 1;
pub const XR_EXT_hp_mixed_reality_controller_SPEC_VERSION: u32 = 1;
pub const XR_EXT_HP_MIXED_REALITY_CONTROLLER_EXTENSION_NAME: &[u8; 35] =
    b"XR_EXT_hp_mixed_reality_controller\0";
pub const XR_MND_swapchain_usage_input_attachment_bit: u32 = 1;
pub const XR_MND_swapchain_usage_input_attachment_bit_SPEC_VERSION: u32 = 2;
pub const XR_MND_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_EXTENSION_NAME: &[u8; 44] =
    b"XR_MND_swapchain_usage_input_attachment_bit\0";
pub const XR_MSFT_scene_understanding: u32 = 1;
pub const XR_MSFT_scene_understanding_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_SCENE_UNDERSTANDING_EXTENSION_NAME: &[u8; 28] = b"XR_MSFT_scene_understanding\0";
pub const XR_MSFT_scene_understanding_serialization: u32 = 1;
pub const XR_MSFT_scene_understanding_serialization_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_SCENE_UNDERSTANDING_SERIALIZATION_EXTENSION_NAME: &[u8; 42] =
    b"XR_MSFT_scene_understanding_serialization\0";
pub const XR_FB_display_refresh_rate: u32 = 1;
pub const XR_FB_display_refresh_rate_SPEC_VERSION: u32 = 1;
pub const XR_FB_DISPLAY_REFRESH_RATE_EXTENSION_NAME: &[u8; 27] = b"XR_FB_display_refresh_rate\0";
pub const XR_HTC_vive_cosmos_controller_interaction: u32 = 1;
pub const XR_HTC_vive_cosmos_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_HTC_VIVE_COSMOS_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 42] =
    b"XR_HTC_vive_cosmos_controller_interaction\0";
pub const XR_HTCX_vive_tracker_interaction: u32 = 1;
pub const XR_HTCX_vive_tracker_interaction_SPEC_VERSION: u32 = 3;
pub const XR_HTCX_VIVE_TRACKER_INTERACTION_EXTENSION_NAME: &[u8; 33] =
    b"XR_HTCX_vive_tracker_interaction\0";
pub const XR_HTC_facial_tracking: u32 = 1;
pub const XR_FACIAL_EXPRESSION_EYE_COUNT_HTC: u32 = 14;
pub const XR_FACIAL_EXPRESSION_LIP_COUNT_HTC: u32 = 37;
pub const XR_HTC_facial_tracking_SPEC_VERSION: u32 = 2;
pub const XR_HTC_FACIAL_TRACKING_EXTENSION_NAME: &[u8; 23] = b"XR_HTC_facial_tracking\0";
pub const XR_HTC_vive_focus3_controller_interaction: u32 = 1;
pub const XR_HTC_vive_focus3_controller_interaction_SPEC_VERSION: u32 = 2;
pub const XR_HTC_VIVE_FOCUS3_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 42] =
    b"XR_HTC_vive_focus3_controller_interaction\0";
pub const XR_HTC_hand_interaction: u32 = 1;
pub const XR_HTC_hand_interaction_SPEC_VERSION: u32 = 1;
pub const XR_HTC_HAND_INTERACTION_EXTENSION_NAME: &[u8; 24] = b"XR_HTC_hand_interaction\0";
pub const XR_HTC_vive_wrist_tracker_interaction: u32 = 1;
pub const XR_HTC_vive_wrist_tracker_interaction_SPEC_VERSION: u32 = 1;
pub const XR_HTC_VIVE_WRIST_TRACKER_INTERACTION_EXTENSION_NAME: &[u8; 38] =
    b"XR_HTC_vive_wrist_tracker_interaction\0";
pub const XR_FB_color_space: u32 = 1;
pub const XR_FB_color_space_SPEC_VERSION: u32 = 3;
pub const XR_FB_COLOR_SPACE_EXTENSION_NAME: &[u8; 18] = b"XR_FB_color_space\0";
pub const XR_FB_hand_tracking_mesh: u32 = 1;
pub const XR_FB_hand_tracking_mesh_SPEC_VERSION: u32 = 3;
pub const XR_FB_HAND_TRACKING_MESH_EXTENSION_NAME: &[u8; 25] = b"XR_FB_hand_tracking_mesh\0";
pub const XR_FB_hand_tracking_aim: u32 = 1;
pub const XR_FB_hand_tracking_aim_SPEC_VERSION: u32 = 2;
pub const XR_FB_HAND_TRACKING_AIM_EXTENSION_NAME: &[u8; 24] = b"XR_FB_hand_tracking_aim\0";
pub const XR_FB_hand_tracking_capsules: u32 = 1;
pub const XR_HAND_TRACKING_CAPSULE_POINT_COUNT_FB: u32 = 2;
pub const XR_HAND_TRACKING_CAPSULE_COUNT_FB: u32 = 19;
pub const XR_FB_hand_tracking_capsules_SPEC_VERSION: u32 = 3;
pub const XR_FB_HAND_TRACKING_CAPSULES_EXTENSION_NAME: &[u8; 29] =
    b"XR_FB_hand_tracking_capsules\0";
pub const XR_FB_HAND_TRACKING_CAPSULE_POINT_COUNT: u32 = 2;
pub const XR_FB_HAND_TRACKING_CAPSULE_COUNT: u32 = 19;
pub const XR_FB_spatial_entity: u32 = 1;
pub const XR_FB_spatial_entity_SPEC_VERSION: u32 = 3;
pub const XR_FB_SPATIAL_ENTITY_EXTENSION_NAME: &[u8; 21] = b"XR_FB_spatial_entity\0";
pub const XR_FB_foveation: u32 = 1;
pub const XR_FB_foveation_SPEC_VERSION: u32 = 1;
pub const XR_FB_FOVEATION_EXTENSION_NAME: &[u8; 16] = b"XR_FB_foveation\0";
pub const XR_FB_foveation_configuration: u32 = 1;
pub const XR_FB_foveation_configuration_SPEC_VERSION: u32 = 1;
pub const XR_FB_FOVEATION_CONFIGURATION_EXTENSION_NAME: &[u8; 30] =
    b"XR_FB_foveation_configuration\0";
pub const XR_FB_keyboard_tracking: u32 = 1;
pub const XR_MAX_KEYBOARD_TRACKING_NAME_SIZE_FB: u32 = 128;
pub const XR_FB_keyboard_tracking_SPEC_VERSION: u32 = 1;
pub const XR_FB_KEYBOARD_TRACKING_EXTENSION_NAME: &[u8; 24] = b"XR_FB_keyboard_tracking\0";
pub const XR_FB_triangle_mesh: u32 = 1;
pub const XR_FB_triangle_mesh_SPEC_VERSION: u32 = 2;
pub const XR_FB_TRIANGLE_MESH_EXTENSION_NAME: &[u8; 20] = b"XR_FB_triangle_mesh\0";
pub const XR_FB_passthrough: u32 = 1;
pub const XR_PASSTHROUGH_COLOR_MAP_MONO_SIZE_FB: u32 = 256;
pub const XR_FB_passthrough_SPEC_VERSION: u32 = 3;
pub const XR_FB_PASSTHROUGH_EXTENSION_NAME: &[u8; 18] = b"XR_FB_passthrough\0";
pub const XR_FB_render_model: u32 = 1;
pub const XR_NULL_RENDER_MODEL_KEY_FB: u32 = 0;
pub const XR_MAX_RENDER_MODEL_NAME_SIZE_FB: u32 = 64;
pub const XR_FB_render_model_SPEC_VERSION: u32 = 4;
pub const XR_FB_RENDER_MODEL_EXTENSION_NAME: &[u8; 19] = b"XR_FB_render_model\0";
pub const XR_VARJO_foveated_rendering: u32 = 1;
pub const XR_VARJO_foveated_rendering_SPEC_VERSION: u32 = 3;
pub const XR_VARJO_FOVEATED_RENDERING_EXTENSION_NAME: &[u8; 28] = b"XR_VARJO_foveated_rendering\0";
pub const XR_VARJO_composition_layer_depth_test: u32 = 1;
pub const XR_VARJO_composition_layer_depth_test_SPEC_VERSION: u32 = 2;
pub const XR_VARJO_COMPOSITION_LAYER_DEPTH_TEST_EXTENSION_NAME: &[u8; 38] =
    b"XR_VARJO_composition_layer_depth_test\0";
pub const XR_VARJO_environment_depth_estimation: u32 = 1;
pub const XR_VARJO_environment_depth_estimation_SPEC_VERSION: u32 = 1;
pub const XR_VARJO_ENVIRONMENT_DEPTH_ESTIMATION_EXTENSION_NAME: &[u8; 38] =
    b"XR_VARJO_environment_depth_estimation\0";
pub const XR_VARJO_marker_tracking: u32 = 1;
pub const XR_VARJO_marker_tracking_SPEC_VERSION: u32 = 1;
pub const XR_VARJO_MARKER_TRACKING_EXTENSION_NAME: &[u8; 25] = b"XR_VARJO_marker_tracking\0";
pub const XR_VARJO_view_offset: u32 = 1;
pub const XR_VARJO_view_offset_SPEC_VERSION: u32 = 1;
pub const XR_VARJO_VIEW_OFFSET_EXTENSION_NAME: &[u8; 21] = b"XR_VARJO_view_offset\0";
pub const XR_VARJO_xr4_controller_interaction: u32 = 1;
pub const XR_VARJO_xr4_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_VARJO_XR4_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 36] =
    b"XR_VARJO_xr4_controller_interaction\0";
pub const XR_ML_ml2_controller_interaction: u32 = 1;
pub const XR_ML_ml2_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_ML_ML2_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 33] =
    b"XR_ML_ml2_controller_interaction\0";
pub const XR_ML_frame_end_info: u32 = 1;
pub const XR_ML_frame_end_info_SPEC_VERSION: u32 = 1;
pub const XR_ML_FRAME_END_INFO_EXTENSION_NAME: &[u8; 21] = b"XR_ML_frame_end_info\0";
pub const XR_ML_global_dimmer: u32 = 1;
pub const XR_ML_global_dimmer_SPEC_VERSION: u32 = 1;
pub const XR_ML_GLOBAL_DIMMER_EXTENSION_NAME: &[u8; 20] = b"XR_ML_global_dimmer\0";
pub const XR_ML_marker_understanding: u32 = 1;
pub const XR_ML_marker_understanding_SPEC_VERSION: u32 = 1;
pub const XR_ML_MARKER_UNDERSTANDING_EXTENSION_NAME: &[u8; 27] = b"XR_ML_marker_understanding\0";
pub const XR_ML_localization_map: u32 = 1;
pub const XR_MAX_LOCALIZATION_MAP_NAME_LENGTH_ML: u32 = 64;
pub const XR_ML_localization_map_SPEC_VERSION: u32 = 1;
pub const XR_ML_LOCALIZATION_MAP_EXTENSION_NAME: &[u8; 23] = b"XR_ML_localization_map\0";
pub const XR_MSFT_spatial_anchor_persistence: u32 = 1;
pub const XR_MAX_SPATIAL_ANCHOR_NAME_SIZE_MSFT: u32 = 256;
pub const XR_MSFT_spatial_anchor_persistence_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_SPATIAL_ANCHOR_PERSISTENCE_EXTENSION_NAME: &[u8; 35] =
    b"XR_MSFT_spatial_anchor_persistence\0";
pub const XR_MSFT_scene_marker: u32 = 1;
pub const XR_MSFT_scene_marker_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_SCENE_MARKER_EXTENSION_NAME: &[u8; 21] = b"XR_MSFT_scene_marker\0";
pub const XR_ULTRALEAP_hand_tracking_forearm: u32 = 1;
pub const XR_HAND_FOREARM_JOINT_COUNT_ULTRALEAP: u32 = 27;
pub const XR_ULTRALEAP_hand_tracking_forearm_SPEC_VERSION: u32 = 1;
pub const XR_ULTRALEAP_HAND_TRACKING_FOREARM_EXTENSION_NAME: &[u8; 35] =
    b"XR_ULTRALEAP_hand_tracking_forearm\0";
pub const XR_FB_spatial_entity_query: u32 = 1;
pub const XR_FB_spatial_entity_query_SPEC_VERSION: u32 = 1;
pub const XR_FB_SPATIAL_ENTITY_QUERY_EXTENSION_NAME: &[u8; 27] = b"XR_FB_spatial_entity_query\0";
pub const XR_FB_spatial_entity_storage: u32 = 1;
pub const XR_FB_spatial_entity_storage_SPEC_VERSION: u32 = 1;
pub const XR_FB_SPATIAL_ENTITY_STORAGE_EXTENSION_NAME: &[u8; 29] =
    b"XR_FB_spatial_entity_storage\0";
pub const XR_FB_touch_controller_pro: u32 = 1;
pub const XR_FB_touch_controller_pro_SPEC_VERSION: u32 = 1;
pub const XR_FB_TOUCH_CONTROLLER_PRO_EXTENSION_NAME: &[u8; 27] = b"XR_FB_touch_controller_pro\0";
pub const XR_FB_spatial_entity_sharing: u32 = 1;
pub const XR_FB_spatial_entity_sharing_SPEC_VERSION: u32 = 1;
pub const XR_FB_SPATIAL_ENTITY_SHARING_EXTENSION_NAME: &[u8; 29] =
    b"XR_FB_spatial_entity_sharing\0";
pub const XR_FB_space_warp: u32 = 1;
pub const XR_FB_space_warp_SPEC_VERSION: u32 = 2;
pub const XR_FB_SPACE_WARP_EXTENSION_NAME: &[u8; 17] = b"XR_FB_space_warp\0";
pub const XR_FB_haptic_amplitude_envelope: u32 = 1;
pub const XR_MAX_HAPTIC_AMPLITUDE_ENVELOPE_SAMPLES_FB: u32 = 4000;
pub const XR_FB_haptic_amplitude_envelope_SPEC_VERSION: u32 = 1;
pub const XR_FB_HAPTIC_AMPLITUDE_ENVELOPE_EXTENSION_NAME: &[u8; 32] =
    b"XR_FB_haptic_amplitude_envelope\0";
pub const XR_FB_scene: u32 = 1;
pub const XR_FB_scene_SPEC_VERSION: u32 = 4;
pub const XR_FB_SCENE_EXTENSION_NAME: &[u8; 12] = b"XR_FB_scene\0";
pub const XR_EXT_palm_pose: u32 = 1;
pub const XR_EXT_palm_pose_SPEC_VERSION: u32 = 3;
pub const XR_EXT_PALM_POSE_EXTENSION_NAME: &[u8; 17] = b"XR_EXT_palm_pose\0";
pub const XR_ALMALENCE_digital_lens_control: u32 = 1;
pub const XR_ALMALENCE_digital_lens_control_SPEC_VERSION: u32 = 1;
pub const XR_ALMALENCE_DIGITAL_LENS_CONTROL_EXTENSION_NAME: &[u8; 34] =
    b"XR_ALMALENCE_digital_lens_control\0";
pub const XR_FB_scene_capture: u32 = 1;
pub const XR_FB_scene_capture_SPEC_VERSION: u32 = 1;
pub const XR_FB_SCENE_CAPTURE_EXTENSION_NAME: &[u8; 20] = b"XR_FB_scene_capture\0";
pub const XR_FB_spatial_entity_container: u32 = 1;
pub const XR_FB_spatial_entity_container_SPEC_VERSION: u32 = 2;
pub const XR_FB_SPATIAL_ENTITY_CONTAINER_EXTENSION_NAME: &[u8; 31] =
    b"XR_FB_spatial_entity_container\0";
pub const XR_META_foveation_eye_tracked: u32 = 1;
pub const XR_FOVEATION_CENTER_SIZE_META: u32 = 2;
pub const XR_META_foveation_eye_tracked_SPEC_VERSION: u32 = 1;
pub const XR_META_FOVEATION_EYE_TRACKED_EXTENSION_NAME: &[u8; 30] =
    b"XR_META_foveation_eye_tracked\0";
pub const XR_FB_face_tracking: u32 = 1;
pub const XR_FB_face_tracking_SPEC_VERSION: u32 = 1;
pub const XR_FB_FACE_TRACKING_EXTENSION_NAME: &[u8; 20] = b"XR_FB_face_tracking\0";
pub const XR_FB_eye_tracking_social: u32 = 1;
pub const XR_FB_eye_tracking_social_SPEC_VERSION: u32 = 1;
pub const XR_FB_EYE_TRACKING_SOCIAL_EXTENSION_NAME: &[u8; 26] = b"XR_FB_eye_tracking_social\0";
pub const XR_FB_passthrough_keyboard_hands: u32 = 1;
pub const XR_FB_passthrough_keyboard_hands_SPEC_VERSION: u32 = 2;
pub const XR_FB_PASSTHROUGH_KEYBOARD_HANDS_EXTENSION_NAME: &[u8; 33] =
    b"XR_FB_passthrough_keyboard_hands\0";
pub const XR_FB_composition_layer_settings: u32 = 1;
pub const XR_FB_composition_layer_settings_SPEC_VERSION: u32 = 1;
pub const XR_FB_COMPOSITION_LAYER_SETTINGS_EXTENSION_NAME: &[u8; 33] =
    b"XR_FB_composition_layer_settings\0";
pub const XR_FB_touch_controller_proximity: u32 = 1;
pub const XR_FB_touch_controller_proximity_SPEC_VERSION: u32 = 1;
pub const XR_FB_TOUCH_CONTROLLER_PROXIMITY_EXTENSION_NAME: &[u8; 33] =
    b"XR_FB_touch_controller_proximity\0";
pub const XR_FB_haptic_pcm: u32 = 1;
pub const XR_MAX_HAPTIC_PCM_BUFFER_SIZE_FB: u32 = 4000;
pub const XR_FB_haptic_pcm_SPEC_VERSION: u32 = 1;
pub const XR_FB_HAPTIC_PCM_EXTENSION_NAME: &[u8; 17] = b"XR_FB_haptic_pcm\0";
pub const XR_FB_composition_layer_depth_test: u32 = 1;
pub const XR_FB_composition_layer_depth_test_SPEC_VERSION: u32 = 1;
pub const XR_FB_COMPOSITION_LAYER_DEPTH_TEST_EXTENSION_NAME: &[u8; 35] =
    b"XR_FB_composition_layer_depth_test\0";
pub const XR_META_local_dimming: u32 = 1;
pub const XR_META_local_dimming_SPEC_VERSION: u32 = 1;
pub const XR_META_LOCAL_DIMMING_EXTENSION_NAME: &[u8; 22] = b"XR_META_local_dimming\0";
pub const XR_META_passthrough_preferences: u32 = 1;
pub const XR_META_passthrough_preferences_SPEC_VERSION: u32 = 1;
pub const XR_META_PASSTHROUGH_PREFERENCES_EXTENSION_NAME: &[u8; 32] =
    b"XR_META_passthrough_preferences\0";
pub const XR_META_virtual_keyboard: u32 = 1;
pub const XR_MAX_VIRTUAL_KEYBOARD_COMMIT_TEXT_SIZE_META: u32 = 3992;
pub const XR_META_virtual_keyboard_SPEC_VERSION: u32 = 1;
pub const XR_META_VIRTUAL_KEYBOARD_EXTENSION_NAME: &[u8; 25] = b"XR_META_virtual_keyboard\0";
pub const XR_OCULUS_external_camera: u32 = 1;
pub const XR_MAX_EXTERNAL_CAMERA_NAME_SIZE_OCULUS: u32 = 32;
pub const XR_OCULUS_external_camera_SPEC_VERSION: u32 = 1;
pub const XR_OCULUS_EXTERNAL_CAMERA_EXTENSION_NAME: &[u8; 26] = b"XR_OCULUS_external_camera\0";
pub const XR_META_performance_metrics: u32 = 1;
pub const XR_META_performance_metrics_SPEC_VERSION: u32 = 2;
pub const XR_META_PERFORMANCE_METRICS_EXTENSION_NAME: &[u8; 28] = b"XR_META_performance_metrics\0";
pub const XR_FB_spatial_entity_storage_batch: u32 = 1;
pub const XR_FB_spatial_entity_storage_batch_SPEC_VERSION: u32 = 1;
pub const XR_FB_SPATIAL_ENTITY_STORAGE_BATCH_EXTENSION_NAME: &[u8; 35] =
    b"XR_FB_spatial_entity_storage_batch\0";
pub const XR_FB_spatial_entity_user: u32 = 1;
pub const XR_FB_spatial_entity_user_SPEC_VERSION: u32 = 1;
pub const XR_FB_SPATIAL_ENTITY_USER_EXTENSION_NAME: &[u8; 26] = b"XR_FB_spatial_entity_user\0";
pub const XR_META_headset_id: u32 = 1;
pub const XR_META_headset_id_SPEC_VERSION: u32 = 2;
pub const XR_META_HEADSET_ID_EXTENSION_NAME: &[u8; 19] = b"XR_META_headset_id\0";
pub const XR_META_recommended_layer_resolution: u32 = 1;
pub const XR_META_recommended_layer_resolution_SPEC_VERSION: u32 = 1;
pub const XR_META_RECOMMENDED_LAYER_RESOLUTION_EXTENSION_NAME: &[u8; 37] =
    b"XR_META_recommended_layer_resolution\0";
pub const XR_META_passthrough_color_lut: u32 = 1;
pub const XR_META_passthrough_color_lut_SPEC_VERSION: u32 = 1;
pub const XR_META_PASSTHROUGH_COLOR_LUT_EXTENSION_NAME: &[u8; 30] =
    b"XR_META_passthrough_color_lut\0";
pub const XR_META_spatial_entity_mesh: u32 = 1;
pub const XR_META_spatial_entity_mesh_SPEC_VERSION: u32 = 1;
pub const XR_META_SPATIAL_ENTITY_MESH_EXTENSION_NAME: &[u8; 28] = b"XR_META_spatial_entity_mesh\0";
pub const XR_META_automatic_layer_filter: u32 = 1;
pub const XR_META_automatic_layer_filter_SPEC_VERSION: u32 = 1;
pub const XR_META_AUTOMATIC_LAYER_FILTER_EXTENSION_NAME: &[u8; 31] =
    b"XR_META_automatic_layer_filter\0";
pub const XR_META_touch_controller_plus: u32 = 1;
pub const XR_META_touch_controller_plus_SPEC_VERSION: u32 = 1;
pub const XR_META_TOUCH_CONTROLLER_PLUS_EXTENSION_NAME: &[u8; 30] =
    b"XR_META_touch_controller_plus\0";
pub const XR_FB_face_tracking2: u32 = 1;
pub const XR_FB_face_tracking2_SPEC_VERSION: u32 = 1;
pub const XR_FB_FACE_TRACKING2_EXTENSION_NAME: &[u8; 21] = b"XR_FB_face_tracking2\0";
pub const XR_META_environment_depth: u32 = 1;
pub const XR_META_environment_depth_SPEC_VERSION: u32 = 1;
pub const XR_META_ENVIRONMENT_DEPTH_EXTENSION_NAME: &[u8; 26] = b"XR_META_environment_depth\0";
pub const XR_EXT_uuid: u32 = 1;
pub const XR_EXT_uuid_SPEC_VERSION: u32 = 1;
pub const XR_EXT_UUID_EXTENSION_NAME: &[u8; 12] = b"XR_EXT_uuid\0";
pub const XR_UUID_SIZE_EXT: u32 = 16;
pub const XR_EXT_hand_interaction: u32 = 1;
pub const XR_EXT_hand_interaction_SPEC_VERSION: u32 = 1;
pub const XR_EXT_HAND_INTERACTION_EXTENSION_NAME: &[u8; 24] = b"XR_EXT_hand_interaction\0";
pub const XR_QCOM_tracking_optimization_settings: u32 = 1;
pub const XR_QCOM_tracking_optimization_settings_SPEC_VERSION: u32 = 1;
pub const XR_QCOM_TRACKING_OPTIMIZATION_SETTINGS_EXTENSION_NAME: &[u8; 39] =
    b"XR_QCOM_tracking_optimization_settings\0";
pub const XR_HTC_passthrough: u32 = 1;
pub const XR_HTC_passthrough_SPEC_VERSION: u32 = 1;
pub const XR_HTC_PASSTHROUGH_EXTENSION_NAME: &[u8; 19] = b"XR_HTC_passthrough\0";
pub const XR_HTC_foveation: u32 = 1;
pub const XR_HTC_foveation_SPEC_VERSION: u32 = 1;
pub const XR_HTC_FOVEATION_EXTENSION_NAME: &[u8; 17] = b"XR_HTC_foveation\0";
pub const XR_HTC_anchor: u32 = 1;
pub const XR_MAX_SPATIAL_ANCHOR_NAME_SIZE_HTC: u32 = 256;
pub const XR_HTC_anchor_SPEC_VERSION: u32 = 1;
pub const XR_HTC_ANCHOR_EXTENSION_NAME: &[u8; 14] = b"XR_HTC_anchor\0";
pub const XR_EXT_active_action_set_priority: u32 = 1;
pub const XR_EXT_active_action_set_priority_SPEC_VERSION: u32 = 1;
pub const XR_EXT_ACTIVE_ACTION_SET_PRIORITY_EXTENSION_NAME: &[u8; 34] =
    b"XR_EXT_active_action_set_priority\0";
pub const XR_MNDX_force_feedback_curl: u32 = 1;
pub const XR_MNDX_force_feedback_curl_SPEC_VERSION: u32 = 1;
pub const XR_MNDX_FORCE_FEEDBACK_CURL_EXTENSION_NAME: &[u8; 28] = b"XR_MNDX_force_feedback_curl\0";
pub const XR_BD_controller_interaction: u32 = 1;
pub const XR_BD_controller_interaction_SPEC_VERSION: u32 = 2;
pub const XR_BD_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 29] =
    b"XR_BD_controller_interaction\0";
pub const XR_EXT_local_floor: u32 = 1;
pub const XR_EXT_local_floor_SPEC_VERSION: u32 = 1;
pub const XR_EXT_LOCAL_FLOOR_EXTENSION_NAME: &[u8; 19] = b"XR_EXT_local_floor\0";
pub const XR_EXT_hand_tracking_data_source: u32 = 1;
pub const XR_EXT_hand_tracking_data_source_SPEC_VERSION: u32 = 1;
pub const XR_EXT_HAND_TRACKING_DATA_SOURCE_EXTENSION_NAME: &[u8; 33] =
    b"XR_EXT_hand_tracking_data_source\0";
pub const XR_EXT_plane_detection: u32 = 1;
pub const XR_EXT_plane_detection_SPEC_VERSION: u32 = 1;
pub const XR_EXT_PLANE_DETECTION_EXTENSION_NAME: &[u8; 23] = b"XR_EXT_plane_detection\0";
pub const XR_OPPO_controller_interaction: u32 = 1;
pub const XR_OPPO_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_OPPO_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 31] =
    b"XR_OPPO_controller_interaction\0";
pub const XR_EXT_future: u32 = 1;
pub const XR_EXT_future_SPEC_VERSION: u32 = 1;
pub const XR_EXT_FUTURE_EXTENSION_NAME: &[u8; 14] = b"XR_EXT_future\0";
pub const XR_NULL_FUTURE_EXT: u32 = 0;
pub const XR_EXT_user_presence: u32 = 1;
pub const XR_EXT_user_presence_SPEC_VERSION: u32 = 1;
pub const XR_EXT_USER_PRESENCE_EXTENSION_NAME: &[u8; 21] = b"XR_EXT_user_presence\0";
pub const XR_ML_user_calibration: u32 = 1;
pub const XR_ML_user_calibration_SPEC_VERSION: u32 = 1;
pub const XR_ML_USER_CALIBRATION_EXTENSION_NAME: &[u8; 23] = b"XR_ML_user_calibration\0";
pub const XR_YVR_controller_interaction: u32 = 1;
pub const XR_YVR_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_YVR_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 30] =
    b"XR_YVR_controller_interaction\0";
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type XrVersion = u64;
pub type XrFlags64 = u64;
pub type XrSystemId = u64;
pub type XrBool32 = u32;
pub type XrPath = u64;
pub type XrTime = i64;
pub type XrDuration = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInstance_T {
    _unused: [u8; 0],
}
pub type XrInstance = *mut XrInstance_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSession_T {
    _unused: [u8; 0],
}
pub type XrSession = *mut XrSession_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpace_T {
    _unused: [u8; 0],
}
pub type XrSpace = *mut XrSpace_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrAction_T {
    _unused: [u8; 0],
}
pub type XrAction = *mut XrAction_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchain_T {
    _unused: [u8; 0],
}
pub type XrSwapchain = *mut XrSwapchain_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionSet_T {
    _unused: [u8; 0],
}
pub type XrActionSet = *mut XrActionSet_T;
pub const XrResult_XR_SUCCESS: XrResult = 0;
pub const XrResult_XR_TIMEOUT_EXPIRED: XrResult = 1;
pub const XrResult_XR_SESSION_LOSS_PENDING: XrResult = 3;
pub const XrResult_XR_EVENT_UNAVAILABLE: XrResult = 4;
pub const XrResult_XR_SPACE_BOUNDS_UNAVAILABLE: XrResult = 7;
pub const XrResult_XR_SESSION_NOT_FOCUSED: XrResult = 8;
pub const XrResult_XR_FRAME_DISCARDED: XrResult = 9;
pub const XrResult_XR_ERROR_VALIDATION_FAILURE: XrResult = -1;
pub const XrResult_XR_ERROR_RUNTIME_FAILURE: XrResult = -2;
pub const XrResult_XR_ERROR_OUT_OF_MEMORY: XrResult = -3;
pub const XrResult_XR_ERROR_API_VERSION_UNSUPPORTED: XrResult = -4;
pub const XrResult_XR_ERROR_INITIALIZATION_FAILED: XrResult = -6;
pub const XrResult_XR_ERROR_FUNCTION_UNSUPPORTED: XrResult = -7;
pub const XrResult_XR_ERROR_FEATURE_UNSUPPORTED: XrResult = -8;
pub const XrResult_XR_ERROR_EXTENSION_NOT_PRESENT: XrResult = -9;
pub const XrResult_XR_ERROR_LIMIT_REACHED: XrResult = -10;
pub const XrResult_XR_ERROR_SIZE_INSUFFICIENT: XrResult = -11;
pub const XrResult_XR_ERROR_HANDLE_INVALID: XrResult = -12;
pub const XrResult_XR_ERROR_INSTANCE_LOST: XrResult = -13;
pub const XrResult_XR_ERROR_SESSION_RUNNING: XrResult = -14;
pub const XrResult_XR_ERROR_SESSION_NOT_RUNNING: XrResult = -16;
pub const XrResult_XR_ERROR_SESSION_LOST: XrResult = -17;
pub const XrResult_XR_ERROR_SYSTEM_INVALID: XrResult = -18;
pub const XrResult_XR_ERROR_PATH_INVALID: XrResult = -19;
pub const XrResult_XR_ERROR_PATH_COUNT_EXCEEDED: XrResult = -20;
pub const XrResult_XR_ERROR_PATH_FORMAT_INVALID: XrResult = -21;
pub const XrResult_XR_ERROR_PATH_UNSUPPORTED: XrResult = -22;
pub const XrResult_XR_ERROR_LAYER_INVALID: XrResult = -23;
pub const XrResult_XR_ERROR_LAYER_LIMIT_EXCEEDED: XrResult = -24;
pub const XrResult_XR_ERROR_SWAPCHAIN_RECT_INVALID: XrResult = -25;
pub const XrResult_XR_ERROR_SWAPCHAIN_FORMAT_UNSUPPORTED: XrResult = -26;
pub const XrResult_XR_ERROR_ACTION_TYPE_MISMATCH: XrResult = -27;
pub const XrResult_XR_ERROR_SESSION_NOT_READY: XrResult = -28;
pub const XrResult_XR_ERROR_SESSION_NOT_STOPPING: XrResult = -29;
pub const XrResult_XR_ERROR_TIME_INVALID: XrResult = -30;
pub const XrResult_XR_ERROR_REFERENCE_SPACE_UNSUPPORTED: XrResult = -31;
pub const XrResult_XR_ERROR_FILE_ACCESS_ERROR: XrResult = -32;
pub const XrResult_XR_ERROR_FILE_CONTENTS_INVALID: XrResult = -33;
pub const XrResult_XR_ERROR_FORM_FACTOR_UNSUPPORTED: XrResult = -34;
pub const XrResult_XR_ERROR_FORM_FACTOR_UNAVAILABLE: XrResult = -35;
pub const XrResult_XR_ERROR_API_LAYER_NOT_PRESENT: XrResult = -36;
pub const XrResult_XR_ERROR_CALL_ORDER_INVALID: XrResult = -37;
pub const XrResult_XR_ERROR_GRAPHICS_DEVICE_INVALID: XrResult = -38;
pub const XrResult_XR_ERROR_POSE_INVALID: XrResult = -39;
pub const XrResult_XR_ERROR_INDEX_OUT_OF_RANGE: XrResult = -40;
pub const XrResult_XR_ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED: XrResult = -41;
pub const XrResult_XR_ERROR_ENVIRONMENT_BLEND_MODE_UNSUPPORTED: XrResult = -42;
pub const XrResult_XR_ERROR_NAME_DUPLICATED: XrResult = -44;
pub const XrResult_XR_ERROR_NAME_INVALID: XrResult = -45;
pub const XrResult_XR_ERROR_ACTIONSET_NOT_ATTACHED: XrResult = -46;
pub const XrResult_XR_ERROR_ACTIONSETS_ALREADY_ATTACHED: XrResult = -47;
pub const XrResult_XR_ERROR_LOCALIZED_NAME_DUPLICATED: XrResult = -48;
pub const XrResult_XR_ERROR_LOCALIZED_NAME_INVALID: XrResult = -49;
pub const XrResult_XR_ERROR_GRAPHICS_REQUIREMENTS_CALL_MISSING: XrResult = -50;
pub const XrResult_XR_ERROR_RUNTIME_UNAVAILABLE: XrResult = -51;
pub const XrResult_XR_ERROR_EXTENSION_DEPENDENCY_NOT_ENABLED: XrResult = -1000710001;
pub const XrResult_XR_ERROR_PERMISSION_INSUFFICIENT: XrResult = -1000710000;
pub const XrResult_XR_ERROR_ANDROID_THREAD_SETTINGS_ID_INVALID_KHR: XrResult = -1000003000;
pub const XrResult_XR_ERROR_ANDROID_THREAD_SETTINGS_FAILURE_KHR: XrResult = -1000003001;
pub const XrResult_XR_ERROR_CREATE_SPATIAL_ANCHOR_FAILED_MSFT: XrResult = -1000039001;
pub const XrResult_XR_ERROR_SECONDARY_VIEW_CONFIGURATION_TYPE_NOT_ENABLED_MSFT: XrResult =
    -1000053000;
pub const XrResult_XR_ERROR_CONTROLLER_MODEL_KEY_INVALID_MSFT: XrResult = -1000055000;
pub const XrResult_XR_ERROR_REPROJECTION_MODE_UNSUPPORTED_MSFT: XrResult = -1000066000;
pub const XrResult_XR_ERROR_COMPUTE_NEW_SCENE_NOT_COMPLETED_MSFT: XrResult = -1000097000;
pub const XrResult_XR_ERROR_SCENE_COMPONENT_ID_INVALID_MSFT: XrResult = -1000097001;
pub const XrResult_XR_ERROR_SCENE_COMPONENT_TYPE_MISMATCH_MSFT: XrResult = -1000097002;
pub const XrResult_XR_ERROR_SCENE_MESH_BUFFER_ID_INVALID_MSFT: XrResult = -1000097003;
pub const XrResult_XR_ERROR_SCENE_COMPUTE_FEATURE_INCOMPATIBLE_MSFT: XrResult = -1000097004;
pub const XrResult_XR_ERROR_SCENE_COMPUTE_CONSISTENCY_MISMATCH_MSFT: XrResult = -1000097005;
pub const XrResult_XR_ERROR_DISPLAY_REFRESH_RATE_UNSUPPORTED_FB: XrResult = -1000101000;
pub const XrResult_XR_ERROR_COLOR_SPACE_UNSUPPORTED_FB: XrResult = -1000108000;
pub const XrResult_XR_ERROR_SPACE_COMPONENT_NOT_SUPPORTED_FB: XrResult = -1000113000;
pub const XrResult_XR_ERROR_SPACE_COMPONENT_NOT_ENABLED_FB: XrResult = -1000113001;
pub const XrResult_XR_ERROR_SPACE_COMPONENT_STATUS_PENDING_FB: XrResult = -1000113002;
pub const XrResult_XR_ERROR_SPACE_COMPONENT_STATUS_ALREADY_SET_FB: XrResult = -1000113003;
pub const XrResult_XR_ERROR_UNEXPECTED_STATE_PASSTHROUGH_FB: XrResult = -1000118000;
pub const XrResult_XR_ERROR_FEATURE_ALREADY_CREATED_PASSTHROUGH_FB: XrResult = -1000118001;
pub const XrResult_XR_ERROR_FEATURE_REQUIRED_PASSTHROUGH_FB: XrResult = -1000118002;
pub const XrResult_XR_ERROR_NOT_PERMITTED_PASSTHROUGH_FB: XrResult = -1000118003;
pub const XrResult_XR_ERROR_INSUFFICIENT_RESOURCES_PASSTHROUGH_FB: XrResult = -1000118004;
pub const XrResult_XR_ERROR_UNKNOWN_PASSTHROUGH_FB: XrResult = -1000118050;
pub const XrResult_XR_ERROR_RENDER_MODEL_KEY_INVALID_FB: XrResult = -1000119000;
pub const XrResult_XR_RENDER_MODEL_UNAVAILABLE_FB: XrResult = 1000119020;
pub const XrResult_XR_ERROR_MARKER_NOT_TRACKED_VARJO: XrResult = -1000124000;
pub const XrResult_XR_ERROR_MARKER_ID_INVALID_VARJO: XrResult = -1000124001;
pub const XrResult_XR_ERROR_MARKER_DETECTOR_PERMISSION_DENIED_ML: XrResult = -1000138000;
pub const XrResult_XR_ERROR_MARKER_DETECTOR_LOCATE_FAILED_ML: XrResult = -1000138001;
pub const XrResult_XR_ERROR_MARKER_DETECTOR_INVALID_DATA_QUERY_ML: XrResult = -1000138002;
pub const XrResult_XR_ERROR_MARKER_DETECTOR_INVALID_CREATE_INFO_ML: XrResult = -1000138003;
pub const XrResult_XR_ERROR_MARKER_INVALID_ML: XrResult = -1000138004;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_INCOMPATIBLE_ML: XrResult = -1000139000;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_UNAVAILABLE_ML: XrResult = -1000139001;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_FAIL_ML: XrResult = -1000139002;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_IMPORT_EXPORT_PERMISSION_DENIED_ML: XrResult =
    -1000139003;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_PERMISSION_DENIED_ML: XrResult = -1000139004;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_ALREADY_EXISTS_ML: XrResult = -1000139005;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_CANNOT_EXPORT_CLOUD_MAP_ML: XrResult = -1000139006;
pub const XrResult_XR_ERROR_SPATIAL_ANCHOR_NAME_NOT_FOUND_MSFT: XrResult = -1000142001;
pub const XrResult_XR_ERROR_SPATIAL_ANCHOR_NAME_INVALID_MSFT: XrResult = -1000142002;
pub const XrResult_XR_SCENE_MARKER_DATA_NOT_STRING_MSFT: XrResult = 1000147000;
pub const XrResult_XR_ERROR_SPACE_MAPPING_INSUFFICIENT_FB: XrResult = -1000169000;
pub const XrResult_XR_ERROR_SPACE_LOCALIZATION_FAILED_FB: XrResult = -1000169001;
pub const XrResult_XR_ERROR_SPACE_NETWORK_TIMEOUT_FB: XrResult = -1000169002;
pub const XrResult_XR_ERROR_SPACE_NETWORK_REQUEST_FAILED_FB: XrResult = -1000169003;
pub const XrResult_XR_ERROR_SPACE_CLOUD_STORAGE_DISABLED_FB: XrResult = -1000169004;
pub const XrResult_XR_ERROR_PASSTHROUGH_COLOR_LUT_BUFFER_SIZE_MISMATCH_META: XrResult = -1000266000;
pub const XrResult_XR_ENVIRONMENT_DEPTH_NOT_AVAILABLE_META: XrResult = 1000291000;
pub const XrResult_XR_ERROR_HINT_ALREADY_SET_QCOM: XrResult = -1000306000;
pub const XrResult_XR_ERROR_NOT_AN_ANCHOR_HTC: XrResult = -1000319000;
pub const XrResult_XR_ERROR_SPACE_NOT_LOCATABLE_EXT: XrResult = -1000429000;
pub const XrResult_XR_ERROR_PLANE_DETECTION_PERMISSION_DENIED_EXT: XrResult = -1000429001;
pub const XrResult_XR_ERROR_FUTURE_PENDING_EXT: XrResult = -1000469001;
pub const XrResult_XR_ERROR_FUTURE_INVALID_EXT: XrResult = -1000469002;
pub const XrResult_XR_ERROR_EXTENSION_DEPENDENCY_NOT_ENABLED_KHR: XrResult = -1000710001;
pub const XrResult_XR_ERROR_PERMISSION_INSUFFICIENT_KHR: XrResult = -1000710000;
pub const XrResult_XR_RESULT_MAX_ENUM: XrResult = 2147483647;
pub type XrResult = ::std::os::raw::c_int;
pub const XrStructureType_XR_TYPE_UNKNOWN: XrStructureType = 0;
pub const XrStructureType_XR_TYPE_API_LAYER_PROPERTIES: XrStructureType = 1;
pub const XrStructureType_XR_TYPE_EXTENSION_PROPERTIES: XrStructureType = 2;
pub const XrStructureType_XR_TYPE_INSTANCE_CREATE_INFO: XrStructureType = 3;
pub const XrStructureType_XR_TYPE_SYSTEM_GET_INFO: XrStructureType = 4;
pub const XrStructureType_XR_TYPE_SYSTEM_PROPERTIES: XrStructureType = 5;
pub const XrStructureType_XR_TYPE_VIEW_LOCATE_INFO: XrStructureType = 6;
pub const XrStructureType_XR_TYPE_VIEW: XrStructureType = 7;
pub const XrStructureType_XR_TYPE_SESSION_CREATE_INFO: XrStructureType = 8;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_CREATE_INFO: XrStructureType = 9;
pub const XrStructureType_XR_TYPE_SESSION_BEGIN_INFO: XrStructureType = 10;
pub const XrStructureType_XR_TYPE_VIEW_STATE: XrStructureType = 11;
pub const XrStructureType_XR_TYPE_FRAME_END_INFO: XrStructureType = 12;
pub const XrStructureType_XR_TYPE_HAPTIC_VIBRATION: XrStructureType = 13;
pub const XrStructureType_XR_TYPE_EVENT_DATA_BUFFER: XrStructureType = 16;
pub const XrStructureType_XR_TYPE_EVENT_DATA_INSTANCE_LOSS_PENDING: XrStructureType = 17;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SESSION_STATE_CHANGED: XrStructureType = 18;
pub const XrStructureType_XR_TYPE_ACTION_STATE_BOOLEAN: XrStructureType = 23;
pub const XrStructureType_XR_TYPE_ACTION_STATE_FLOAT: XrStructureType = 24;
pub const XrStructureType_XR_TYPE_ACTION_STATE_VECTOR2F: XrStructureType = 25;
pub const XrStructureType_XR_TYPE_ACTION_STATE_POSE: XrStructureType = 27;
pub const XrStructureType_XR_TYPE_ACTION_SET_CREATE_INFO: XrStructureType = 28;
pub const XrStructureType_XR_TYPE_ACTION_CREATE_INFO: XrStructureType = 29;
pub const XrStructureType_XR_TYPE_INSTANCE_PROPERTIES: XrStructureType = 32;
pub const XrStructureType_XR_TYPE_FRAME_WAIT_INFO: XrStructureType = 33;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_PROJECTION: XrStructureType = 35;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_QUAD: XrStructureType = 36;
pub const XrStructureType_XR_TYPE_REFERENCE_SPACE_CREATE_INFO: XrStructureType = 37;
pub const XrStructureType_XR_TYPE_ACTION_SPACE_CREATE_INFO: XrStructureType = 38;
pub const XrStructureType_XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING: XrStructureType = 40;
pub const XrStructureType_XR_TYPE_VIEW_CONFIGURATION_VIEW: XrStructureType = 41;
pub const XrStructureType_XR_TYPE_SPACE_LOCATION: XrStructureType = 42;
pub const XrStructureType_XR_TYPE_SPACE_VELOCITY: XrStructureType = 43;
pub const XrStructureType_XR_TYPE_FRAME_STATE: XrStructureType = 44;
pub const XrStructureType_XR_TYPE_VIEW_CONFIGURATION_PROPERTIES: XrStructureType = 45;
pub const XrStructureType_XR_TYPE_FRAME_BEGIN_INFO: XrStructureType = 46;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_PROJECTION_VIEW: XrStructureType = 48;
pub const XrStructureType_XR_TYPE_EVENT_DATA_EVENTS_LOST: XrStructureType = 49;
pub const XrStructureType_XR_TYPE_INTERACTION_PROFILE_SUGGESTED_BINDING: XrStructureType = 51;
pub const XrStructureType_XR_TYPE_EVENT_DATA_INTERACTION_PROFILE_CHANGED: XrStructureType = 52;
pub const XrStructureType_XR_TYPE_INTERACTION_PROFILE_STATE: XrStructureType = 53;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_ACQUIRE_INFO: XrStructureType = 55;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_WAIT_INFO: XrStructureType = 56;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_RELEASE_INFO: XrStructureType = 57;
pub const XrStructureType_XR_TYPE_ACTION_STATE_GET_INFO: XrStructureType = 58;
pub const XrStructureType_XR_TYPE_HAPTIC_ACTION_INFO: XrStructureType = 59;
pub const XrStructureType_XR_TYPE_SESSION_ACTION_SETS_ATTACH_INFO: XrStructureType = 60;
pub const XrStructureType_XR_TYPE_ACTIONS_SYNC_INFO: XrStructureType = 61;
pub const XrStructureType_XR_TYPE_BOUND_SOURCES_FOR_ACTION_ENUMERATE_INFO: XrStructureType = 62;
pub const XrStructureType_XR_TYPE_INPUT_SOURCE_LOCALIZED_NAME_GET_INFO: XrStructureType = 63;
pub const XrStructureType_XR_TYPE_SPACES_LOCATE_INFO: XrStructureType = 1000471000;
pub const XrStructureType_XR_TYPE_SPACE_LOCATIONS: XrStructureType = 1000471001;
pub const XrStructureType_XR_TYPE_SPACE_VELOCITIES: XrStructureType = 1000471002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_CUBE_KHR: XrStructureType = 1000006000;
pub const XrStructureType_XR_TYPE_INSTANCE_CREATE_INFO_ANDROID_KHR: XrStructureType = 1000008000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_DEPTH_INFO_KHR: XrStructureType = 1000010000;
pub const XrStructureType_XR_TYPE_VULKAN_SWAPCHAIN_FORMAT_LIST_CREATE_INFO_KHR: XrStructureType =
    1000014000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_PERF_SETTINGS_EXT: XrStructureType = 1000015000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_CYLINDER_KHR: XrStructureType = 1000017000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_EQUIRECT_KHR: XrStructureType = 1000018000;
pub const XrStructureType_XR_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: XrStructureType = 1000019000;
pub const XrStructureType_XR_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: XrStructureType =
    1000019001;
pub const XrStructureType_XR_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: XrStructureType =
    1000019002;
pub const XrStructureType_XR_TYPE_DEBUG_UTILS_LABEL_EXT: XrStructureType = 1000019003;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_WIN32_KHR: XrStructureType = 1000023000;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_XLIB_KHR: XrStructureType = 1000023001;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_XCB_KHR: XrStructureType = 1000023002;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_WAYLAND_KHR: XrStructureType = 1000023003;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_KHR: XrStructureType = 1000023004;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_KHR: XrStructureType = 1000023005;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_ES_ANDROID_KHR: XrStructureType =
    1000024001;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_ES_KHR: XrStructureType = 1000024002;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_ES_KHR: XrStructureType = 1000024003;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_VULKAN_KHR: XrStructureType = 1000025000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_VULKAN_KHR: XrStructureType = 1000025001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN_KHR: XrStructureType = 1000025002;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_D3D11_KHR: XrStructureType = 1000027000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_D3D11_KHR: XrStructureType = 1000027001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_D3D11_KHR: XrStructureType = 1000027002;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_D3D12_KHR: XrStructureType = 1000028000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_D3D12_KHR: XrStructureType = 1000028001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_D3D12_KHR: XrStructureType = 1000028002;
pub const XrStructureType_XR_TYPE_SYSTEM_EYE_GAZE_INTERACTION_PROPERTIES_EXT: XrStructureType =
    1000030000;
pub const XrStructureType_XR_TYPE_EYE_GAZE_SAMPLE_TIME_EXT: XrStructureType = 1000030001;
pub const XrStructureType_XR_TYPE_VISIBILITY_MASK_KHR: XrStructureType = 1000031000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VISIBILITY_MASK_CHANGED_KHR: XrStructureType =
    1000031001;
pub const XrStructureType_XR_TYPE_SESSION_CREATE_INFO_OVERLAY_EXTX: XrStructureType = 1000033000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_MAIN_SESSION_VISIBILITY_CHANGED_EXTX: XrStructureType =
    1000033003;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_COLOR_SCALE_BIAS_KHR: XrStructureType =
    1000034000;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_MSFT: XrStructureType = 1000039000;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_SPACE_CREATE_INFO_MSFT: XrStructureType =
    1000039001;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_IMAGE_LAYOUT_FB: XrStructureType = 1000040000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_ALPHA_BLEND_FB: XrStructureType = 1000041001;
pub const XrStructureType_XR_TYPE_VIEW_CONFIGURATION_DEPTH_RANGE_EXT: XrStructureType = 1000046000;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_EGL_MNDX: XrStructureType = 1000048004;
pub const XrStructureType_XR_TYPE_SPATIAL_GRAPH_NODE_SPACE_CREATE_INFO_MSFT: XrStructureType =
    1000049000;
pub const XrStructureType_XR_TYPE_SPATIAL_GRAPH_STATIC_NODE_BINDING_CREATE_INFO_MSFT:
    XrStructureType = 1000049001;
pub const XrStructureType_XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_GET_INFO_MSFT:
    XrStructureType = 1000049002;
pub const XrStructureType_XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_MSFT: XrStructureType =
    1000049003;
pub const XrStructureType_XR_TYPE_SYSTEM_HAND_TRACKING_PROPERTIES_EXT: XrStructureType = 1000051000;
pub const XrStructureType_XR_TYPE_HAND_TRACKER_CREATE_INFO_EXT: XrStructureType = 1000051001;
pub const XrStructureType_XR_TYPE_HAND_JOINTS_LOCATE_INFO_EXT: XrStructureType = 1000051002;
pub const XrStructureType_XR_TYPE_HAND_JOINT_LOCATIONS_EXT: XrStructureType = 1000051003;
pub const XrStructureType_XR_TYPE_HAND_JOINT_VELOCITIES_EXT: XrStructureType = 1000051004;
pub const XrStructureType_XR_TYPE_SYSTEM_HAND_TRACKING_MESH_PROPERTIES_MSFT: XrStructureType =
    1000052000;
pub const XrStructureType_XR_TYPE_HAND_MESH_SPACE_CREATE_INFO_MSFT: XrStructureType = 1000052001;
pub const XrStructureType_XR_TYPE_HAND_MESH_UPDATE_INFO_MSFT: XrStructureType = 1000052002;
pub const XrStructureType_XR_TYPE_HAND_MESH_MSFT: XrStructureType = 1000052003;
pub const XrStructureType_XR_TYPE_HAND_POSE_TYPE_INFO_MSFT: XrStructureType = 1000052004;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SESSION_BEGIN_INFO_MSFT:
    XrStructureType = 1000053000;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_STATE_MSFT: XrStructureType =
    1000053001;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_STATE_MSFT: XrStructureType =
    1000053002;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_END_INFO_MSFT:
    XrStructureType = 1000053003;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_LAYER_INFO_MSFT: XrStructureType =
    1000053004;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SWAPCHAIN_CREATE_INFO_MSFT:
    XrStructureType = 1000053005;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_KEY_STATE_MSFT: XrStructureType = 1000055000;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_NODE_PROPERTIES_MSFT: XrStructureType =
    1000055001;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_PROPERTIES_MSFT: XrStructureType = 1000055002;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_NODE_STATE_MSFT: XrStructureType = 1000055003;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_STATE_MSFT: XrStructureType = 1000055004;
pub const XrStructureType_XR_TYPE_VIEW_CONFIGURATION_VIEW_FOV_EPIC: XrStructureType = 1000059000;
pub const XrStructureType_XR_TYPE_HOLOGRAPHIC_WINDOW_ATTACHMENT_MSFT: XrStructureType = 1000063000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_REPROJECTION_INFO_MSFT: XrStructureType =
    1000066000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_REPROJECTION_PLANE_OVERRIDE_MSFT:
    XrStructureType = 1000066001;
pub const XrStructureType_XR_TYPE_ANDROID_SURFACE_SWAPCHAIN_CREATE_INFO_FB: XrStructureType =
    1000070000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_SECURE_CONTENT_FB: XrStructureType = 1000072000;
pub const XrStructureType_XR_TYPE_BODY_TRACKER_CREATE_INFO_FB: XrStructureType = 1000076001;
pub const XrStructureType_XR_TYPE_BODY_JOINTS_LOCATE_INFO_FB: XrStructureType = 1000076002;
pub const XrStructureType_XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_FB: XrStructureType = 1000076004;
pub const XrStructureType_XR_TYPE_BODY_JOINT_LOCATIONS_FB: XrStructureType = 1000076005;
pub const XrStructureType_XR_TYPE_BODY_SKELETON_FB: XrStructureType = 1000076006;
pub const XrStructureType_XR_TYPE_INTERACTION_PROFILE_DPAD_BINDING_EXT: XrStructureType =
    1000078000;
pub const XrStructureType_XR_TYPE_INTERACTION_PROFILE_ANALOG_THRESHOLD_VALVE: XrStructureType =
    1000079000;
pub const XrStructureType_XR_TYPE_HAND_JOINTS_MOTION_RANGE_INFO_EXT: XrStructureType = 1000080000;
pub const XrStructureType_XR_TYPE_LOADER_INIT_INFO_ANDROID_KHR: XrStructureType = 1000089000;
pub const XrStructureType_XR_TYPE_VULKAN_INSTANCE_CREATE_INFO_KHR: XrStructureType = 1000090000;
pub const XrStructureType_XR_TYPE_VULKAN_DEVICE_CREATE_INFO_KHR: XrStructureType = 1000090001;
pub const XrStructureType_XR_TYPE_VULKAN_GRAPHICS_DEVICE_GET_INFO_KHR: XrStructureType = 1000090003;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_EQUIRECT2_KHR: XrStructureType = 1000091000;
pub const XrStructureType_XR_TYPE_SCENE_OBSERVER_CREATE_INFO_MSFT: XrStructureType = 1000097000;
pub const XrStructureType_XR_TYPE_SCENE_CREATE_INFO_MSFT: XrStructureType = 1000097001;
pub const XrStructureType_XR_TYPE_NEW_SCENE_COMPUTE_INFO_MSFT: XrStructureType = 1000097002;
pub const XrStructureType_XR_TYPE_VISUAL_MESH_COMPUTE_LOD_INFO_MSFT: XrStructureType = 1000097003;
pub const XrStructureType_XR_TYPE_SCENE_COMPONENTS_MSFT: XrStructureType = 1000097004;
pub const XrStructureType_XR_TYPE_SCENE_COMPONENTS_GET_INFO_MSFT: XrStructureType = 1000097005;
pub const XrStructureType_XR_TYPE_SCENE_COMPONENT_LOCATIONS_MSFT: XrStructureType = 1000097006;
pub const XrStructureType_XR_TYPE_SCENE_COMPONENTS_LOCATE_INFO_MSFT: XrStructureType = 1000097007;
pub const XrStructureType_XR_TYPE_SCENE_OBJECTS_MSFT: XrStructureType = 1000097008;
pub const XrStructureType_XR_TYPE_SCENE_COMPONENT_PARENT_FILTER_INFO_MSFT: XrStructureType =
    1000097009;
pub const XrStructureType_XR_TYPE_SCENE_OBJECT_TYPES_FILTER_INFO_MSFT: XrStructureType = 1000097010;
pub const XrStructureType_XR_TYPE_SCENE_PLANES_MSFT: XrStructureType = 1000097011;
pub const XrStructureType_XR_TYPE_SCENE_PLANE_ALIGNMENT_FILTER_INFO_MSFT: XrStructureType =
    1000097012;
pub const XrStructureType_XR_TYPE_SCENE_MESHES_MSFT: XrStructureType = 1000097013;
pub const XrStructureType_XR_TYPE_SCENE_MESH_BUFFERS_GET_INFO_MSFT: XrStructureType = 1000097014;
pub const XrStructureType_XR_TYPE_SCENE_MESH_BUFFERS_MSFT: XrStructureType = 1000097015;
pub const XrStructureType_XR_TYPE_SCENE_MESH_VERTEX_BUFFER_MSFT: XrStructureType = 1000097016;
pub const XrStructureType_XR_TYPE_SCENE_MESH_INDICES_UINT32_MSFT: XrStructureType = 1000097017;
pub const XrStructureType_XR_TYPE_SCENE_MESH_INDICES_UINT16_MSFT: XrStructureType = 1000097018;
pub const XrStructureType_XR_TYPE_SERIALIZED_SCENE_FRAGMENT_DATA_GET_INFO_MSFT: XrStructureType =
    1000098000;
pub const XrStructureType_XR_TYPE_SCENE_DESERIALIZE_INFO_MSFT: XrStructureType = 1000098001;
pub const XrStructureType_XR_TYPE_EVENT_DATA_DISPLAY_REFRESH_RATE_CHANGED_FB: XrStructureType =
    1000101000;
pub const XrStructureType_XR_TYPE_VIVE_TRACKER_PATHS_HTCX: XrStructureType = 1000103000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VIVE_TRACKER_CONNECTED_HTCX: XrStructureType =
    1000103001;
pub const XrStructureType_XR_TYPE_SYSTEM_FACIAL_TRACKING_PROPERTIES_HTC: XrStructureType =
    1000104000;
pub const XrStructureType_XR_TYPE_FACIAL_TRACKER_CREATE_INFO_HTC: XrStructureType = 1000104001;
pub const XrStructureType_XR_TYPE_FACIAL_EXPRESSIONS_HTC: XrStructureType = 1000104002;
pub const XrStructureType_XR_TYPE_SYSTEM_COLOR_SPACE_PROPERTIES_FB: XrStructureType = 1000108000;
pub const XrStructureType_XR_TYPE_HAND_TRACKING_MESH_FB: XrStructureType = 1000110001;
pub const XrStructureType_XR_TYPE_HAND_TRACKING_SCALE_FB: XrStructureType = 1000110003;
pub const XrStructureType_XR_TYPE_HAND_TRACKING_AIM_STATE_FB: XrStructureType = 1000111001;
pub const XrStructureType_XR_TYPE_HAND_TRACKING_CAPSULES_STATE_FB: XrStructureType = 1000112000;
pub const XrStructureType_XR_TYPE_SYSTEM_SPATIAL_ENTITY_PROPERTIES_FB: XrStructureType = 1000113004;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_FB: XrStructureType = 1000113003;
pub const XrStructureType_XR_TYPE_SPACE_COMPONENT_STATUS_SET_INFO_FB: XrStructureType = 1000113007;
pub const XrStructureType_XR_TYPE_SPACE_COMPONENT_STATUS_FB: XrStructureType = 1000113001;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPATIAL_ANCHOR_CREATE_COMPLETE_FB: XrStructureType =
    1000113005;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_SET_STATUS_COMPLETE_FB: XrStructureType =
    1000113006;
pub const XrStructureType_XR_TYPE_FOVEATION_PROFILE_CREATE_INFO_FB: XrStructureType = 1000114000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_CREATE_INFO_FOVEATION_FB: XrStructureType = 1000114001;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_STATE_FOVEATION_FB: XrStructureType = 1000114002;
pub const XrStructureType_XR_TYPE_FOVEATION_LEVEL_PROFILE_CREATE_INFO_FB: XrStructureType =
    1000115000;
pub const XrStructureType_XR_TYPE_KEYBOARD_SPACE_CREATE_INFO_FB: XrStructureType = 1000116009;
pub const XrStructureType_XR_TYPE_KEYBOARD_TRACKING_QUERY_FB: XrStructureType = 1000116004;
pub const XrStructureType_XR_TYPE_SYSTEM_KEYBOARD_TRACKING_PROPERTIES_FB: XrStructureType =
    1000116002;
pub const XrStructureType_XR_TYPE_TRIANGLE_MESH_CREATE_INFO_FB: XrStructureType = 1000117001;
pub const XrStructureType_XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES_FB: XrStructureType = 1000118000;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_CREATE_INFO_FB: XrStructureType = 1000118001;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_LAYER_CREATE_INFO_FB: XrStructureType = 1000118002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_FB: XrStructureType = 1000118003;
pub const XrStructureType_XR_TYPE_GEOMETRY_INSTANCE_CREATE_INFO_FB: XrStructureType = 1000118004;
pub const XrStructureType_XR_TYPE_GEOMETRY_INSTANCE_TRANSFORM_FB: XrStructureType = 1000118005;
pub const XrStructureType_XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES2_FB: XrStructureType = 1000118006;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_STYLE_FB: XrStructureType = 1000118020;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_RGBA_FB: XrStructureType =
    1000118021;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_MONO_FB: XrStructureType =
    1000118022;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_BRIGHTNESS_CONTRAST_SATURATION_FB: XrStructureType =
    1000118023;
pub const XrStructureType_XR_TYPE_EVENT_DATA_PASSTHROUGH_STATE_CHANGED_FB: XrStructureType =
    1000118030;
pub const XrStructureType_XR_TYPE_RENDER_MODEL_PATH_INFO_FB: XrStructureType = 1000119000;
pub const XrStructureType_XR_TYPE_RENDER_MODEL_PROPERTIES_FB: XrStructureType = 1000119001;
pub const XrStructureType_XR_TYPE_RENDER_MODEL_BUFFER_FB: XrStructureType = 1000119002;
pub const XrStructureType_XR_TYPE_RENDER_MODEL_LOAD_INFO_FB: XrStructureType = 1000119003;
pub const XrStructureType_XR_TYPE_SYSTEM_RENDER_MODEL_PROPERTIES_FB: XrStructureType = 1000119004;
pub const XrStructureType_XR_TYPE_RENDER_MODEL_CAPABILITIES_REQUEST_FB: XrStructureType =
    1000119005;
pub const XrStructureType_XR_TYPE_BINDING_MODIFICATIONS_KHR: XrStructureType = 1000120000;
pub const XrStructureType_XR_TYPE_VIEW_LOCATE_FOVEATED_RENDERING_VARJO: XrStructureType =
    1000121000;
pub const XrStructureType_XR_TYPE_FOVEATED_VIEW_CONFIGURATION_VIEW_VARJO: XrStructureType =
    1000121001;
pub const XrStructureType_XR_TYPE_SYSTEM_FOVEATED_RENDERING_PROPERTIES_VARJO: XrStructureType =
    1000121002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_VARJO: XrStructureType = 1000122000;
pub const XrStructureType_XR_TYPE_SYSTEM_MARKER_TRACKING_PROPERTIES_VARJO: XrStructureType =
    1000124000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_MARKER_TRACKING_UPDATE_VARJO: XrStructureType =
    1000124001;
pub const XrStructureType_XR_TYPE_MARKER_SPACE_CREATE_INFO_VARJO: XrStructureType = 1000124002;
pub const XrStructureType_XR_TYPE_FRAME_END_INFO_ML: XrStructureType = 1000135000;
pub const XrStructureType_XR_TYPE_GLOBAL_DIMMER_FRAME_END_INFO_ML: XrStructureType = 1000136000;
pub const XrStructureType_XR_TYPE_COORDINATE_SPACE_CREATE_INFO_ML: XrStructureType = 1000137000;
pub const XrStructureType_XR_TYPE_SYSTEM_MARKER_UNDERSTANDING_PROPERTIES_ML: XrStructureType =
    1000138000;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_CREATE_INFO_ML: XrStructureType = 1000138001;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_ARUCO_INFO_ML: XrStructureType = 1000138002;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_SIZE_INFO_ML: XrStructureType = 1000138003;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_APRIL_TAG_INFO_ML: XrStructureType = 1000138004;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_CUSTOM_PROFILE_INFO_ML: XrStructureType =
    1000138005;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_SNAPSHOT_INFO_ML: XrStructureType = 1000138006;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_STATE_ML: XrStructureType = 1000138007;
pub const XrStructureType_XR_TYPE_MARKER_SPACE_CREATE_INFO_ML: XrStructureType = 1000138008;
pub const XrStructureType_XR_TYPE_LOCALIZATION_MAP_ML: XrStructureType = 1000139000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_LOCALIZATION_CHANGED_ML: XrStructureType = 1000139001;
pub const XrStructureType_XR_TYPE_MAP_LOCALIZATION_REQUEST_INFO_ML: XrStructureType = 1000139002;
pub const XrStructureType_XR_TYPE_LOCALIZATION_MAP_IMPORT_INFO_ML: XrStructureType = 1000139003;
pub const XrStructureType_XR_TYPE_LOCALIZATION_ENABLE_EVENTS_INFO_ML: XrStructureType = 1000139004;
pub const XrStructureType_XR_TYPE_EVENT_DATA_HEADSET_FIT_CHANGED_ML: XrStructureType = 1000472000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_EYE_CALIBRATION_CHANGED_ML: XrStructureType =
    1000472001;
pub const XrStructureType_XR_TYPE_USER_CALIBRATION_ENABLE_EVENTS_INFO_ML: XrStructureType =
    1000472002;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_PERSISTENCE_INFO_MSFT: XrStructureType =
    1000142000;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_FROM_PERSISTED_ANCHOR_CREATE_INFO_MSFT:
    XrStructureType = 1000142001;
pub const XrStructureType_XR_TYPE_SCENE_MARKERS_MSFT: XrStructureType = 1000147000;
pub const XrStructureType_XR_TYPE_SCENE_MARKER_TYPE_FILTER_MSFT: XrStructureType = 1000147001;
pub const XrStructureType_XR_TYPE_SCENE_MARKER_QR_CODES_MSFT: XrStructureType = 1000147002;
pub const XrStructureType_XR_TYPE_SPACE_QUERY_INFO_FB: XrStructureType = 1000156001;
pub const XrStructureType_XR_TYPE_SPACE_QUERY_RESULTS_FB: XrStructureType = 1000156002;
pub const XrStructureType_XR_TYPE_SPACE_STORAGE_LOCATION_FILTER_INFO_FB: XrStructureType =
    1000156003;
pub const XrStructureType_XR_TYPE_SPACE_UUID_FILTER_INFO_FB: XrStructureType = 1000156054;
pub const XrStructureType_XR_TYPE_SPACE_COMPONENT_FILTER_INFO_FB: XrStructureType = 1000156052;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_QUERY_RESULTS_AVAILABLE_FB: XrStructureType =
    1000156103;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_QUERY_COMPLETE_FB: XrStructureType = 1000156104;
pub const XrStructureType_XR_TYPE_SPACE_SAVE_INFO_FB: XrStructureType = 1000158000;
pub const XrStructureType_XR_TYPE_SPACE_ERASE_INFO_FB: XrStructureType = 1000158001;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_SAVE_COMPLETE_FB: XrStructureType = 1000158106;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_ERASE_COMPLETE_FB: XrStructureType = 1000158107;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_FOVEATION_VULKAN_FB: XrStructureType = 1000160000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_STATE_ANDROID_SURFACE_DIMENSIONS_FB: XrStructureType =
    1000161000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_STATE_SAMPLER_OPENGL_ES_FB: XrStructureType =
    1000162000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_STATE_SAMPLER_VULKAN_FB: XrStructureType = 1000163000;
pub const XrStructureType_XR_TYPE_SPACE_SHARE_INFO_FB: XrStructureType = 1000169001;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_SHARE_COMPLETE_FB: XrStructureType = 1000169002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_SPACE_WARP_INFO_FB: XrStructureType =
    1000171000;
pub const XrStructureType_XR_TYPE_SYSTEM_SPACE_WARP_PROPERTIES_FB: XrStructureType = 1000171001;
pub const XrStructureType_XR_TYPE_HAPTIC_AMPLITUDE_ENVELOPE_VIBRATION_FB: XrStructureType =
    1000173001;
pub const XrStructureType_XR_TYPE_SEMANTIC_LABELS_FB: XrStructureType = 1000175000;
pub const XrStructureType_XR_TYPE_ROOM_LAYOUT_FB: XrStructureType = 1000175001;
pub const XrStructureType_XR_TYPE_BOUNDARY_2D_FB: XrStructureType = 1000175002;
pub const XrStructureType_XR_TYPE_SEMANTIC_LABELS_SUPPORT_INFO_FB: XrStructureType = 1000175010;
pub const XrStructureType_XR_TYPE_DIGITAL_LENS_CONTROL_ALMALENCE: XrStructureType = 1000196000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SCENE_CAPTURE_COMPLETE_FB: XrStructureType =
    1000198001;
pub const XrStructureType_XR_TYPE_SCENE_CAPTURE_REQUEST_INFO_FB: XrStructureType = 1000198050;
pub const XrStructureType_XR_TYPE_SPACE_CONTAINER_FB: XrStructureType = 1000199000;
pub const XrStructureType_XR_TYPE_FOVEATION_EYE_TRACKED_PROFILE_CREATE_INFO_META: XrStructureType =
    1000200000;
pub const XrStructureType_XR_TYPE_FOVEATION_EYE_TRACKED_STATE_META: XrStructureType = 1000200001;
pub const XrStructureType_XR_TYPE_SYSTEM_FOVEATION_EYE_TRACKED_PROPERTIES_META: XrStructureType =
    1000200002;
pub const XrStructureType_XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES_FB: XrStructureType = 1000201004;
pub const XrStructureType_XR_TYPE_FACE_TRACKER_CREATE_INFO_FB: XrStructureType = 1000201005;
pub const XrStructureType_XR_TYPE_FACE_EXPRESSION_INFO_FB: XrStructureType = 1000201002;
pub const XrStructureType_XR_TYPE_FACE_EXPRESSION_WEIGHTS_FB: XrStructureType = 1000201006;
pub const XrStructureType_XR_TYPE_EYE_TRACKER_CREATE_INFO_FB: XrStructureType = 1000202001;
pub const XrStructureType_XR_TYPE_EYE_GAZES_INFO_FB: XrStructureType = 1000202002;
pub const XrStructureType_XR_TYPE_EYE_GAZES_FB: XrStructureType = 1000202003;
pub const XrStructureType_XR_TYPE_SYSTEM_EYE_TRACKING_PROPERTIES_FB: XrStructureType = 1000202004;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_KEYBOARD_HANDS_INTENSITY_FB: XrStructureType =
    1000203002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_SETTINGS_FB: XrStructureType = 1000204000;
pub const XrStructureType_XR_TYPE_HAPTIC_PCM_VIBRATION_FB: XrStructureType = 1000209001;
pub const XrStructureType_XR_TYPE_DEVICE_PCM_SAMPLE_RATE_STATE_FB: XrStructureType = 1000209002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_FB: XrStructureType = 1000212000;
pub const XrStructureType_XR_TYPE_LOCAL_DIMMING_FRAME_END_INFO_META: XrStructureType = 1000216000;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_PREFERENCES_META: XrStructureType = 1000217000;
pub const XrStructureType_XR_TYPE_SYSTEM_VIRTUAL_KEYBOARD_PROPERTIES_META: XrStructureType =
    1000219001;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_CREATE_INFO_META: XrStructureType = 1000219002;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_SPACE_CREATE_INFO_META: XrStructureType =
    1000219003;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_LOCATION_INFO_META: XrStructureType = 1000219004;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_MODEL_VISIBILITY_SET_INFO_META: XrStructureType =
    1000219005;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_ANIMATION_STATE_META: XrStructureType =
    1000219006;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_MODEL_ANIMATION_STATES_META: XrStructureType =
    1000219007;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_TEXTURE_DATA_META: XrStructureType = 1000219009;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_INPUT_INFO_META: XrStructureType = 1000219010;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_TEXT_CONTEXT_CHANGE_INFO_META: XrStructureType =
    1000219011;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_COMMIT_TEXT_META: XrStructureType =
    1000219014;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_BACKSPACE_META: XrStructureType =
    1000219015;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_ENTER_META: XrStructureType =
    1000219016;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_SHOWN_META: XrStructureType =
    1000219017;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_HIDDEN_META: XrStructureType =
    1000219018;
pub const XrStructureType_XR_TYPE_EXTERNAL_CAMERA_OCULUS: XrStructureType = 1000226000;
pub const XrStructureType_XR_TYPE_VULKAN_SWAPCHAIN_CREATE_INFO_META: XrStructureType = 1000227000;
pub const XrStructureType_XR_TYPE_PERFORMANCE_METRICS_STATE_META: XrStructureType = 1000232001;
pub const XrStructureType_XR_TYPE_PERFORMANCE_METRICS_COUNTER_META: XrStructureType = 1000232002;
pub const XrStructureType_XR_TYPE_SPACE_LIST_SAVE_INFO_FB: XrStructureType = 1000238000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_LIST_SAVE_COMPLETE_FB: XrStructureType =
    1000238001;
pub const XrStructureType_XR_TYPE_SPACE_USER_CREATE_INFO_FB: XrStructureType = 1000241001;
pub const XrStructureType_XR_TYPE_SYSTEM_HEADSET_ID_PROPERTIES_META: XrStructureType = 1000245000;
pub const XrStructureType_XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_META: XrStructureType = 1000254000;
pub const XrStructureType_XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_GET_INFO_META: XrStructureType =
    1000254001;
pub const XrStructureType_XR_TYPE_SYSTEM_PASSTHROUGH_COLOR_LUT_PROPERTIES_META: XrStructureType =
    1000266000;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_LUT_CREATE_INFO_META: XrStructureType =
    1000266001;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_LUT_UPDATE_INFO_META: XrStructureType =
    1000266002;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_MAP_LUT_META: XrStructureType = 1000266100;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_MAP_INTERPOLATED_LUT_META: XrStructureType =
    1000266101;
pub const XrStructureType_XR_TYPE_SPACE_TRIANGLE_MESH_GET_INFO_META: XrStructureType = 1000269001;
pub const XrStructureType_XR_TYPE_SPACE_TRIANGLE_MESH_META: XrStructureType = 1000269002;
pub const XrStructureType_XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES2_FB: XrStructureType = 1000287013;
pub const XrStructureType_XR_TYPE_FACE_TRACKER_CREATE_INFO2_FB: XrStructureType = 1000287014;
pub const XrStructureType_XR_TYPE_FACE_EXPRESSION_INFO2_FB: XrStructureType = 1000287015;
pub const XrStructureType_XR_TYPE_FACE_EXPRESSION_WEIGHTS2_FB: XrStructureType = 1000287016;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_PROVIDER_CREATE_INFO_META: XrStructureType =
    1000291000;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_CREATE_INFO_META: XrStructureType =
    1000291001;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_STATE_META: XrStructureType =
    1000291002;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_ACQUIRE_INFO_META: XrStructureType =
    1000291003;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_VIEW_META: XrStructureType = 1000291004;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_META: XrStructureType = 1000291005;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_HAND_REMOVAL_SET_INFO_META: XrStructureType =
    1000291006;
pub const XrStructureType_XR_TYPE_SYSTEM_ENVIRONMENT_DEPTH_PROPERTIES_META: XrStructureType =
    1000291007;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_CREATE_INFO_HTC: XrStructureType = 1000317001;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_HTC: XrStructureType = 1000317002;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_MESH_TRANSFORM_INFO_HTC: XrStructureType = 1000317003;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_HTC: XrStructureType = 1000317004;
pub const XrStructureType_XR_TYPE_FOVEATION_APPLY_INFO_HTC: XrStructureType = 1000318000;
pub const XrStructureType_XR_TYPE_FOVEATION_DYNAMIC_MODE_INFO_HTC: XrStructureType = 1000318001;
pub const XrStructureType_XR_TYPE_FOVEATION_CUSTOM_MODE_INFO_HTC: XrStructureType = 1000318002;
pub const XrStructureType_XR_TYPE_SYSTEM_ANCHOR_PROPERTIES_HTC: XrStructureType = 1000319000;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_HTC: XrStructureType = 1000319001;
pub const XrStructureType_XR_TYPE_ACTIVE_ACTION_SET_PRIORITIES_EXT: XrStructureType = 1000373000;
pub const XrStructureType_XR_TYPE_SYSTEM_FORCE_FEEDBACK_CURL_PROPERTIES_MNDX: XrStructureType =
    1000375000;
pub const XrStructureType_XR_TYPE_FORCE_FEEDBACK_CURL_APPLY_LOCATIONS_MNDX: XrStructureType =
    1000375001;
pub const XrStructureType_XR_TYPE_HAND_TRACKING_DATA_SOURCE_INFO_EXT: XrStructureType = 1000428000;
pub const XrStructureType_XR_TYPE_HAND_TRACKING_DATA_SOURCE_STATE_EXT: XrStructureType = 1000428001;
pub const XrStructureType_XR_TYPE_PLANE_DETECTOR_CREATE_INFO_EXT: XrStructureType = 1000429001;
pub const XrStructureType_XR_TYPE_PLANE_DETECTOR_BEGIN_INFO_EXT: XrStructureType = 1000429002;
pub const XrStructureType_XR_TYPE_PLANE_DETECTOR_GET_INFO_EXT: XrStructureType = 1000429003;
pub const XrStructureType_XR_TYPE_PLANE_DETECTOR_LOCATIONS_EXT: XrStructureType = 1000429004;
pub const XrStructureType_XR_TYPE_PLANE_DETECTOR_LOCATION_EXT: XrStructureType = 1000429005;
pub const XrStructureType_XR_TYPE_PLANE_DETECTOR_POLYGON_BUFFER_EXT: XrStructureType = 1000429006;
pub const XrStructureType_XR_TYPE_SYSTEM_PLANE_DETECTION_PROPERTIES_EXT: XrStructureType =
    1000429007;
pub const XrStructureType_XR_TYPE_FUTURE_CANCEL_INFO_EXT: XrStructureType = 1000469000;
pub const XrStructureType_XR_TYPE_FUTURE_POLL_INFO_EXT: XrStructureType = 1000469001;
pub const XrStructureType_XR_TYPE_FUTURE_COMPLETION_EXT: XrStructureType = 1000469002;
pub const XrStructureType_XR_TYPE_FUTURE_POLL_RESULT_EXT: XrStructureType = 1000469003;
pub const XrStructureType_XR_TYPE_EVENT_DATA_USER_PRESENCE_CHANGED_EXT: XrStructureType =
    1000470000;
pub const XrStructureType_XR_TYPE_SYSTEM_USER_PRESENCE_PROPERTIES_EXT: XrStructureType = 1000470001;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_VULKAN2_KHR: XrStructureType = 1000025000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_VULKAN2_KHR: XrStructureType = 1000025001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN2_KHR: XrStructureType = 1000025002;
pub const XrStructureType_XR_TYPE_DEVICE_PCM_SAMPLE_RATE_GET_INFO_FB: XrStructureType = 1000209002;
pub const XrStructureType_XR_TYPE_SPACES_LOCATE_INFO_KHR: XrStructureType = 1000471000;
pub const XrStructureType_XR_TYPE_SPACE_LOCATIONS_KHR: XrStructureType = 1000471001;
pub const XrStructureType_XR_TYPE_SPACE_VELOCITIES_KHR: XrStructureType = 1000471002;
pub const XrStructureType_XR_STRUCTURE_TYPE_MAX_ENUM: XrStructureType = 2147483647;
pub type XrStructureType = ::std::os::raw::c_int;
pub const XrFormFactor_XR_FORM_FACTOR_HEAD_MOUNTED_DISPLAY: XrFormFactor = 1;
pub const XrFormFactor_XR_FORM_FACTOR_HANDHELD_DISPLAY: XrFormFactor = 2;
pub const XrFormFactor_XR_FORM_FACTOR_MAX_ENUM: XrFormFactor = 2147483647;
pub type XrFormFactor = ::std::os::raw::c_int;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_PRIMARY_MONO: XrViewConfigurationType =
    1;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO:
    XrViewConfigurationType = 2;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO_WITH_FOVEATED_INSET:
    XrViewConfigurationType = 1000037000;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_SECONDARY_MONO_FIRST_PERSON_OBSERVER_MSFT : XrViewConfigurationType = 1000054000 ;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_PRIMARY_QUAD_VARJO:
    XrViewConfigurationType = 1000037000;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_MAX_ENUM: XrViewConfigurationType =
    2147483647;
pub type XrViewConfigurationType = ::std::os::raw::c_int;
pub const XrEnvironmentBlendMode_XR_ENVIRONMENT_BLEND_MODE_OPAQUE: XrEnvironmentBlendMode = 1;
pub const XrEnvironmentBlendMode_XR_ENVIRONMENT_BLEND_MODE_ADDITIVE: XrEnvironmentBlendMode = 2;
pub const XrEnvironmentBlendMode_XR_ENVIRONMENT_BLEND_MODE_ALPHA_BLEND: XrEnvironmentBlendMode = 3;
pub const XrEnvironmentBlendMode_XR_ENVIRONMENT_BLEND_MODE_MAX_ENUM: XrEnvironmentBlendMode =
    2147483647;
pub type XrEnvironmentBlendMode = ::std::os::raw::c_int;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_VIEW: XrReferenceSpaceType = 1;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_LOCAL: XrReferenceSpaceType = 2;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_STAGE: XrReferenceSpaceType = 3;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_LOCAL_FLOOR: XrReferenceSpaceType =
    1000426000;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_UNBOUNDED_MSFT: XrReferenceSpaceType =
    1000038000;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_COMBINED_EYE_VARJO: XrReferenceSpaceType =
    1000121000;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_LOCALIZATION_MAP_ML: XrReferenceSpaceType =
    1000139000;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_LOCAL_FLOOR_EXT: XrReferenceSpaceType =
    1000426000;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_MAX_ENUM: XrReferenceSpaceType = 2147483647;
pub type XrReferenceSpaceType = ::std::os::raw::c_int;
pub const XrActionType_XR_ACTION_TYPE_BOOLEAN_INPUT: XrActionType = 1;
pub const XrActionType_XR_ACTION_TYPE_FLOAT_INPUT: XrActionType = 2;
pub const XrActionType_XR_ACTION_TYPE_VECTOR2F_INPUT: XrActionType = 3;
pub const XrActionType_XR_ACTION_TYPE_POSE_INPUT: XrActionType = 4;
pub const XrActionType_XR_ACTION_TYPE_VIBRATION_OUTPUT: XrActionType = 100;
pub const XrActionType_XR_ACTION_TYPE_MAX_ENUM: XrActionType = 2147483647;
pub type XrActionType = ::std::os::raw::c_int;
pub const XrEyeVisibility_XR_EYE_VISIBILITY_BOTH: XrEyeVisibility = 0;
pub const XrEyeVisibility_XR_EYE_VISIBILITY_LEFT: XrEyeVisibility = 1;
pub const XrEyeVisibility_XR_EYE_VISIBILITY_RIGHT: XrEyeVisibility = 2;
pub const XrEyeVisibility_XR_EYE_VISIBILITY_MAX_ENUM: XrEyeVisibility = 2147483647;
pub type XrEyeVisibility = ::std::os::raw::c_int;
pub const XrSessionState_XR_SESSION_STATE_UNKNOWN: XrSessionState = 0;
pub const XrSessionState_XR_SESSION_STATE_IDLE: XrSessionState = 1;
pub const XrSessionState_XR_SESSION_STATE_READY: XrSessionState = 2;
pub const XrSessionState_XR_SESSION_STATE_SYNCHRONIZED: XrSessionState = 3;
pub const XrSessionState_XR_SESSION_STATE_VISIBLE: XrSessionState = 4;
pub const XrSessionState_XR_SESSION_STATE_FOCUSED: XrSessionState = 5;
pub const XrSessionState_XR_SESSION_STATE_STOPPING: XrSessionState = 6;
pub const XrSessionState_XR_SESSION_STATE_LOSS_PENDING: XrSessionState = 7;
pub const XrSessionState_XR_SESSION_STATE_EXITING: XrSessionState = 8;
pub const XrSessionState_XR_SESSION_STATE_MAX_ENUM: XrSessionState = 2147483647;
pub type XrSessionState = ::std::os::raw::c_int;
pub const XrObjectType_XR_OBJECT_TYPE_UNKNOWN: XrObjectType = 0;
pub const XrObjectType_XR_OBJECT_TYPE_INSTANCE: XrObjectType = 1;
pub const XrObjectType_XR_OBJECT_TYPE_SESSION: XrObjectType = 2;
pub const XrObjectType_XR_OBJECT_TYPE_SWAPCHAIN: XrObjectType = 3;
pub const XrObjectType_XR_OBJECT_TYPE_SPACE: XrObjectType = 4;
pub const XrObjectType_XR_OBJECT_TYPE_ACTION_SET: XrObjectType = 5;
pub const XrObjectType_XR_OBJECT_TYPE_ACTION: XrObjectType = 6;
pub const XrObjectType_XR_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: XrObjectType = 1000019000;
pub const XrObjectType_XR_OBJECT_TYPE_SPATIAL_ANCHOR_MSFT: XrObjectType = 1000039000;
pub const XrObjectType_XR_OBJECT_TYPE_SPATIAL_GRAPH_NODE_BINDING_MSFT: XrObjectType = 1000049000;
pub const XrObjectType_XR_OBJECT_TYPE_HAND_TRACKER_EXT: XrObjectType = 1000051000;
pub const XrObjectType_XR_OBJECT_TYPE_BODY_TRACKER_FB: XrObjectType = 1000076000;
pub const XrObjectType_XR_OBJECT_TYPE_SCENE_OBSERVER_MSFT: XrObjectType = 1000097000;
pub const XrObjectType_XR_OBJECT_TYPE_SCENE_MSFT: XrObjectType = 1000097001;
pub const XrObjectType_XR_OBJECT_TYPE_FACIAL_TRACKER_HTC: XrObjectType = 1000104000;
pub const XrObjectType_XR_OBJECT_TYPE_FOVEATION_PROFILE_FB: XrObjectType = 1000114000;
pub const XrObjectType_XR_OBJECT_TYPE_TRIANGLE_MESH_FB: XrObjectType = 1000117000;
pub const XrObjectType_XR_OBJECT_TYPE_PASSTHROUGH_FB: XrObjectType = 1000118000;
pub const XrObjectType_XR_OBJECT_TYPE_PASSTHROUGH_LAYER_FB: XrObjectType = 1000118002;
pub const XrObjectType_XR_OBJECT_TYPE_GEOMETRY_INSTANCE_FB: XrObjectType = 1000118004;
pub const XrObjectType_XR_OBJECT_TYPE_MARKER_DETECTOR_ML: XrObjectType = 1000138000;
pub const XrObjectType_XR_OBJECT_TYPE_EXPORTED_LOCALIZATION_MAP_ML: XrObjectType = 1000139000;
pub const XrObjectType_XR_OBJECT_TYPE_SPATIAL_ANCHOR_STORE_CONNECTION_MSFT: XrObjectType =
    1000142000;
pub const XrObjectType_XR_OBJECT_TYPE_FACE_TRACKER_FB: XrObjectType = 1000201000;
pub const XrObjectType_XR_OBJECT_TYPE_EYE_TRACKER_FB: XrObjectType = 1000202000;
pub const XrObjectType_XR_OBJECT_TYPE_VIRTUAL_KEYBOARD_META: XrObjectType = 1000219000;
pub const XrObjectType_XR_OBJECT_TYPE_SPACE_USER_FB: XrObjectType = 1000241000;
pub const XrObjectType_XR_OBJECT_TYPE_PASSTHROUGH_COLOR_LUT_META: XrObjectType = 1000266000;
pub const XrObjectType_XR_OBJECT_TYPE_FACE_TRACKER2_FB: XrObjectType = 1000287012;
pub const XrObjectType_XR_OBJECT_TYPE_ENVIRONMENT_DEPTH_PROVIDER_META: XrObjectType = 1000291000;
pub const XrObjectType_XR_OBJECT_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_META: XrObjectType = 1000291001;
pub const XrObjectType_XR_OBJECT_TYPE_PASSTHROUGH_HTC: XrObjectType = 1000317000;
pub const XrObjectType_XR_OBJECT_TYPE_PLANE_DETECTOR_EXT: XrObjectType = 1000429000;
pub const XrObjectType_XR_OBJECT_TYPE_MAX_ENUM: XrObjectType = 2147483647;
pub type XrObjectType = ::std::os::raw::c_int;
pub type XrInstanceCreateFlags = XrFlags64;
pub type XrSessionCreateFlags = XrFlags64;
pub type XrSpaceVelocityFlags = XrFlags64;
pub const XR_SPACE_VELOCITY_LINEAR_VALID_BIT: XrSpaceVelocityFlags = 1;
pub const XR_SPACE_VELOCITY_ANGULAR_VALID_BIT: XrSpaceVelocityFlags = 2;
pub type XrSpaceLocationFlags = XrFlags64;
pub const XR_SPACE_LOCATION_ORIENTATION_VALID_BIT: XrSpaceLocationFlags = 1;
pub const XR_SPACE_LOCATION_POSITION_VALID_BIT: XrSpaceLocationFlags = 2;
pub const XR_SPACE_LOCATION_ORIENTATION_TRACKED_BIT: XrSpaceLocationFlags = 4;
pub const XR_SPACE_LOCATION_POSITION_TRACKED_BIT: XrSpaceLocationFlags = 8;
pub type XrSwapchainCreateFlags = XrFlags64;
pub const XR_SWAPCHAIN_CREATE_PROTECTED_CONTENT_BIT: XrSwapchainCreateFlags = 1;
pub const XR_SWAPCHAIN_CREATE_STATIC_IMAGE_BIT: XrSwapchainCreateFlags = 2;
pub type XrSwapchainUsageFlags = XrFlags64;
pub const XR_SWAPCHAIN_USAGE_COLOR_ATTACHMENT_BIT: XrSwapchainUsageFlags = 1;
pub const XR_SWAPCHAIN_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: XrSwapchainUsageFlags = 2;
pub const XR_SWAPCHAIN_USAGE_UNORDERED_ACCESS_BIT: XrSwapchainUsageFlags = 4;
pub const XR_SWAPCHAIN_USAGE_TRANSFER_SRC_BIT: XrSwapchainUsageFlags = 8;
pub const XR_SWAPCHAIN_USAGE_TRANSFER_DST_BIT: XrSwapchainUsageFlags = 16;
pub const XR_SWAPCHAIN_USAGE_SAMPLED_BIT: XrSwapchainUsageFlags = 32;
pub const XR_SWAPCHAIN_USAGE_MUTABLE_FORMAT_BIT: XrSwapchainUsageFlags = 64;
pub const XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_MND: XrSwapchainUsageFlags = 128;
pub const XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_KHR: XrSwapchainUsageFlags = 128;
pub type XrCompositionLayerFlags = XrFlags64;
pub const XR_COMPOSITION_LAYER_CORRECT_CHROMATIC_ABERRATION_BIT: XrCompositionLayerFlags = 1;
pub const XR_COMPOSITION_LAYER_BLEND_TEXTURE_SOURCE_ALPHA_BIT: XrCompositionLayerFlags = 2;
pub const XR_COMPOSITION_LAYER_UNPREMULTIPLIED_ALPHA_BIT: XrCompositionLayerFlags = 4;
pub type XrViewStateFlags = XrFlags64;
pub const XR_VIEW_STATE_ORIENTATION_VALID_BIT: XrViewStateFlags = 1;
pub const XR_VIEW_STATE_POSITION_VALID_BIT: XrViewStateFlags = 2;
pub const XR_VIEW_STATE_ORIENTATION_TRACKED_BIT: XrViewStateFlags = 4;
pub const XR_VIEW_STATE_POSITION_TRACKED_BIT: XrViewStateFlags = 8;
pub type XrInputSourceLocalizedNameFlags = XrFlags64;
pub const XR_INPUT_SOURCE_LOCALIZED_NAME_USER_PATH_BIT: XrInputSourceLocalizedNameFlags = 1;
pub const XR_INPUT_SOURCE_LOCALIZED_NAME_INTERACTION_PROFILE_BIT: XrInputSourceLocalizedNameFlags =
    2;
pub const XR_INPUT_SOURCE_LOCALIZED_NAME_COMPONENT_BIT: XrInputSourceLocalizedNameFlags = 4;
pub type PFN_xrVoidFunction = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrApiLayerProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub layerName: [::std::os::raw::c_char; 256usize],
    pub specVersion: XrVersion,
    pub layerVersion: u32,
    pub description: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_XrApiLayerProperties() {
    const UNINIT: ::std::mem::MaybeUninit<XrApiLayerProperties> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrApiLayerProperties>(),
        544usize,
        concat!("Size of: ", stringify!(XrApiLayerProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrApiLayerProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(XrApiLayerProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerProperties),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerProperties),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerProperties),
            "::",
            stringify!(layerName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specVersion) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerProperties),
            "::",
            stringify!(specVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerVersion) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerProperties),
            "::",
            stringify!(layerVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerProperties),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExtensionProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub extensionName: [::std::os::raw::c_char; 128usize],
    pub extensionVersion: u32,
}
#[test]
fn bindgen_test_layout_XrExtensionProperties() {
    const UNINIT: ::std::mem::MaybeUninit<XrExtensionProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrExtensionProperties>(),
        152usize,
        concat!("Size of: ", stringify!(XrExtensionProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrExtensionProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(XrExtensionProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtensionProperties),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtensionProperties),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensionName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtensionProperties),
            "::",
            stringify!(extensionName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensionVersion) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtensionProperties),
            "::",
            stringify!(extensionVersion)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrApplicationInfo {
    pub applicationName: [::std::os::raw::c_char; 128usize],
    pub applicationVersion: u32,
    pub engineName: [::std::os::raw::c_char; 128usize],
    pub engineVersion: u32,
    pub apiVersion: XrVersion,
}
#[test]
fn bindgen_test_layout_XrApplicationInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrApplicationInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrApplicationInfo>(),
        272usize,
        concat!("Size of: ", stringify!(XrApplicationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrApplicationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrApplicationInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).applicationName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApplicationInfo),
            "::",
            stringify!(applicationName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).applicationVersion) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApplicationInfo),
            "::",
            stringify!(applicationVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engineName) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApplicationInfo),
            "::",
            stringify!(engineName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engineVersion) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApplicationInfo),
            "::",
            stringify!(engineVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apiVersion) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApplicationInfo),
            "::",
            stringify!(apiVersion)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInstanceCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrInstanceCreateFlags,
    pub applicationInfo: XrApplicationInfo,
    pub enabledApiLayerCount: u32,
    pub enabledApiLayerNames: *const *const ::std::os::raw::c_char,
    pub enabledExtensionCount: u32,
    pub enabledExtensionNames: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XrInstanceCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrInstanceCreateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrInstanceCreateInfo>(),
        328usize,
        concat!("Size of: ", stringify!(XrInstanceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrInstanceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrInstanceCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(createFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).applicationInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(applicationInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabledApiLayerCount) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(enabledApiLayerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabledApiLayerNames) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(enabledApiLayerNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabledExtensionCount) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(enabledExtensionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabledExtensionNames) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(enabledExtensionNames)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInstanceProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub runtimeVersion: XrVersion,
    pub runtimeName: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_XrInstanceProperties() {
    const UNINIT: ::std::mem::MaybeUninit<XrInstanceProperties> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrInstanceProperties>(),
        152usize,
        concat!("Size of: ", stringify!(XrInstanceProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrInstanceProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(XrInstanceProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceProperties),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceProperties),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runtimeVersion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceProperties),
            "::",
            stringify!(runtimeVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runtimeName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceProperties),
            "::",
            stringify!(runtimeName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataBuffer {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub varying: [u8; 4000usize],
}
#[test]
fn bindgen_test_layout_XrEventDataBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataBuffer>(),
        4016usize,
        concat!("Size of: ", stringify!(XrEventDataBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataBuffer),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataBuffer),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).varying) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataBuffer),
            "::",
            stringify!(varying)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemGetInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub formFactor: XrFormFactor,
}
#[test]
fn bindgen_test_layout_XrSystemGetInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemGetInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemGetInfo>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemGetInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemGetInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSystemGetInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemGetInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemGetInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formFactor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemGetInfo),
            "::",
            stringify!(formFactor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemGraphicsProperties {
    pub maxSwapchainImageHeight: u32,
    pub maxSwapchainImageWidth: u32,
    pub maxLayerCount: u32,
}
#[test]
fn bindgen_test_layout_XrSystemGraphicsProperties() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemGraphicsProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemGraphicsProperties>(),
        12usize,
        concat!("Size of: ", stringify!(XrSystemGraphicsProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemGraphicsProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(XrSystemGraphicsProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSwapchainImageHeight) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemGraphicsProperties),
            "::",
            stringify!(maxSwapchainImageHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSwapchainImageWidth) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemGraphicsProperties),
            "::",
            stringify!(maxSwapchainImageWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxLayerCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemGraphicsProperties),
            "::",
            stringify!(maxLayerCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemTrackingProperties {
    pub orientationTracking: XrBool32,
    pub positionTracking: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemTrackingProperties() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemTrackingProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemTrackingProperties>(),
        8usize,
        concat!("Size of: ", stringify!(XrSystemTrackingProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemTrackingProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(XrSystemTrackingProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientationTracking) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemTrackingProperties),
            "::",
            stringify!(orientationTracking)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positionTracking) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemTrackingProperties),
            "::",
            stringify!(positionTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub systemId: XrSystemId,
    pub vendorId: u32,
    pub systemName: [::std::os::raw::c_char; 256usize],
    pub graphicsProperties: XrSystemGraphicsProperties,
    pub trackingProperties: XrSystemTrackingProperties,
}
#[test]
fn bindgen_test_layout_XrSystemProperties() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemProperties> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemProperties>(),
        304usize,
        concat!("Size of: ", stringify!(XrSystemProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSystemProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).systemId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(systemId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendorId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(vendorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).systemName) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(systemName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphicsProperties) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(graphicsProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trackingProperties) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(trackingProperties)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSessionCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrSessionCreateFlags,
    pub systemId: XrSystemId,
}
#[test]
fn bindgen_test_layout_XrSessionCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrSessionCreateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSessionCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XrSessionCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSessionCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSessionCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfo),
            "::",
            stringify!(createFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).systemId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfo),
            "::",
            stringify!(systemId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVector3f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_XrVector3f() {
    const UNINIT: ::std::mem::MaybeUninit<XrVector3f> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVector3f>(),
        12usize,
        concat!("Size of: ", stringify!(XrVector3f))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVector3f>(),
        4usize,
        concat!("Alignment of ", stringify!(XrVector3f))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector3f),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector3f),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector3f),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceVelocity {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub velocityFlags: XrSpaceVelocityFlags,
    pub linearVelocity: XrVector3f,
    pub angularVelocity: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrSpaceVelocity() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceVelocity> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceVelocity>(),
        48usize,
        concat!("Size of: ", stringify!(XrSpaceVelocity))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceVelocity>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceVelocity))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocity),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocity),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).velocityFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocity),
            "::",
            stringify!(velocityFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linearVelocity) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocity),
            "::",
            stringify!(linearVelocity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angularVelocity) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocity),
            "::",
            stringify!(angularVelocity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrQuaternionf {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_XrQuaternionf() {
    const UNINIT: ::std::mem::MaybeUninit<XrQuaternionf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrQuaternionf>(),
        16usize,
        concat!("Size of: ", stringify!(XrQuaternionf))
    );
    assert_eq!(
        ::std::mem::align_of::<XrQuaternionf>(),
        4usize,
        concat!("Alignment of ", stringify!(XrQuaternionf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrQuaternionf),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrQuaternionf),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrQuaternionf),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrQuaternionf),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPosef {
    pub orientation: XrQuaternionf,
    pub position: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrPosef() {
    const UNINIT: ::std::mem::MaybeUninit<XrPosef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPosef>(),
        28usize,
        concat!("Size of: ", stringify!(XrPosef))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPosef>(),
        4usize,
        concat!("Alignment of ", stringify!(XrPosef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPosef),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPosef),
            "::",
            stringify!(position)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrReferenceSpaceCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub referenceSpaceType: XrReferenceSpaceType,
    pub poseInReferenceSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrReferenceSpaceCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrReferenceSpaceCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrReferenceSpaceCreateInfo>(),
        48usize,
        concat!("Size of: ", stringify!(XrReferenceSpaceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrReferenceSpaceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrReferenceSpaceCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrReferenceSpaceCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrReferenceSpaceCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referenceSpaceType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrReferenceSpaceCreateInfo),
            "::",
            stringify!(referenceSpaceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInReferenceSpace) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrReferenceSpaceCreateInfo),
            "::",
            stringify!(poseInReferenceSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExtent2Df {
    pub width: f32,
    pub height: f32,
}
#[test]
fn bindgen_test_layout_XrExtent2Df() {
    const UNINIT: ::std::mem::MaybeUninit<XrExtent2Df> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrExtent2Df>(),
        8usize,
        concat!("Size of: ", stringify!(XrExtent2Df))
    );
    assert_eq!(
        ::std::mem::align_of::<XrExtent2Df>(),
        4usize,
        concat!("Alignment of ", stringify!(XrExtent2Df))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtent2Df),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtent2Df),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionSpaceCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
    pub subactionPath: XrPath,
    pub poseInActionSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrActionSpaceCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrActionSpaceCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActionSpaceCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(XrActionSpaceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionSpaceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionSpaceCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSpaceCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSpaceCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSpaceCreateInfo),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subactionPath) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSpaceCreateInfo),
            "::",
            stringify!(subactionPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInActionSpace) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSpaceCreateInfo),
            "::",
            stringify!(poseInActionSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceLocation {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
}
#[test]
fn bindgen_test_layout_XrSpaceLocation() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceLocation> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceLocation>(),
        56usize,
        concat!("Size of: ", stringify!(XrSpaceLocation))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceLocation>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceLocation))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocation),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocation),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locationFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocation),
            "::",
            stringify!(locationFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocation),
            "::",
            stringify!(pose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewConfigurationProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
    pub fovMutable: XrBool32,
}
#[test]
fn bindgen_test_layout_XrViewConfigurationProperties() {
    const UNINIT: ::std::mem::MaybeUninit<XrViewConfigurationProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrViewConfigurationProperties>(),
        24usize,
        concat!("Size of: ", stringify!(XrViewConfigurationProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewConfigurationProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(XrViewConfigurationProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationProperties),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationProperties),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewConfigurationType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationProperties),
            "::",
            stringify!(viewConfigurationType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fovMutable) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationProperties),
            "::",
            stringify!(fovMutable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewConfigurationView {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub recommendedImageRectWidth: u32,
    pub maxImageRectWidth: u32,
    pub recommendedImageRectHeight: u32,
    pub maxImageRectHeight: u32,
    pub recommendedSwapchainSampleCount: u32,
    pub maxSwapchainSampleCount: u32,
}
#[test]
fn bindgen_test_layout_XrViewConfigurationView() {
    const UNINIT: ::std::mem::MaybeUninit<XrViewConfigurationView> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrViewConfigurationView>(),
        40usize,
        concat!("Size of: ", stringify!(XrViewConfigurationView))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewConfigurationView>(),
        8usize,
        concat!("Alignment of ", stringify!(XrViewConfigurationView))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recommendedImageRectWidth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(recommendedImageRectWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageRectWidth) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(maxImageRectWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recommendedImageRectHeight) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(recommendedImageRectHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageRectHeight) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(maxImageRectHeight)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).recommendedSwapchainSampleCount) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(recommendedSwapchainSampleCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSwapchainSampleCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(maxSwapchainSampleCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrSwapchainCreateFlags,
    pub usageFlags: XrSwapchainUsageFlags,
    pub format: i64,
    pub sampleCount: u32,
    pub width: u32,
    pub height: u32,
    pub faceCount: u32,
    pub arraySize: u32,
    pub mipCount: u32,
}
#[test]
fn bindgen_test_layout_XrSwapchainCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrSwapchainCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(XrSwapchainCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(createFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usageFlags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(usageFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(sampleCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faceCount) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(faceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arraySize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(arraySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipCount) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(mipCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainImageBaseHeader {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSwapchainImageBaseHeader() {
    const UNINIT: ::std::mem::MaybeUninit<XrSwapchainImageBaseHeader> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainImageBaseHeader>(),
        16usize,
        concat!("Size of: ", stringify!(XrSwapchainImageBaseHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainImageBaseHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainImageBaseHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageBaseHeader),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageBaseHeader),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainImageAcquireInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSwapchainImageAcquireInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrSwapchainImageAcquireInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainImageAcquireInfo>(),
        16usize,
        concat!("Size of: ", stringify!(XrSwapchainImageAcquireInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainImageAcquireInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainImageAcquireInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageAcquireInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageAcquireInfo),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainImageWaitInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub timeout: XrDuration,
}
#[test]
fn bindgen_test_layout_XrSwapchainImageWaitInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrSwapchainImageWaitInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainImageWaitInfo>(),
        24usize,
        concat!("Size of: ", stringify!(XrSwapchainImageWaitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainImageWaitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainImageWaitInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageWaitInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageWaitInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageWaitInfo),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainImageReleaseInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSwapchainImageReleaseInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrSwapchainImageReleaseInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainImageReleaseInfo>(),
        16usize,
        concat!("Size of: ", stringify!(XrSwapchainImageReleaseInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainImageReleaseInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainImageReleaseInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageReleaseInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageReleaseInfo),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSessionBeginInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub primaryViewConfigurationType: XrViewConfigurationType,
}
#[test]
fn bindgen_test_layout_XrSessionBeginInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrSessionBeginInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSessionBeginInfo>(),
        24usize,
        concat!("Size of: ", stringify!(XrSessionBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSessionBeginInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSessionBeginInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionBeginInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionBeginInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).primaryViewConfigurationType) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionBeginInfo),
            "::",
            stringify!(primaryViewConfigurationType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameWaitInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrFrameWaitInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrFrameWaitInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFrameWaitInfo>(),
        16usize,
        concat!("Size of: ", stringify!(XrFrameWaitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFrameWaitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFrameWaitInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameWaitInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameWaitInfo),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameState {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub predictedDisplayTime: XrTime,
    pub predictedDisplayPeriod: XrDuration,
    pub shouldRender: XrBool32,
}
#[test]
fn bindgen_test_layout_XrFrameState() {
    const UNINIT: ::std::mem::MaybeUninit<XrFrameState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFrameState>(),
        40usize,
        concat!("Size of: ", stringify!(XrFrameState))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFrameState>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFrameState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameState),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).predictedDisplayTime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameState),
            "::",
            stringify!(predictedDisplayTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).predictedDisplayPeriod) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameState),
            "::",
            stringify!(predictedDisplayPeriod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shouldRender) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameState),
            "::",
            stringify!(shouldRender)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameBeginInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrFrameBeginInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrFrameBeginInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFrameBeginInfo>(),
        16usize,
        concat!("Size of: ", stringify!(XrFrameBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFrameBeginInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFrameBeginInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameBeginInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameBeginInfo),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerBaseHeader {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerBaseHeader() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerBaseHeader> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerBaseHeader>(),
        32usize,
        concat!("Size of: ", stringify!(XrCompositionLayerBaseHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerBaseHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerBaseHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerBaseHeader),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerBaseHeader),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerBaseHeader),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerBaseHeader),
            "::",
            stringify!(space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameEndInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub displayTime: XrTime,
    pub environmentBlendMode: XrEnvironmentBlendMode,
    pub layerCount: u32,
    pub layers: *const *const XrCompositionLayerBaseHeader,
}
#[test]
fn bindgen_test_layout_XrFrameEndInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrFrameEndInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFrameEndInfo>(),
        40usize,
        concat!("Size of: ", stringify!(XrFrameEndInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFrameEndInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFrameEndInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayTime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfo),
            "::",
            stringify!(displayTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).environmentBlendMode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfo),
            "::",
            stringify!(environmentBlendMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfo),
            "::",
            stringify!(layerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layers) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfo),
            "::",
            stringify!(layers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewLocateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
    pub displayTime: XrTime,
    pub space: XrSpace,
}
#[test]
fn bindgen_test_layout_XrViewLocateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrViewLocateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrViewLocateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(XrViewLocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewLocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrViewLocateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewConfigurationType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateInfo),
            "::",
            stringify!(viewConfigurationType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayTime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateInfo),
            "::",
            stringify!(displayTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateInfo),
            "::",
            stringify!(space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewState {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub viewStateFlags: XrViewStateFlags,
}
#[test]
fn bindgen_test_layout_XrViewState() {
    const UNINIT: ::std::mem::MaybeUninit<XrViewState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrViewState>(),
        24usize,
        concat!("Size of: ", stringify!(XrViewState))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewState>(),
        8usize,
        concat!("Alignment of ", stringify!(XrViewState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewState),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewStateFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewState),
            "::",
            stringify!(viewStateFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFovf {
    pub angleLeft: f32,
    pub angleRight: f32,
    pub angleUp: f32,
    pub angleDown: f32,
}
#[test]
fn bindgen_test_layout_XrFovf() {
    const UNINIT: ::std::mem::MaybeUninit<XrFovf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFovf>(),
        16usize,
        concat!("Size of: ", stringify!(XrFovf))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFovf>(),
        4usize,
        concat!("Alignment of ", stringify!(XrFovf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angleLeft) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFovf),
            "::",
            stringify!(angleLeft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angleRight) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFovf),
            "::",
            stringify!(angleRight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angleUp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFovf),
            "::",
            stringify!(angleUp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angleDown) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFovf),
            "::",
            stringify!(angleDown)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrView {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub pose: XrPosef,
    pub fov: XrFovf,
}
#[test]
fn bindgen_test_layout_XrView() {
    const UNINIT: ::std::mem::MaybeUninit<XrView> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrView>(),
        64usize,
        concat!("Size of: ", stringify!(XrView))
    );
    assert_eq!(
        ::std::mem::align_of::<XrView>(),
        8usize,
        concat!("Alignment of ", stringify!(XrView))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrView),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrView),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrView),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fov) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XrView),
            "::",
            stringify!(fov)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionSetCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub actionSetName: [::std::os::raw::c_char; 64usize],
    pub localizedActionSetName: [::std::os::raw::c_char; 128usize],
    pub priority: u32,
}
#[test]
fn bindgen_test_layout_XrActionSetCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrActionSetCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActionSetCreateInfo>(),
        216usize,
        concat!("Size of: ", stringify!(XrActionSetCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionSetCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionSetCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSetCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSetCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionSetName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSetCreateInfo),
            "::",
            stringify!(actionSetName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).localizedActionSetName) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSetCreateInfo),
            "::",
            stringify!(localizedActionSetName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSetCreateInfo),
            "::",
            stringify!(priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub actionName: [::std::os::raw::c_char; 64usize],
    pub actionType: XrActionType,
    pub countSubactionPaths: u32,
    pub subactionPaths: *const XrPath,
    pub localizedActionName: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_XrActionCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrActionCreateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActionCreateInfo>(),
        224usize,
        concat!("Size of: ", stringify!(XrActionCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(actionName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionType) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(actionType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).countSubactionPaths) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(countSubactionPaths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subactionPaths) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(subactionPaths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).localizedActionName) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(localizedActionName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionSuggestedBinding {
    pub action: XrAction,
    pub binding: XrPath,
}
#[test]
fn bindgen_test_layout_XrActionSuggestedBinding() {
    const UNINIT: ::std::mem::MaybeUninit<XrActionSuggestedBinding> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActionSuggestedBinding>(),
        16usize,
        concat!("Size of: ", stringify!(XrActionSuggestedBinding))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionSuggestedBinding>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionSuggestedBinding))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSuggestedBinding),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSuggestedBinding),
            "::",
            stringify!(binding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInteractionProfileSuggestedBinding {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub interactionProfile: XrPath,
    pub countSuggestedBindings: u32,
    pub suggestedBindings: *const XrActionSuggestedBinding,
}
#[test]
fn bindgen_test_layout_XrInteractionProfileSuggestedBinding() {
    const UNINIT: ::std::mem::MaybeUninit<XrInteractionProfileSuggestedBinding> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrInteractionProfileSuggestedBinding>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(XrInteractionProfileSuggestedBinding)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrInteractionProfileSuggestedBinding>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrInteractionProfileSuggestedBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileSuggestedBinding),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileSuggestedBinding),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interactionProfile) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileSuggestedBinding),
            "::",
            stringify!(interactionProfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).countSuggestedBindings) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileSuggestedBinding),
            "::",
            stringify!(countSuggestedBindings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggestedBindings) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileSuggestedBinding),
            "::",
            stringify!(suggestedBindings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSessionActionSetsAttachInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub countActionSets: u32,
    pub actionSets: *const XrActionSet,
}
#[test]
fn bindgen_test_layout_XrSessionActionSetsAttachInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrSessionActionSetsAttachInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSessionActionSetsAttachInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XrSessionActionSetsAttachInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSessionActionSetsAttachInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSessionActionSetsAttachInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionActionSetsAttachInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionActionSetsAttachInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).countActionSets) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionActionSetsAttachInfo),
            "::",
            stringify!(countActionSets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionSets) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionActionSetsAttachInfo),
            "::",
            stringify!(actionSets)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInteractionProfileState {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub interactionProfile: XrPath,
}
#[test]
fn bindgen_test_layout_XrInteractionProfileState() {
    const UNINIT: ::std::mem::MaybeUninit<XrInteractionProfileState> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrInteractionProfileState>(),
        24usize,
        concat!("Size of: ", stringify!(XrInteractionProfileState))
    );
    assert_eq!(
        ::std::mem::align_of::<XrInteractionProfileState>(),
        8usize,
        concat!("Alignment of ", stringify!(XrInteractionProfileState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileState),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interactionProfile) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileState),
            "::",
            stringify!(interactionProfile)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStateGetInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
    pub subactionPath: XrPath,
}
#[test]
fn bindgen_test_layout_XrActionStateGetInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrActionStateGetInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActionStateGetInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XrActionStateGetInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionStateGetInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionStateGetInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateGetInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateGetInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateGetInfo),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subactionPath) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateGetInfo),
            "::",
            stringify!(subactionPath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStateBoolean {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub currentState: XrBool32,
    pub changedSinceLastSync: XrBool32,
    pub lastChangeTime: XrTime,
    pub isActive: XrBool32,
}
#[test]
fn bindgen_test_layout_XrActionStateBoolean() {
    const UNINIT: ::std::mem::MaybeUninit<XrActionStateBoolean> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActionStateBoolean>(),
        40usize,
        concat!("Size of: ", stringify!(XrActionStateBoolean))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionStateBoolean>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionStateBoolean))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateBoolean),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateBoolean),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentState) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateBoolean),
            "::",
            stringify!(currentState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changedSinceLastSync) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateBoolean),
            "::",
            stringify!(changedSinceLastSync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastChangeTime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateBoolean),
            "::",
            stringify!(lastChangeTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isActive) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateBoolean),
            "::",
            stringify!(isActive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStateFloat {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub currentState: f32,
    pub changedSinceLastSync: XrBool32,
    pub lastChangeTime: XrTime,
    pub isActive: XrBool32,
}
#[test]
fn bindgen_test_layout_XrActionStateFloat() {
    const UNINIT: ::std::mem::MaybeUninit<XrActionStateFloat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActionStateFloat>(),
        40usize,
        concat!("Size of: ", stringify!(XrActionStateFloat))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionStateFloat>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionStateFloat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateFloat),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateFloat),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentState) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateFloat),
            "::",
            stringify!(currentState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changedSinceLastSync) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateFloat),
            "::",
            stringify!(changedSinceLastSync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastChangeTime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateFloat),
            "::",
            stringify!(lastChangeTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isActive) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateFloat),
            "::",
            stringify!(isActive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVector2f {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_XrVector2f() {
    const UNINIT: ::std::mem::MaybeUninit<XrVector2f> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVector2f>(),
        8usize,
        concat!("Size of: ", stringify!(XrVector2f))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVector2f>(),
        4usize,
        concat!("Alignment of ", stringify!(XrVector2f))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector2f),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector2f),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStateVector2f {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub currentState: XrVector2f,
    pub changedSinceLastSync: XrBool32,
    pub lastChangeTime: XrTime,
    pub isActive: XrBool32,
}
#[test]
fn bindgen_test_layout_XrActionStateVector2f() {
    const UNINIT: ::std::mem::MaybeUninit<XrActionStateVector2f> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActionStateVector2f>(),
        48usize,
        concat!("Size of: ", stringify!(XrActionStateVector2f))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionStateVector2f>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionStateVector2f))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateVector2f),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateVector2f),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentState) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateVector2f),
            "::",
            stringify!(currentState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changedSinceLastSync) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateVector2f),
            "::",
            stringify!(changedSinceLastSync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastChangeTime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateVector2f),
            "::",
            stringify!(lastChangeTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isActive) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateVector2f),
            "::",
            stringify!(isActive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStatePose {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
}
#[test]
fn bindgen_test_layout_XrActionStatePose() {
    const UNINIT: ::std::mem::MaybeUninit<XrActionStatePose> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActionStatePose>(),
        24usize,
        concat!("Size of: ", stringify!(XrActionStatePose))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionStatePose>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionStatePose))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStatePose),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStatePose),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isActive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStatePose),
            "::",
            stringify!(isActive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActiveActionSet {
    pub actionSet: XrActionSet,
    pub subactionPath: XrPath,
}
#[test]
fn bindgen_test_layout_XrActiveActionSet() {
    const UNINIT: ::std::mem::MaybeUninit<XrActiveActionSet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActiveActionSet>(),
        16usize,
        concat!("Size of: ", stringify!(XrActiveActionSet))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActiveActionSet>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActiveActionSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionSet) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActiveActionSet),
            "::",
            stringify!(actionSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subactionPath) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActiveActionSet),
            "::",
            stringify!(subactionPath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionsSyncInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub countActiveActionSets: u32,
    pub activeActionSets: *const XrActiveActionSet,
}
#[test]
fn bindgen_test_layout_XrActionsSyncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrActionsSyncInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActionsSyncInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XrActionsSyncInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionsSyncInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionsSyncInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionsSyncInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionsSyncInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).countActiveActionSets) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionsSyncInfo),
            "::",
            stringify!(countActiveActionSets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activeActionSets) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionsSyncInfo),
            "::",
            stringify!(activeActionSets)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBoundSourcesForActionEnumerateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
}
#[test]
fn bindgen_test_layout_XrBoundSourcesForActionEnumerateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrBoundSourcesForActionEnumerateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBoundSourcesForActionEnumerateInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrBoundSourcesForActionEnumerateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrBoundSourcesForActionEnumerateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrBoundSourcesForActionEnumerateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoundSourcesForActionEnumerateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoundSourcesForActionEnumerateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoundSourcesForActionEnumerateInfo),
            "::",
            stringify!(action)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInputSourceLocalizedNameGetInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub sourcePath: XrPath,
    pub whichComponents: XrInputSourceLocalizedNameFlags,
}
#[test]
fn bindgen_test_layout_XrInputSourceLocalizedNameGetInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrInputSourceLocalizedNameGetInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrInputSourceLocalizedNameGetInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XrInputSourceLocalizedNameGetInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrInputSourceLocalizedNameGetInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrInputSourceLocalizedNameGetInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInputSourceLocalizedNameGetInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInputSourceLocalizedNameGetInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourcePath) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInputSourceLocalizedNameGetInfo),
            "::",
            stringify!(sourcePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).whichComponents) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInputSourceLocalizedNameGetInfo),
            "::",
            stringify!(whichComponents)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticActionInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
    pub subactionPath: XrPath,
}
#[test]
fn bindgen_test_layout_XrHapticActionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrHapticActionInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHapticActionInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XrHapticActionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHapticActionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHapticActionInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticActionInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticActionInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticActionInfo),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subactionPath) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticActionInfo),
            "::",
            stringify!(subactionPath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticBaseHeader {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrHapticBaseHeader() {
    const UNINIT: ::std::mem::MaybeUninit<XrHapticBaseHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHapticBaseHeader>(),
        16usize,
        concat!("Size of: ", stringify!(XrHapticBaseHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHapticBaseHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHapticBaseHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticBaseHeader),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticBaseHeader),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBaseInStructure {
    pub type_: XrStructureType,
    pub next: *const XrBaseInStructure,
}
#[test]
fn bindgen_test_layout_XrBaseInStructure() {
    const UNINIT: ::std::mem::MaybeUninit<XrBaseInStructure> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBaseInStructure>(),
        16usize,
        concat!("Size of: ", stringify!(XrBaseInStructure))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBaseInStructure>(),
        8usize,
        concat!("Alignment of ", stringify!(XrBaseInStructure))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBaseInStructure),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBaseInStructure),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBaseOutStructure {
    pub type_: XrStructureType,
    pub next: *mut XrBaseOutStructure,
}
#[test]
fn bindgen_test_layout_XrBaseOutStructure() {
    const UNINIT: ::std::mem::MaybeUninit<XrBaseOutStructure> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBaseOutStructure>(),
        16usize,
        concat!("Size of: ", stringify!(XrBaseOutStructure))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBaseOutStructure>(),
        8usize,
        concat!("Alignment of ", stringify!(XrBaseOutStructure))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBaseOutStructure),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBaseOutStructure),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrOffset2Di {
    pub x: i32,
    pub y: i32,
}
#[test]
fn bindgen_test_layout_XrOffset2Di() {
    const UNINIT: ::std::mem::MaybeUninit<XrOffset2Di> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrOffset2Di>(),
        8usize,
        concat!("Size of: ", stringify!(XrOffset2Di))
    );
    assert_eq!(
        ::std::mem::align_of::<XrOffset2Di>(),
        4usize,
        concat!("Alignment of ", stringify!(XrOffset2Di))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrOffset2Di),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrOffset2Di),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExtent2Di {
    pub width: i32,
    pub height: i32,
}
#[test]
fn bindgen_test_layout_XrExtent2Di() {
    const UNINIT: ::std::mem::MaybeUninit<XrExtent2Di> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrExtent2Di>(),
        8usize,
        concat!("Size of: ", stringify!(XrExtent2Di))
    );
    assert_eq!(
        ::std::mem::align_of::<XrExtent2Di>(),
        4usize,
        concat!("Alignment of ", stringify!(XrExtent2Di))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtent2Di),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtent2Di),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRect2Di {
    pub offset: XrOffset2Di,
    pub extent: XrExtent2Di,
}
#[test]
fn bindgen_test_layout_XrRect2Di() {
    const UNINIT: ::std::mem::MaybeUninit<XrRect2Di> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrRect2Di>(),
        16usize,
        concat!("Size of: ", stringify!(XrRect2Di))
    );
    assert_eq!(
        ::std::mem::align_of::<XrRect2Di>(),
        4usize,
        concat!("Alignment of ", stringify!(XrRect2Di))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRect2Di),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRect2Di),
            "::",
            stringify!(extent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainSubImage {
    pub swapchain: XrSwapchain,
    pub imageRect: XrRect2Di,
    pub imageArrayIndex: u32,
}
#[test]
fn bindgen_test_layout_XrSwapchainSubImage() {
    const UNINIT: ::std::mem::MaybeUninit<XrSwapchainSubImage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainSubImage>(),
        32usize,
        concat!("Size of: ", stringify!(XrSwapchainSubImage))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainSubImage>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainSubImage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainSubImage),
            "::",
            stringify!(swapchain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageRect) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainSubImage),
            "::",
            stringify!(imageRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageArrayIndex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainSubImage),
            "::",
            stringify!(imageArrayIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerProjectionView {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub pose: XrPosef,
    pub fov: XrFovf,
    pub subImage: XrSwapchainSubImage,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerProjectionView() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerProjectionView> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerProjectionView>(),
        96usize,
        concat!("Size of: ", stringify!(XrCompositionLayerProjectionView))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerProjectionView>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrCompositionLayerProjectionView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjectionView),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjectionView),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjectionView),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fov) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjectionView),
            "::",
            stringify!(fov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subImage) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjectionView),
            "::",
            stringify!(subImage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerProjection {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub viewCount: u32,
    pub views: *const XrCompositionLayerProjectionView,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerProjection() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerProjection> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerProjection>(),
        48usize,
        concat!("Size of: ", stringify!(XrCompositionLayerProjection))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerProjection>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerProjection))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjection),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjection),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjection),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjection),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjection),
            "::",
            stringify!(viewCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).views) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjection),
            "::",
            stringify!(views)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerQuad {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub subImage: XrSwapchainSubImage,
    pub pose: XrPosef,
    pub size: XrExtent2Df,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerQuad() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerQuad> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerQuad>(),
        112usize,
        concat!("Size of: ", stringify!(XrCompositionLayerQuad))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerQuad>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerQuad))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eyeVisibility) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(eyeVisibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subImage) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(subImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataBaseHeader {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrEventDataBaseHeader() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataBaseHeader> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataBaseHeader>(),
        16usize,
        concat!("Size of: ", stringify!(XrEventDataBaseHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataBaseHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataBaseHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataBaseHeader),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataBaseHeader),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataEventsLost {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub lostEventCount: u32,
}
#[test]
fn bindgen_test_layout_XrEventDataEventsLost() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataEventsLost> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataEventsLost>(),
        24usize,
        concat!("Size of: ", stringify!(XrEventDataEventsLost))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataEventsLost>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataEventsLost))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataEventsLost),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataEventsLost),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lostEventCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataEventsLost),
            "::",
            stringify!(lostEventCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataInstanceLossPending {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub lossTime: XrTime,
}
#[test]
fn bindgen_test_layout_XrEventDataInstanceLossPending() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataInstanceLossPending> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataInstanceLossPending>(),
        24usize,
        concat!("Size of: ", stringify!(XrEventDataInstanceLossPending))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataInstanceLossPending>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataInstanceLossPending))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataInstanceLossPending),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataInstanceLossPending),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lossTime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataInstanceLossPending),
            "::",
            stringify!(lossTime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSessionStateChanged {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub state: XrSessionState,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrEventDataSessionStateChanged() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataSessionStateChanged> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataSessionStateChanged>(),
        40usize,
        concat!("Size of: ", stringify!(XrEventDataSessionStateChanged))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataSessionStateChanged>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataSessionStateChanged))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSessionStateChanged),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSessionStateChanged),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSessionStateChanged),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSessionStateChanged),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSessionStateChanged),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataReferenceSpaceChangePending {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub referenceSpaceType: XrReferenceSpaceType,
    pub changeTime: XrTime,
    pub poseValid: XrBool32,
    pub poseInPreviousSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrEventDataReferenceSpaceChangePending() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataReferenceSpaceChangePending> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataReferenceSpaceChangePending>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataReferenceSpaceChangePending)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataReferenceSpaceChangePending>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataReferenceSpaceChangePending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referenceSpaceType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(referenceSpaceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changeTime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(changeTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseValid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(poseValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInPreviousSpace) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(poseInPreviousSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataInteractionProfileChanged {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
}
#[test]
fn bindgen_test_layout_XrEventDataInteractionProfileChanged() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataInteractionProfileChanged> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataInteractionProfileChanged>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataInteractionProfileChanged)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataInteractionProfileChanged>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataInteractionProfileChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataInteractionProfileChanged),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataInteractionProfileChanged),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataInteractionProfileChanged),
            "::",
            stringify!(session)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticVibration {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub duration: XrDuration,
    pub frequency: f32,
    pub amplitude: f32,
}
#[test]
fn bindgen_test_layout_XrHapticVibration() {
    const UNINIT: ::std::mem::MaybeUninit<XrHapticVibration> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHapticVibration>(),
        32usize,
        concat!("Size of: ", stringify!(XrHapticVibration))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHapticVibration>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHapticVibration))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticVibration),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticVibration),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticVibration),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequency) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticVibration),
            "::",
            stringify!(frequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amplitude) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticVibration),
            "::",
            stringify!(amplitude)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrOffset2Df {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_XrOffset2Df() {
    const UNINIT: ::std::mem::MaybeUninit<XrOffset2Df> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrOffset2Df>(),
        8usize,
        concat!("Size of: ", stringify!(XrOffset2Df))
    );
    assert_eq!(
        ::std::mem::align_of::<XrOffset2Df>(),
        4usize,
        concat!("Alignment of ", stringify!(XrOffset2Df))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrOffset2Df),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrOffset2Df),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRect2Df {
    pub offset: XrOffset2Df,
    pub extent: XrExtent2Df,
}
#[test]
fn bindgen_test_layout_XrRect2Df() {
    const UNINIT: ::std::mem::MaybeUninit<XrRect2Df> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrRect2Df>(),
        16usize,
        concat!("Size of: ", stringify!(XrRect2Df))
    );
    assert_eq!(
        ::std::mem::align_of::<XrRect2Df>(),
        4usize,
        concat!("Alignment of ", stringify!(XrRect2Df))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRect2Df),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRect2Df),
            "::",
            stringify!(extent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVector4f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_XrVector4f() {
    const UNINIT: ::std::mem::MaybeUninit<XrVector4f> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVector4f>(),
        16usize,
        concat!("Size of: ", stringify!(XrVector4f))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVector4f>(),
        4usize,
        concat!("Alignment of ", stringify!(XrVector4f))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector4f),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector4f),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector4f),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector4f),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrColor4f {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_XrColor4f() {
    const UNINIT: ::std::mem::MaybeUninit<XrColor4f> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrColor4f>(),
        16usize,
        concat!("Size of: ", stringify!(XrColor4f))
    );
    assert_eq!(
        ::std::mem::align_of::<XrColor4f>(),
        4usize,
        concat!("Alignment of ", stringify!(XrColor4f))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrColor4f),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrColor4f),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrColor4f),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrColor4f),
            "::",
            stringify!(a)
        )
    );
}
pub type PFN_xrGetInstanceProcAddr = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        name: *const ::std::os::raw::c_char,
        function: *mut PFN_xrVoidFunction,
    ) -> XrResult,
>;
pub type PFN_xrEnumerateApiLayerProperties = ::std::option::Option<
    unsafe extern "C" fn(
        propertyCapacityInput: u32,
        propertyCountOutput: *mut u32,
        properties: *mut XrApiLayerProperties,
    ) -> XrResult,
>;
pub type PFN_xrEnumerateInstanceExtensionProperties = ::std::option::Option<
    unsafe extern "C" fn(
        layerName: *const ::std::os::raw::c_char,
        propertyCapacityInput: u32,
        propertyCountOutput: *mut u32,
        properties: *mut XrExtensionProperties,
    ) -> XrResult,
>;
pub type PFN_xrCreateInstance = ::std::option::Option<
    unsafe extern "C" fn(
        createInfo: *const XrInstanceCreateInfo,
        instance: *mut XrInstance,
    ) -> XrResult,
>;
pub type PFN_xrDestroyInstance =
    ::std::option::Option<unsafe extern "C" fn(instance: XrInstance) -> XrResult>;
pub type PFN_xrGetInstanceProperties = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        instanceProperties: *mut XrInstanceProperties,
    ) -> XrResult,
>;
pub type PFN_xrPollEvent = ::std::option::Option<
    unsafe extern "C" fn(instance: XrInstance, eventData: *mut XrEventDataBuffer) -> XrResult,
>;
pub type PFN_xrResultToString = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        value: XrResult,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult,
>;
pub type PFN_xrStructureTypeToString = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        value: XrStructureType,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult,
>;
pub type PFN_xrGetSystem = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        getInfo: *const XrSystemGetInfo,
        systemId: *mut XrSystemId,
    ) -> XrResult,
>;
pub type PFN_xrGetSystemProperties = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        systemId: XrSystemId,
        properties: *mut XrSystemProperties,
    ) -> XrResult,
>;
pub type PFN_xrEnumerateEnvironmentBlendModes = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        environmentBlendModeCapacityInput: u32,
        environmentBlendModeCountOutput: *mut u32,
        environmentBlendModes: *mut XrEnvironmentBlendMode,
    ) -> XrResult,
>;
pub type PFN_xrCreateSession = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        createInfo: *const XrSessionCreateInfo,
        session: *mut XrSession,
    ) -> XrResult,
>;
pub type PFN_xrDestroySession =
    ::std::option::Option<unsafe extern "C" fn(session: XrSession) -> XrResult>;
pub type PFN_xrEnumerateReferenceSpaces = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        spaceCapacityInput: u32,
        spaceCountOutput: *mut u32,
        spaces: *mut XrReferenceSpaceType,
    ) -> XrResult,
>;
pub type PFN_xrCreateReferenceSpace = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrReferenceSpaceCreateInfo,
        space: *mut XrSpace,
    ) -> XrResult,
>;
pub type PFN_xrGetReferenceSpaceBoundsRect = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        referenceSpaceType: XrReferenceSpaceType,
        bounds: *mut XrExtent2Df,
    ) -> XrResult,
>;
pub type PFN_xrCreateActionSpace = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrActionSpaceCreateInfo,
        space: *mut XrSpace,
    ) -> XrResult,
>;
pub type PFN_xrLocateSpace = ::std::option::Option<
    unsafe extern "C" fn(
        space: XrSpace,
        baseSpace: XrSpace,
        time: XrTime,
        location: *mut XrSpaceLocation,
    ) -> XrResult,
>;
pub type PFN_xrDestroySpace =
    ::std::option::Option<unsafe extern "C" fn(space: XrSpace) -> XrResult>;
pub type PFN_xrEnumerateViewConfigurations = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationTypeCapacityInput: u32,
        viewConfigurationTypeCountOutput: *mut u32,
        viewConfigurationTypes: *mut XrViewConfigurationType,
    ) -> XrResult,
>;
pub type PFN_xrGetViewConfigurationProperties = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        configurationProperties: *mut XrViewConfigurationProperties,
    ) -> XrResult,
>;
pub type PFN_xrEnumerateViewConfigurationViews = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        viewCapacityInput: u32,
        viewCountOutput: *mut u32,
        views: *mut XrViewConfigurationView,
    ) -> XrResult,
>;
pub type PFN_xrEnumerateSwapchainFormats = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        formatCapacityInput: u32,
        formatCountOutput: *mut u32,
        formats: *mut i64,
    ) -> XrResult,
>;
pub type PFN_xrCreateSwapchain = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrSwapchainCreateInfo,
        swapchain: *mut XrSwapchain,
    ) -> XrResult,
>;
pub type PFN_xrDestroySwapchain =
    ::std::option::Option<unsafe extern "C" fn(swapchain: XrSwapchain) -> XrResult>;
pub type PFN_xrEnumerateSwapchainImages = ::std::option::Option<
    unsafe extern "C" fn(
        swapchain: XrSwapchain,
        imageCapacityInput: u32,
        imageCountOutput: *mut u32,
        images: *mut XrSwapchainImageBaseHeader,
    ) -> XrResult,
>;
pub type PFN_xrAcquireSwapchainImage = ::std::option::Option<
    unsafe extern "C" fn(
        swapchain: XrSwapchain,
        acquireInfo: *const XrSwapchainImageAcquireInfo,
        index: *mut u32,
    ) -> XrResult,
>;
pub type PFN_xrWaitSwapchainImage = ::std::option::Option<
    unsafe extern "C" fn(
        swapchain: XrSwapchain,
        waitInfo: *const XrSwapchainImageWaitInfo,
    ) -> XrResult,
>;
pub type PFN_xrReleaseSwapchainImage = ::std::option::Option<
    unsafe extern "C" fn(
        swapchain: XrSwapchain,
        releaseInfo: *const XrSwapchainImageReleaseInfo,
    ) -> XrResult,
>;
pub type PFN_xrBeginSession = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, beginInfo: *const XrSessionBeginInfo) -> XrResult,
>;
pub type PFN_xrEndSession =
    ::std::option::Option<unsafe extern "C" fn(session: XrSession) -> XrResult>;
pub type PFN_xrRequestExitSession =
    ::std::option::Option<unsafe extern "C" fn(session: XrSession) -> XrResult>;
pub type PFN_xrWaitFrame = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        frameWaitInfo: *const XrFrameWaitInfo,
        frameState: *mut XrFrameState,
    ) -> XrResult,
>;
pub type PFN_xrBeginFrame = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, frameBeginInfo: *const XrFrameBeginInfo) -> XrResult,
>;
pub type PFN_xrEndFrame = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, frameEndInfo: *const XrFrameEndInfo) -> XrResult,
>;
pub type PFN_xrLocateViews = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        viewLocateInfo: *const XrViewLocateInfo,
        viewState: *mut XrViewState,
        viewCapacityInput: u32,
        viewCountOutput: *mut u32,
        views: *mut XrView,
    ) -> XrResult,
>;
pub type PFN_xrStringToPath = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        pathString: *const ::std::os::raw::c_char,
        path: *mut XrPath,
    ) -> XrResult,
>;
pub type PFN_xrPathToString = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        path: XrPath,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult,
>;
pub type PFN_xrCreateActionSet = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        createInfo: *const XrActionSetCreateInfo,
        actionSet: *mut XrActionSet,
    ) -> XrResult,
>;
pub type PFN_xrDestroyActionSet =
    ::std::option::Option<unsafe extern "C" fn(actionSet: XrActionSet) -> XrResult>;
pub type PFN_xrCreateAction = ::std::option::Option<
    unsafe extern "C" fn(
        actionSet: XrActionSet,
        createInfo: *const XrActionCreateInfo,
        action: *mut XrAction,
    ) -> XrResult,
>;
pub type PFN_xrDestroyAction =
    ::std::option::Option<unsafe extern "C" fn(action: XrAction) -> XrResult>;
pub type PFN_xrSuggestInteractionProfileBindings = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        suggestedBindings: *const XrInteractionProfileSuggestedBinding,
    ) -> XrResult,
>;
pub type PFN_xrAttachSessionActionSets = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        attachInfo: *const XrSessionActionSetsAttachInfo,
    ) -> XrResult,
>;
pub type PFN_xrGetCurrentInteractionProfile = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        topLevelUserPath: XrPath,
        interactionProfile: *mut XrInteractionProfileState,
    ) -> XrResult,
>;
pub type PFN_xrGetActionStateBoolean = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateBoolean,
    ) -> XrResult,
>;
pub type PFN_xrGetActionStateFloat = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateFloat,
    ) -> XrResult,
>;
pub type PFN_xrGetActionStateVector2f = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateVector2f,
    ) -> XrResult,
>;
pub type PFN_xrGetActionStatePose = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStatePose,
    ) -> XrResult,
>;
pub type PFN_xrSyncActions = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, syncInfo: *const XrActionsSyncInfo) -> XrResult,
>;
pub type PFN_xrEnumerateBoundSourcesForAction = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        enumerateInfo: *const XrBoundSourcesForActionEnumerateInfo,
        sourceCapacityInput: u32,
        sourceCountOutput: *mut u32,
        sources: *mut XrPath,
    ) -> XrResult,
>;
pub type PFN_xrGetInputSourceLocalizedName = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        getInfo: *const XrInputSourceLocalizedNameGetInfo,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult,
>;
pub type PFN_xrApplyHapticFeedback = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        hapticActionInfo: *const XrHapticActionInfo,
        hapticFeedback: *const XrHapticBaseHeader,
    ) -> XrResult,
>;
pub type PFN_xrStopHapticFeedback = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        hapticActionInfo: *const XrHapticActionInfo,
    ) -> XrResult,
>;
extern "C" {
    pub fn xrGetInstanceProcAddr(
        instance: XrInstance,
        name: *const ::std::os::raw::c_char,
        function: *mut PFN_xrVoidFunction,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateApiLayerProperties(
        propertyCapacityInput: u32,
        propertyCountOutput: *mut u32,
        properties: *mut XrApiLayerProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateInstanceExtensionProperties(
        layerName: *const ::std::os::raw::c_char,
        propertyCapacityInput: u32,
        propertyCountOutput: *mut u32,
        properties: *mut XrExtensionProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateInstance(
        createInfo: *const XrInstanceCreateInfo,
        instance: *mut XrInstance,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroyInstance(instance: XrInstance) -> XrResult;
}
extern "C" {
    pub fn xrGetInstanceProperties(
        instance: XrInstance,
        instanceProperties: *mut XrInstanceProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrPollEvent(instance: XrInstance, eventData: *mut XrEventDataBuffer) -> XrResult;
}
extern "C" {
    pub fn xrResultToString(
        instance: XrInstance,
        value: XrResult,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult;
}
extern "C" {
    pub fn xrStructureTypeToString(
        instance: XrInstance,
        value: XrStructureType,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetSystem(
        instance: XrInstance,
        getInfo: *const XrSystemGetInfo,
        systemId: *mut XrSystemId,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetSystemProperties(
        instance: XrInstance,
        systemId: XrSystemId,
        properties: *mut XrSystemProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateEnvironmentBlendModes(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        environmentBlendModeCapacityInput: u32,
        environmentBlendModeCountOutput: *mut u32,
        environmentBlendModes: *mut XrEnvironmentBlendMode,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateSession(
        instance: XrInstance,
        createInfo: *const XrSessionCreateInfo,
        session: *mut XrSession,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroySession(session: XrSession) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateReferenceSpaces(
        session: XrSession,
        spaceCapacityInput: u32,
        spaceCountOutput: *mut u32,
        spaces: *mut XrReferenceSpaceType,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateReferenceSpace(
        session: XrSession,
        createInfo: *const XrReferenceSpaceCreateInfo,
        space: *mut XrSpace,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetReferenceSpaceBoundsRect(
        session: XrSession,
        referenceSpaceType: XrReferenceSpaceType,
        bounds: *mut XrExtent2Df,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateActionSpace(
        session: XrSession,
        createInfo: *const XrActionSpaceCreateInfo,
        space: *mut XrSpace,
    ) -> XrResult;
}
extern "C" {
    pub fn xrLocateSpace(
        space: XrSpace,
        baseSpace: XrSpace,
        time: XrTime,
        location: *mut XrSpaceLocation,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroySpace(space: XrSpace) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateViewConfigurations(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationTypeCapacityInput: u32,
        viewConfigurationTypeCountOutput: *mut u32,
        viewConfigurationTypes: *mut XrViewConfigurationType,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetViewConfigurationProperties(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        configurationProperties: *mut XrViewConfigurationProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateViewConfigurationViews(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        viewCapacityInput: u32,
        viewCountOutput: *mut u32,
        views: *mut XrViewConfigurationView,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateSwapchainFormats(
        session: XrSession,
        formatCapacityInput: u32,
        formatCountOutput: *mut u32,
        formats: *mut i64,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateSwapchain(
        session: XrSession,
        createInfo: *const XrSwapchainCreateInfo,
        swapchain: *mut XrSwapchain,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroySwapchain(swapchain: XrSwapchain) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateSwapchainImages(
        swapchain: XrSwapchain,
        imageCapacityInput: u32,
        imageCountOutput: *mut u32,
        images: *mut XrSwapchainImageBaseHeader,
    ) -> XrResult;
}
extern "C" {
    pub fn xrAcquireSwapchainImage(
        swapchain: XrSwapchain,
        acquireInfo: *const XrSwapchainImageAcquireInfo,
        index: *mut u32,
    ) -> XrResult;
}
extern "C" {
    pub fn xrWaitSwapchainImage(
        swapchain: XrSwapchain,
        waitInfo: *const XrSwapchainImageWaitInfo,
    ) -> XrResult;
}
extern "C" {
    pub fn xrReleaseSwapchainImage(
        swapchain: XrSwapchain,
        releaseInfo: *const XrSwapchainImageReleaseInfo,
    ) -> XrResult;
}
extern "C" {
    pub fn xrBeginSession(session: XrSession, beginInfo: *const XrSessionBeginInfo) -> XrResult;
}
extern "C" {
    pub fn xrEndSession(session: XrSession) -> XrResult;
}
extern "C" {
    pub fn xrRequestExitSession(session: XrSession) -> XrResult;
}
extern "C" {
    pub fn xrWaitFrame(
        session: XrSession,
        frameWaitInfo: *const XrFrameWaitInfo,
        frameState: *mut XrFrameState,
    ) -> XrResult;
}
extern "C" {
    pub fn xrBeginFrame(session: XrSession, frameBeginInfo: *const XrFrameBeginInfo) -> XrResult;
}
extern "C" {
    pub fn xrEndFrame(session: XrSession, frameEndInfo: *const XrFrameEndInfo) -> XrResult;
}
extern "C" {
    pub fn xrLocateViews(
        session: XrSession,
        viewLocateInfo: *const XrViewLocateInfo,
        viewState: *mut XrViewState,
        viewCapacityInput: u32,
        viewCountOutput: *mut u32,
        views: *mut XrView,
    ) -> XrResult;
}
extern "C" {
    pub fn xrStringToPath(
        instance: XrInstance,
        pathString: *const ::std::os::raw::c_char,
        path: *mut XrPath,
    ) -> XrResult;
}
extern "C" {
    pub fn xrPathToString(
        instance: XrInstance,
        path: XrPath,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateActionSet(
        instance: XrInstance,
        createInfo: *const XrActionSetCreateInfo,
        actionSet: *mut XrActionSet,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroyActionSet(actionSet: XrActionSet) -> XrResult;
}
extern "C" {
    pub fn xrCreateAction(
        actionSet: XrActionSet,
        createInfo: *const XrActionCreateInfo,
        action: *mut XrAction,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroyAction(action: XrAction) -> XrResult;
}
extern "C" {
    pub fn xrSuggestInteractionProfileBindings(
        instance: XrInstance,
        suggestedBindings: *const XrInteractionProfileSuggestedBinding,
    ) -> XrResult;
}
extern "C" {
    pub fn xrAttachSessionActionSets(
        session: XrSession,
        attachInfo: *const XrSessionActionSetsAttachInfo,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetCurrentInteractionProfile(
        session: XrSession,
        topLevelUserPath: XrPath,
        interactionProfile: *mut XrInteractionProfileState,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetActionStateBoolean(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateBoolean,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetActionStateFloat(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateFloat,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetActionStateVector2f(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateVector2f,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetActionStatePose(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStatePose,
    ) -> XrResult;
}
extern "C" {
    pub fn xrSyncActions(session: XrSession, syncInfo: *const XrActionsSyncInfo) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateBoundSourcesForAction(
        session: XrSession,
        enumerateInfo: *const XrBoundSourcesForActionEnumerateInfo,
        sourceCapacityInput: u32,
        sourceCountOutput: *mut u32,
        sources: *mut XrPath,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetInputSourceLocalizedName(
        session: XrSession,
        getInfo: *const XrInputSourceLocalizedNameGetInfo,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult;
}
extern "C" {
    pub fn xrApplyHapticFeedback(
        session: XrSession,
        hapticActionInfo: *const XrHapticActionInfo,
        hapticFeedback: *const XrHapticBaseHeader,
    ) -> XrResult;
}
extern "C" {
    pub fn xrStopHapticFeedback(
        session: XrSession,
        hapticActionInfo: *const XrHapticActionInfo,
    ) -> XrResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrColor3f {
    pub r: f32,
    pub g: f32,
    pub b: f32,
}
#[test]
fn bindgen_test_layout_XrColor3f() {
    const UNINIT: ::std::mem::MaybeUninit<XrColor3f> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrColor3f>(),
        12usize,
        concat!("Size of: ", stringify!(XrColor3f))
    );
    assert_eq!(
        ::std::mem::align_of::<XrColor3f>(),
        4usize,
        concat!("Alignment of ", stringify!(XrColor3f))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrColor3f),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrColor3f),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrColor3f),
            "::",
            stringify!(b)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExtent3Df {
    pub width: f32,
    pub height: f32,
    pub depth: f32,
}
#[test]
fn bindgen_test_layout_XrExtent3Df() {
    const UNINIT: ::std::mem::MaybeUninit<XrExtent3Df> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrExtent3Df>(),
        12usize,
        concat!("Size of: ", stringify!(XrExtent3Df))
    );
    assert_eq!(
        ::std::mem::align_of::<XrExtent3Df>(),
        4usize,
        concat!("Alignment of ", stringify!(XrExtent3Df))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtent3Df),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtent3Df),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtent3Df),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpheref {
    pub center: XrPosef,
    pub radius: f32,
}
#[test]
fn bindgen_test_layout_XrSpheref() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpheref> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpheref>(),
        32usize,
        concat!("Size of: ", stringify!(XrSpheref))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpheref>(),
        4usize,
        concat!("Alignment of ", stringify!(XrSpheref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpheref),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpheref),
            "::",
            stringify!(radius)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBoxf {
    pub center: XrPosef,
    pub extents: XrExtent3Df,
}
#[test]
fn bindgen_test_layout_XrBoxf() {
    const UNINIT: ::std::mem::MaybeUninit<XrBoxf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBoxf>(),
        40usize,
        concat!("Size of: ", stringify!(XrBoxf))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBoxf>(),
        4usize,
        concat!("Alignment of ", stringify!(XrBoxf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoxf),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoxf),
            "::",
            stringify!(extents)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrustumf {
    pub pose: XrPosef,
    pub fov: XrFovf,
    pub nearZ: f32,
    pub farZ: f32,
}
#[test]
fn bindgen_test_layout_XrFrustumf() {
    const UNINIT: ::std::mem::MaybeUninit<XrFrustumf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFrustumf>(),
        52usize,
        concat!("Size of: ", stringify!(XrFrustumf))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFrustumf>(),
        4usize,
        concat!("Alignment of ", stringify!(XrFrustumf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrustumf),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fov) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrustumf),
            "::",
            stringify!(fov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nearZ) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrustumf),
            "::",
            stringify!(nearZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).farZ) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrustumf),
            "::",
            stringify!(farZ)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrUuid {
    pub data: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_XrUuid() {
    const UNINIT: ::std::mem::MaybeUninit<XrUuid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrUuid>(),
        16usize,
        concat!("Size of: ", stringify!(XrUuid))
    );
    assert_eq!(
        ::std::mem::align_of::<XrUuid>(),
        1usize,
        concat!("Alignment of ", stringify!(XrUuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrUuid),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpacesLocateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
    pub spaceCount: u32,
    pub spaces: *const XrSpace,
}
#[test]
fn bindgen_test_layout_XrSpacesLocateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpacesLocateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpacesLocateInfo>(),
        48usize,
        concat!("Size of: ", stringify!(XrSpacesLocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpacesLocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpacesLocateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpacesLocateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpacesLocateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseSpace) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpacesLocateInfo),
            "::",
            stringify!(baseSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpacesLocateInfo),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaceCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpacesLocateInfo),
            "::",
            stringify!(spaceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaces) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpacesLocateInfo),
            "::",
            stringify!(spaces)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceLocationData {
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
}
#[test]
fn bindgen_test_layout_XrSpaceLocationData() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceLocationData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceLocationData>(),
        40usize,
        concat!("Size of: ", stringify!(XrSpaceLocationData))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceLocationData>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceLocationData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locationFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocationData),
            "::",
            stringify!(locationFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocationData),
            "::",
            stringify!(pose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceLocations {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub locationCount: u32,
    pub locations: *mut XrSpaceLocationData,
}
#[test]
fn bindgen_test_layout_XrSpaceLocations() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceLocations> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceLocations>(),
        32usize,
        concat!("Size of: ", stringify!(XrSpaceLocations))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceLocations>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceLocations))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocations),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocations),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locationCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocations),
            "::",
            stringify!(locationCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locations) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocations),
            "::",
            stringify!(locations)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceVelocityData {
    pub velocityFlags: XrSpaceVelocityFlags,
    pub linearVelocity: XrVector3f,
    pub angularVelocity: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrSpaceVelocityData() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceVelocityData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceVelocityData>(),
        32usize,
        concat!("Size of: ", stringify!(XrSpaceVelocityData))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceVelocityData>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceVelocityData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).velocityFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocityData),
            "::",
            stringify!(velocityFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linearVelocity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocityData),
            "::",
            stringify!(linearVelocity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angularVelocity) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocityData),
            "::",
            stringify!(angularVelocity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceVelocities {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub velocityCount: u32,
    pub velocities: *mut XrSpaceVelocityData,
}
#[test]
fn bindgen_test_layout_XrSpaceVelocities() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceVelocities> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceVelocities>(),
        32usize,
        concat!("Size of: ", stringify!(XrSpaceVelocities))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceVelocities>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceVelocities))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocities),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocities),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).velocityCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocities),
            "::",
            stringify!(velocityCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).velocities) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocities),
            "::",
            stringify!(velocities)
        )
    );
}
pub type PFN_xrLocateSpaces = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        locateInfo: *const XrSpacesLocateInfo,
        spaceLocations: *mut XrSpaceLocations,
    ) -> XrResult,
>;
extern "C" {
    pub fn xrLocateSpaces(
        session: XrSession,
        locateInfo: *const XrSpacesLocateInfo,
        spaceLocations: *mut XrSpaceLocations,
    ) -> XrResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerCubeKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub swapchain: XrSwapchain,
    pub imageArrayIndex: u32,
    pub orientation: XrQuaternionf,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerCubeKHR() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerCubeKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerCubeKHR>(),
        72usize,
        concat!("Size of: ", stringify!(XrCompositionLayerCubeKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerCubeKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerCubeKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eyeVisibility) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(eyeVisibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchain) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(swapchain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageArrayIndex) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(imageArrayIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(orientation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerDepthInfoKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub subImage: XrSwapchainSubImage,
    pub minDepth: f32,
    pub maxDepth: f32,
    pub nearZ: f32,
    pub farZ: f32,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerDepthInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerDepthInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerDepthInfoKHR>(),
        64usize,
        concat!("Size of: ", stringify!(XrCompositionLayerDepthInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerDepthInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerDepthInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(subImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minDepth) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(minDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDepth) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(maxDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nearZ) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(nearZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).farZ) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(farZ)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerCylinderKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub subImage: XrSwapchainSubImage,
    pub pose: XrPosef,
    pub radius: f32,
    pub centralAngle: f32,
    pub aspectRatio: f32,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerCylinderKHR() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerCylinderKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerCylinderKHR>(),
        112usize,
        concat!("Size of: ", stringify!(XrCompositionLayerCylinderKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerCylinderKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerCylinderKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eyeVisibility) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(eyeVisibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subImage) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(subImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).centralAngle) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(centralAngle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspectRatio) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(aspectRatio)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerEquirectKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub subImage: XrSwapchainSubImage,
    pub pose: XrPosef,
    pub radius: f32,
    pub scale: XrVector2f,
    pub bias: XrVector2f,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerEquirectKHR() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerEquirectKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerEquirectKHR>(),
        120usize,
        concat!("Size of: ", stringify!(XrCompositionLayerEquirectKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerEquirectKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerEquirectKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eyeVisibility) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(eyeVisibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subImage) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(subImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bias) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(bias)
        )
    );
}
pub const XrVisibilityMaskTypeKHR_XR_VISIBILITY_MASK_TYPE_HIDDEN_TRIANGLE_MESH_KHR:
    XrVisibilityMaskTypeKHR = 1;
pub const XrVisibilityMaskTypeKHR_XR_VISIBILITY_MASK_TYPE_VISIBLE_TRIANGLE_MESH_KHR:
    XrVisibilityMaskTypeKHR = 2;
pub const XrVisibilityMaskTypeKHR_XR_VISIBILITY_MASK_TYPE_LINE_LOOP_KHR: XrVisibilityMaskTypeKHR =
    3;
pub const XrVisibilityMaskTypeKHR_XR_VISIBILITY_MASK_TYPE_MAX_ENUM_KHR: XrVisibilityMaskTypeKHR =
    2147483647;
pub type XrVisibilityMaskTypeKHR = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVisibilityMaskKHR {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrVector2f,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut u32,
}
#[test]
fn bindgen_test_layout_XrVisibilityMaskKHR() {
    const UNINIT: ::std::mem::MaybeUninit<XrVisibilityMaskKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVisibilityMaskKHR>(),
        48usize,
        concat!("Size of: ", stringify!(XrVisibilityMaskKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVisibilityMaskKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrVisibilityMaskKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(vertexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(vertexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(vertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCapacityInput) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(indexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCountOutput) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(indexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indices) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(indices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVisibilityMaskChangedKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub viewConfigurationType: XrViewConfigurationType,
    pub viewIndex: u32,
}
#[test]
fn bindgen_test_layout_XrEventDataVisibilityMaskChangedKHR() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataVisibilityMaskChangedKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataVisibilityMaskChangedKHR>(),
        32usize,
        concat!("Size of: ", stringify!(XrEventDataVisibilityMaskChangedKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataVisibilityMaskChangedKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataVisibilityMaskChangedKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVisibilityMaskChangedKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVisibilityMaskChangedKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVisibilityMaskChangedKHR),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewConfigurationType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVisibilityMaskChangedKHR),
            "::",
            stringify!(viewConfigurationType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewIndex) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVisibilityMaskChangedKHR),
            "::",
            stringify!(viewIndex)
        )
    );
}
pub type PFN_xrGetVisibilityMaskKHR = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        viewConfigurationType: XrViewConfigurationType,
        viewIndex: u32,
        visibilityMaskType: XrVisibilityMaskTypeKHR,
        visibilityMask: *mut XrVisibilityMaskKHR,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerColorScaleBiasKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub colorScale: XrColor4f,
    pub colorBias: XrColor4f,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerColorScaleBiasKHR() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerColorScaleBiasKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerColorScaleBiasKHR>(),
        48usize,
        concat!("Size of: ", stringify!(XrCompositionLayerColorScaleBiasKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerColorScaleBiasKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrCompositionLayerColorScaleBiasKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerColorScaleBiasKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerColorScaleBiasKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorScale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerColorScaleBiasKHR),
            "::",
            stringify!(colorScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorBias) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerColorScaleBiasKHR),
            "::",
            stringify!(colorBias)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLoaderInitInfoBaseHeaderKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrLoaderInitInfoBaseHeaderKHR() {
    const UNINIT: ::std::mem::MaybeUninit<XrLoaderInitInfoBaseHeaderKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrLoaderInitInfoBaseHeaderKHR>(),
        16usize,
        concat!("Size of: ", stringify!(XrLoaderInitInfoBaseHeaderKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrLoaderInitInfoBaseHeaderKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrLoaderInitInfoBaseHeaderKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLoaderInitInfoBaseHeaderKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLoaderInitInfoBaseHeaderKHR),
            "::",
            stringify!(next)
        )
    );
}
pub type PFN_xrInitializeLoaderKHR = ::std::option::Option<
    unsafe extern "C" fn(loaderInitInfo: *const XrLoaderInitInfoBaseHeaderKHR) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerEquirect2KHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub subImage: XrSwapchainSubImage,
    pub pose: XrPosef,
    pub radius: f32,
    pub centralHorizontalAngle: f32,
    pub upperVerticalAngle: f32,
    pub lowerVerticalAngle: f32,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerEquirect2KHR() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerEquirect2KHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerEquirect2KHR>(),
        120usize,
        concat!("Size of: ", stringify!(XrCompositionLayerEquirect2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerEquirect2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerEquirect2KHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eyeVisibility) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(eyeVisibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subImage) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(subImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).centralHorizontalAngle) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(centralHorizontalAngle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upperVerticalAngle) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(upperVerticalAngle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lowerVerticalAngle) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(lowerVerticalAngle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBindingModificationBaseHeaderKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrBindingModificationBaseHeaderKHR() {
    const UNINIT: ::std::mem::MaybeUninit<XrBindingModificationBaseHeaderKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBindingModificationBaseHeaderKHR>(),
        16usize,
        concat!("Size of: ", stringify!(XrBindingModificationBaseHeaderKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBindingModificationBaseHeaderKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrBindingModificationBaseHeaderKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBindingModificationBaseHeaderKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBindingModificationBaseHeaderKHR),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBindingModificationsKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub bindingModificationCount: u32,
    pub bindingModifications: *const *const XrBindingModificationBaseHeaderKHR,
}
#[test]
fn bindgen_test_layout_XrBindingModificationsKHR() {
    const UNINIT: ::std::mem::MaybeUninit<XrBindingModificationsKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBindingModificationsKHR>(),
        32usize,
        concat!("Size of: ", stringify!(XrBindingModificationsKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBindingModificationsKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrBindingModificationsKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBindingModificationsKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBindingModificationsKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindingModificationCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBindingModificationsKHR),
            "::",
            stringify!(bindingModificationCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindingModifications) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBindingModificationsKHR),
            "::",
            stringify!(bindingModifications)
        )
    );
}
pub type XrSpacesLocateInfoKHR = XrSpacesLocateInfo;
pub type XrSpaceLocationDataKHR = XrSpaceLocationData;
pub type XrSpaceLocationsKHR = XrSpaceLocations;
pub type XrSpaceVelocityDataKHR = XrSpaceVelocityData;
pub type XrSpaceVelocitiesKHR = XrSpaceVelocities;
pub type PFN_xrLocateSpacesKHR = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        locateInfo: *const XrSpacesLocateInfo,
        spaceLocations: *mut XrSpaceLocations,
    ) -> XrResult,
>;
pub type XrColor3fKHR = XrColor3f;
pub type XrExtent3DfKHR = XrExtent3Df;
pub type XrSpherefKHR = XrSpheref;
pub type XrBoxfKHR = XrBoxf;
pub type XrFrustumfKHR = XrFrustumf;
pub const XrPerfSettingsDomainEXT_XR_PERF_SETTINGS_DOMAIN_CPU_EXT: XrPerfSettingsDomainEXT = 1;
pub const XrPerfSettingsDomainEXT_XR_PERF_SETTINGS_DOMAIN_GPU_EXT: XrPerfSettingsDomainEXT = 2;
pub const XrPerfSettingsDomainEXT_XR_PERF_SETTINGS_DOMAIN_MAX_ENUM_EXT: XrPerfSettingsDomainEXT =
    2147483647;
pub type XrPerfSettingsDomainEXT = ::std::os::raw::c_int;
pub const XrPerfSettingsSubDomainEXT_XR_PERF_SETTINGS_SUB_DOMAIN_COMPOSITING_EXT:
    XrPerfSettingsSubDomainEXT = 1;
pub const XrPerfSettingsSubDomainEXT_XR_PERF_SETTINGS_SUB_DOMAIN_RENDERING_EXT:
    XrPerfSettingsSubDomainEXT = 2;
pub const XrPerfSettingsSubDomainEXT_XR_PERF_SETTINGS_SUB_DOMAIN_THERMAL_EXT:
    XrPerfSettingsSubDomainEXT = 3;
pub const XrPerfSettingsSubDomainEXT_XR_PERF_SETTINGS_SUB_DOMAIN_MAX_ENUM_EXT:
    XrPerfSettingsSubDomainEXT = 2147483647;
pub type XrPerfSettingsSubDomainEXT = ::std::os::raw::c_int;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_POWER_SAVINGS_EXT: XrPerfSettingsLevelEXT =
    0;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_SUSTAINED_LOW_EXT: XrPerfSettingsLevelEXT =
    25;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_SUSTAINED_HIGH_EXT: XrPerfSettingsLevelEXT =
    50;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_BOOST_EXT: XrPerfSettingsLevelEXT = 75;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_MAX_ENUM_EXT: XrPerfSettingsLevelEXT =
    2147483647;
pub type XrPerfSettingsLevelEXT = ::std::os::raw::c_int;
pub const XrPerfSettingsNotificationLevelEXT_XR_PERF_SETTINGS_NOTIF_LEVEL_NORMAL_EXT:
    XrPerfSettingsNotificationLevelEXT = 0;
pub const XrPerfSettingsNotificationLevelEXT_XR_PERF_SETTINGS_NOTIF_LEVEL_WARNING_EXT:
    XrPerfSettingsNotificationLevelEXT = 25;
pub const XrPerfSettingsNotificationLevelEXT_XR_PERF_SETTINGS_NOTIF_LEVEL_IMPAIRED_EXT:
    XrPerfSettingsNotificationLevelEXT = 75;
pub const XrPerfSettingsNotificationLevelEXT_XR_PERF_SETTINGS_NOTIFICATION_LEVEL_MAX_ENUM_EXT:
    XrPerfSettingsNotificationLevelEXT = 2147483647;
pub type XrPerfSettingsNotificationLevelEXT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataPerfSettingsEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub domain: XrPerfSettingsDomainEXT,
    pub subDomain: XrPerfSettingsSubDomainEXT,
    pub fromLevel: XrPerfSettingsNotificationLevelEXT,
    pub toLevel: XrPerfSettingsNotificationLevelEXT,
}
#[test]
fn bindgen_test_layout_XrEventDataPerfSettingsEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataPerfSettingsEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataPerfSettingsEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrEventDataPerfSettingsEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataPerfSettingsEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataPerfSettingsEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPerfSettingsEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPerfSettingsEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPerfSettingsEXT),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subDomain) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPerfSettingsEXT),
            "::",
            stringify!(subDomain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fromLevel) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPerfSettingsEXT),
            "::",
            stringify!(fromLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toLevel) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPerfSettingsEXT),
            "::",
            stringify!(toLevel)
        )
    );
}
pub type PFN_xrPerfSettingsSetPerformanceLevelEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        domain: XrPerfSettingsDomainEXT,
        level: XrPerfSettingsLevelEXT,
    ) -> XrResult,
>;
pub type PFN_xrThermalGetTemperatureTrendEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        domain: XrPerfSettingsDomainEXT,
        notificationLevel: *mut XrPerfSettingsNotificationLevelEXT,
        tempHeadroom: *mut f32,
        tempSlope: *mut f32,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsMessengerEXT_T {
    _unused: [u8; 0],
}
pub type XrDebugUtilsMessengerEXT = *mut XrDebugUtilsMessengerEXT_T;
pub type XrDebugUtilsMessageSeverityFlagsEXT = XrFlags64;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = 1;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = 16;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT =
    256;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = 4096;
pub type XrDebugUtilsMessageTypeFlagsEXT = XrFlags64;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 1;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 2;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 4;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_CONFORMANCE_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsObjectNameInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub objectType: XrObjectType,
    pub objectHandle: u64,
    pub objectName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XrDebugUtilsObjectNameInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrDebugUtilsObjectNameInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrDebugUtilsObjectNameInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(XrDebugUtilsObjectNameInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrDebugUtilsObjectNameInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrDebugUtilsObjectNameInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectHandle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(objectHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(objectName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsLabelEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub labelName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XrDebugUtilsLabelEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrDebugUtilsLabelEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrDebugUtilsLabelEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrDebugUtilsLabelEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrDebugUtilsLabelEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrDebugUtilsLabelEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsLabelEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsLabelEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).labelName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsLabelEXT),
            "::",
            stringify!(labelName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsMessengerCallbackDataEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub messageId: *const ::std::os::raw::c_char,
    pub functionName: *const ::std::os::raw::c_char,
    pub message: *const ::std::os::raw::c_char,
    pub objectCount: u32,
    pub objects: *mut XrDebugUtilsObjectNameInfoEXT,
    pub sessionLabelCount: u32,
    pub sessionLabels: *mut XrDebugUtilsLabelEXT,
}
#[test]
fn bindgen_test_layout_XrDebugUtilsMessengerCallbackDataEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrDebugUtilsMessengerCallbackDataEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrDebugUtilsMessengerCallbackDataEXT>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrDebugUtilsMessengerCallbackDataEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(messageId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(functionName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(objectCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objects) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(objects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sessionLabelCount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(sessionLabelCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sessionLabels) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(sessionLabels)
        )
    );
}
pub type PFN_xrDebugUtilsMessengerCallbackEXT = ::std::option::Option<
    unsafe extern "C" fn(
        messageSeverity: XrDebugUtilsMessageSeverityFlagsEXT,
        messageTypes: XrDebugUtilsMessageTypeFlagsEXT,
        callbackData: *const XrDebugUtilsMessengerCallbackDataEXT,
        userData: *mut ::std::os::raw::c_void,
    ) -> XrBool32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsMessengerCreateInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub messageSeverities: XrDebugUtilsMessageSeverityFlagsEXT,
    pub messageTypes: XrDebugUtilsMessageTypeFlagsEXT,
    pub userCallback: PFN_xrDebugUtilsMessengerCallbackEXT,
    pub userData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrDebugUtilsMessengerCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrDebugUtilsMessengerCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrDebugUtilsMessengerCreateInfoEXT>(),
        48usize,
        concat!("Size of: ", stringify!(XrDebugUtilsMessengerCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrDebugUtilsMessengerCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageSeverities) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(messageSeverities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageTypes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(messageTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userCallback) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(userCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(userData)
        )
    );
}
pub type PFN_xrSetDebugUtilsObjectNameEXT = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        nameInfo: *const XrDebugUtilsObjectNameInfoEXT,
    ) -> XrResult,
>;
pub type PFN_xrCreateDebugUtilsMessengerEXT = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        createInfo: *const XrDebugUtilsMessengerCreateInfoEXT,
        messenger: *mut XrDebugUtilsMessengerEXT,
    ) -> XrResult,
>;
pub type PFN_xrDestroyDebugUtilsMessengerEXT =
    ::std::option::Option<unsafe extern "C" fn(messenger: XrDebugUtilsMessengerEXT) -> XrResult>;
pub type PFN_xrSubmitDebugUtilsMessageEXT = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        messageSeverity: XrDebugUtilsMessageSeverityFlagsEXT,
        messageTypes: XrDebugUtilsMessageTypeFlagsEXT,
        callbackData: *const XrDebugUtilsMessengerCallbackDataEXT,
    ) -> XrResult,
>;
pub type PFN_xrSessionBeginDebugUtilsLabelRegionEXT = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, labelInfo: *const XrDebugUtilsLabelEXT) -> XrResult,
>;
pub type PFN_xrSessionEndDebugUtilsLabelRegionEXT =
    ::std::option::Option<unsafe extern "C" fn(session: XrSession) -> XrResult>;
pub type PFN_xrSessionInsertDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, labelInfo: *const XrDebugUtilsLabelEXT) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemEyeGazeInteractionPropertiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsEyeGazeInteraction: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemEyeGazeInteractionPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemEyeGazeInteractionPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemEyeGazeInteractionPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemEyeGazeInteractionPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemEyeGazeInteractionPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemEyeGazeInteractionPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEyeGazeInteractionPropertiesEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEyeGazeInteractionPropertiesEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsEyeGazeInteraction) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEyeGazeInteractionPropertiesEXT),
            "::",
            stringify!(supportsEyeGazeInteraction)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeGazeSampleTimeEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrEyeGazeSampleTimeEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrEyeGazeSampleTimeEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEyeGazeSampleTimeEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrEyeGazeSampleTimeEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEyeGazeSampleTimeEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEyeGazeSampleTimeEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazeSampleTimeEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazeSampleTimeEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazeSampleTimeEXT),
            "::",
            stringify!(time)
        )
    );
}
pub type XrOverlaySessionCreateFlagsEXTX = XrFlags64;
pub type XrOverlayMainSessionFlagsEXTX = XrFlags64;
pub const XR_OVERLAY_MAIN_SESSION_ENABLED_COMPOSITION_LAYER_INFO_DEPTH_BIT_EXTX:
    XrOverlayMainSessionFlagsEXTX = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSessionCreateInfoOverlayEXTX {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrOverlaySessionCreateFlagsEXTX,
    pub sessionLayersPlacement: u32,
}
#[test]
fn bindgen_test_layout_XrSessionCreateInfoOverlayEXTX() {
    const UNINIT: ::std::mem::MaybeUninit<XrSessionCreateInfoOverlayEXTX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSessionCreateInfoOverlayEXTX>(),
        32usize,
        concat!("Size of: ", stringify!(XrSessionCreateInfoOverlayEXTX))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSessionCreateInfoOverlayEXTX>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSessionCreateInfoOverlayEXTX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfoOverlayEXTX),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfoOverlayEXTX),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfoOverlayEXTX),
            "::",
            stringify!(createFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sessionLayersPlacement) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfoOverlayEXTX),
            "::",
            stringify!(sessionLayersPlacement)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataMainSessionVisibilityChangedEXTX {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub visible: XrBool32,
    pub flags: XrOverlayMainSessionFlagsEXTX,
}
#[test]
fn bindgen_test_layout_XrEventDataMainSessionVisibilityChangedEXTX() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataMainSessionVisibilityChangedEXTX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataMainSessionVisibilityChangedEXTX>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataMainSessionVisibilityChangedEXTX)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataMainSessionVisibilityChangedEXTX>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataMainSessionVisibilityChangedEXTX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMainSessionVisibilityChangedEXTX),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMainSessionVisibilityChangedEXTX),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visible) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMainSessionVisibilityChangedEXTX),
            "::",
            stringify!(visible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMainSessionVisibilityChangedEXTX),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorMSFT_T {
    _unused: [u8; 0],
}
pub type XrSpatialAnchorMSFT = *mut XrSpatialAnchorMSFT_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub pose: XrPosef,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrSpatialAnchorCreateInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpatialAnchorCreateInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpatialAnchorCreateInfoMSFT>(),
        64usize,
        concat!("Size of: ", stringify!(XrSpatialAnchorCreateInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialAnchorCreateInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpatialAnchorCreateInfoMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoMSFT),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoMSFT),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoMSFT),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorSpaceCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub anchor: XrSpatialAnchorMSFT,
    pub poseInAnchorSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrSpatialAnchorSpaceCreateInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpatialAnchorSpaceCreateInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpatialAnchorSpaceCreateInfoMSFT>(),
        56usize,
        concat!("Size of: ", stringify!(XrSpatialAnchorSpaceCreateInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialAnchorSpaceCreateInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSpatialAnchorSpaceCreateInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorSpaceCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorSpaceCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorSpaceCreateInfoMSFT),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInAnchorSpace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorSpaceCreateInfoMSFT),
            "::",
            stringify!(poseInAnchorSpace)
        )
    );
}
pub type PFN_xrCreateSpatialAnchorMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrSpatialAnchorCreateInfoMSFT,
        anchor: *mut XrSpatialAnchorMSFT,
    ) -> XrResult,
>;
pub type PFN_xrCreateSpatialAnchorSpaceMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrSpatialAnchorSpaceCreateInfoMSFT,
        space: *mut XrSpace,
    ) -> XrResult,
>;
pub type PFN_xrDestroySpatialAnchorMSFT =
    ::std::option::Option<unsafe extern "C" fn(anchor: XrSpatialAnchorMSFT) -> XrResult>;
pub type XrCompositionLayerImageLayoutFlagsFB = XrFlags64;
pub const XR_COMPOSITION_LAYER_IMAGE_LAYOUT_VERTICAL_FLIP_BIT_FB:
    XrCompositionLayerImageLayoutFlagsFB = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerImageLayoutFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub flags: XrCompositionLayerImageLayoutFlagsFB,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerImageLayoutFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerImageLayoutFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerImageLayoutFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrCompositionLayerImageLayoutFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerImageLayoutFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerImageLayoutFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerImageLayoutFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerImageLayoutFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerImageLayoutFB),
            "::",
            stringify!(flags)
        )
    );
}
pub const XrBlendFactorFB_XR_BLEND_FACTOR_ZERO_FB: XrBlendFactorFB = 0;
pub const XrBlendFactorFB_XR_BLEND_FACTOR_ONE_FB: XrBlendFactorFB = 1;
pub const XrBlendFactorFB_XR_BLEND_FACTOR_SRC_ALPHA_FB: XrBlendFactorFB = 2;
pub const XrBlendFactorFB_XR_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA_FB: XrBlendFactorFB = 3;
pub const XrBlendFactorFB_XR_BLEND_FACTOR_DST_ALPHA_FB: XrBlendFactorFB = 4;
pub const XrBlendFactorFB_XR_BLEND_FACTOR_ONE_MINUS_DST_ALPHA_FB: XrBlendFactorFB = 5;
pub const XrBlendFactorFB_XR_BLEND_FACTOR_MAX_ENUM_FB: XrBlendFactorFB = 2147483647;
pub type XrBlendFactorFB = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerAlphaBlendFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub srcFactorColor: XrBlendFactorFB,
    pub dstFactorColor: XrBlendFactorFB,
    pub srcFactorAlpha: XrBlendFactorFB,
    pub dstFactorAlpha: XrBlendFactorFB,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerAlphaBlendFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerAlphaBlendFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerAlphaBlendFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrCompositionLayerAlphaBlendFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerAlphaBlendFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerAlphaBlendFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerAlphaBlendFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerAlphaBlendFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcFactorColor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerAlphaBlendFB),
            "::",
            stringify!(srcFactorColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstFactorColor) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerAlphaBlendFB),
            "::",
            stringify!(dstFactorColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcFactorAlpha) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerAlphaBlendFB),
            "::",
            stringify!(srcFactorAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstFactorAlpha) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerAlphaBlendFB),
            "::",
            stringify!(dstFactorAlpha)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewConfigurationDepthRangeEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub recommendedNearZ: f32,
    pub minNearZ: f32,
    pub recommendedFarZ: f32,
    pub maxFarZ: f32,
}
#[test]
fn bindgen_test_layout_XrViewConfigurationDepthRangeEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrViewConfigurationDepthRangeEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrViewConfigurationDepthRangeEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrViewConfigurationDepthRangeEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewConfigurationDepthRangeEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrViewConfigurationDepthRangeEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationDepthRangeEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationDepthRangeEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recommendedNearZ) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationDepthRangeEXT),
            "::",
            stringify!(recommendedNearZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minNearZ) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationDepthRangeEXT),
            "::",
            stringify!(minNearZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recommendedFarZ) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationDepthRangeEXT),
            "::",
            stringify!(recommendedFarZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFarZ) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationDepthRangeEXT),
            "::",
            stringify!(maxFarZ)
        )
    );
}
pub type PFN_xrSetInputDeviceActiveEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        interactionProfile: XrPath,
        topLevelPath: XrPath,
        isActive: XrBool32,
    ) -> XrResult,
>;
pub type PFN_xrSetInputDeviceStateBoolEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        topLevelPath: XrPath,
        inputSourcePath: XrPath,
        state: XrBool32,
    ) -> XrResult,
>;
pub type PFN_xrSetInputDeviceStateFloatEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        topLevelPath: XrPath,
        inputSourcePath: XrPath,
        state: f32,
    ) -> XrResult,
>;
pub type PFN_xrSetInputDeviceStateVector2fEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        topLevelPath: XrPath,
        inputSourcePath: XrPath,
        state: XrVector2f,
    ) -> XrResult,
>;
pub type PFN_xrSetInputDeviceLocationEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        topLevelPath: XrPath,
        inputSourcePath: XrPath,
        space: XrSpace,
        pose: XrPosef,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialGraphNodeBindingMSFT_T {
    _unused: [u8; 0],
}
pub type XrSpatialGraphNodeBindingMSFT = *mut XrSpatialGraphNodeBindingMSFT_T;
pub const XrSpatialGraphNodeTypeMSFT_XR_SPATIAL_GRAPH_NODE_TYPE_STATIC_MSFT:
    XrSpatialGraphNodeTypeMSFT = 1;
pub const XrSpatialGraphNodeTypeMSFT_XR_SPATIAL_GRAPH_NODE_TYPE_DYNAMIC_MSFT:
    XrSpatialGraphNodeTypeMSFT = 2;
pub const XrSpatialGraphNodeTypeMSFT_XR_SPATIAL_GRAPH_NODE_TYPE_MAX_ENUM_MSFT:
    XrSpatialGraphNodeTypeMSFT = 2147483647;
pub type XrSpatialGraphNodeTypeMSFT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialGraphNodeSpaceCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub nodeType: XrSpatialGraphNodeTypeMSFT,
    pub nodeId: [u8; 16usize],
    pub pose: XrPosef,
}
#[test]
fn bindgen_test_layout_XrSpatialGraphNodeSpaceCreateInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpatialGraphNodeSpaceCreateInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpatialGraphNodeSpaceCreateInfoMSFT>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialGraphNodeSpaceCreateInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT),
            "::",
            stringify!(nodeType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeId) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT),
            "::",
            stringify!(nodeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT),
            "::",
            stringify!(pose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialGraphStaticNodeBindingCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub poseInSpace: XrPosef,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrSpatialGraphStaticNodeBindingCreateInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpatialGraphStaticNodeBindingCreateInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpatialGraphStaticNodeBindingCreateInfoMSFT>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(XrSpatialGraphStaticNodeBindingCreateInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialGraphStaticNodeBindingCreateInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSpatialGraphStaticNodeBindingCreateInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphStaticNodeBindingCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphStaticNodeBindingCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphStaticNodeBindingCreateInfoMSFT),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInSpace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphStaticNodeBindingCreateInfoMSFT),
            "::",
            stringify!(poseInSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphStaticNodeBindingCreateInfoMSFT),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialGraphNodeBindingPropertiesGetInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSpatialGraphNodeBindingPropertiesGetInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpatialGraphNodeBindingPropertiesGetInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpatialGraphNodeBindingPropertiesGetInfoMSFT>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(XrSpatialGraphNodeBindingPropertiesGetInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialGraphNodeBindingPropertiesGetInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSpatialGraphNodeBindingPropertiesGetInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeBindingPropertiesGetInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeBindingPropertiesGetInfoMSFT),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialGraphNodeBindingPropertiesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub nodeId: [u8; 16usize],
    pub poseInNodeSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrSpatialGraphNodeBindingPropertiesMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpatialGraphNodeBindingPropertiesMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpatialGraphNodeBindingPropertiesMSFT>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(XrSpatialGraphNodeBindingPropertiesMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialGraphNodeBindingPropertiesMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSpatialGraphNodeBindingPropertiesMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeBindingPropertiesMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeBindingPropertiesMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeBindingPropertiesMSFT),
            "::",
            stringify!(nodeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInNodeSpace) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeBindingPropertiesMSFT),
            "::",
            stringify!(poseInNodeSpace)
        )
    );
}
pub type PFN_xrCreateSpatialGraphNodeSpaceMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrSpatialGraphNodeSpaceCreateInfoMSFT,
        space: *mut XrSpace,
    ) -> XrResult,
>;
pub type PFN_xrTryCreateSpatialGraphStaticNodeBindingMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrSpatialGraphStaticNodeBindingCreateInfoMSFT,
        nodeBinding: *mut XrSpatialGraphNodeBindingMSFT,
    ) -> XrResult,
>;
pub type PFN_xrDestroySpatialGraphNodeBindingMSFT = ::std::option::Option<
    unsafe extern "C" fn(nodeBinding: XrSpatialGraphNodeBindingMSFT) -> XrResult,
>;
pub type PFN_xrGetSpatialGraphNodeBindingPropertiesMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        nodeBinding: XrSpatialGraphNodeBindingMSFT,
        getInfo: *const XrSpatialGraphNodeBindingPropertiesGetInfoMSFT,
        properties: *mut XrSpatialGraphNodeBindingPropertiesMSFT,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackerEXT_T {
    _unused: [u8; 0],
}
pub type XrHandTrackerEXT = *mut XrHandTrackerEXT_T;
pub const XrHandEXT_XR_HAND_LEFT_EXT: XrHandEXT = 1;
pub const XrHandEXT_XR_HAND_RIGHT_EXT: XrHandEXT = 2;
pub const XrHandEXT_XR_HAND_MAX_ENUM_EXT: XrHandEXT = 2147483647;
pub type XrHandEXT = ::std::os::raw::c_int;
pub const XrHandJointEXT_XR_HAND_JOINT_PALM_EXT: XrHandJointEXT = 0;
pub const XrHandJointEXT_XR_HAND_JOINT_WRIST_EXT: XrHandJointEXT = 1;
pub const XrHandJointEXT_XR_HAND_JOINT_THUMB_METACARPAL_EXT: XrHandJointEXT = 2;
pub const XrHandJointEXT_XR_HAND_JOINT_THUMB_PROXIMAL_EXT: XrHandJointEXT = 3;
pub const XrHandJointEXT_XR_HAND_JOINT_THUMB_DISTAL_EXT: XrHandJointEXT = 4;
pub const XrHandJointEXT_XR_HAND_JOINT_THUMB_TIP_EXT: XrHandJointEXT = 5;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_METACARPAL_EXT: XrHandJointEXT = 6;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_PROXIMAL_EXT: XrHandJointEXT = 7;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_INTERMEDIATE_EXT: XrHandJointEXT = 8;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_DISTAL_EXT: XrHandJointEXT = 9;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_TIP_EXT: XrHandJointEXT = 10;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_METACARPAL_EXT: XrHandJointEXT = 11;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_PROXIMAL_EXT: XrHandJointEXT = 12;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_INTERMEDIATE_EXT: XrHandJointEXT = 13;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_DISTAL_EXT: XrHandJointEXT = 14;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_TIP_EXT: XrHandJointEXT = 15;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_METACARPAL_EXT: XrHandJointEXT = 16;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_PROXIMAL_EXT: XrHandJointEXT = 17;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_INTERMEDIATE_EXT: XrHandJointEXT = 18;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_DISTAL_EXT: XrHandJointEXT = 19;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_TIP_EXT: XrHandJointEXT = 20;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_METACARPAL_EXT: XrHandJointEXT = 21;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_PROXIMAL_EXT: XrHandJointEXT = 22;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_INTERMEDIATE_EXT: XrHandJointEXT = 23;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_DISTAL_EXT: XrHandJointEXT = 24;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_TIP_EXT: XrHandJointEXT = 25;
pub const XrHandJointEXT_XR_HAND_JOINT_MAX_ENUM_EXT: XrHandJointEXT = 2147483647;
pub type XrHandJointEXT = ::std::os::raw::c_int;
pub const XrHandJointSetEXT_XR_HAND_JOINT_SET_DEFAULT_EXT: XrHandJointSetEXT = 0;
pub const XrHandJointSetEXT_XR_HAND_JOINT_SET_HAND_WITH_FOREARM_ULTRALEAP: XrHandJointSetEXT =
    1000149000;
pub const XrHandJointSetEXT_XR_HAND_JOINT_SET_MAX_ENUM_EXT: XrHandJointSetEXT = 2147483647;
pub type XrHandJointSetEXT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemHandTrackingPropertiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsHandTracking: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemHandTrackingPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemHandTrackingPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemHandTrackingPropertiesEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemHandTrackingPropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemHandTrackingPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemHandTrackingPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingPropertiesEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingPropertiesEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsHandTracking) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingPropertiesEXT),
            "::",
            stringify!(supportsHandTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackerCreateInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub hand: XrHandEXT,
    pub handJointSet: XrHandJointSetEXT,
}
#[test]
fn bindgen_test_layout_XrHandTrackerCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandTrackerCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandTrackerCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandTrackerCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandTrackerCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandTrackerCreateInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackerCreateInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackerCreateInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hand) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackerCreateInfoEXT),
            "::",
            stringify!(hand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handJointSet) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackerCreateInfoEXT),
            "::",
            stringify!(handJointSet)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointsLocateInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrHandJointsLocateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandJointsLocateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandJointsLocateInfoEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandJointsLocateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandJointsLocateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandJointsLocateInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsLocateInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsLocateInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseSpace) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsLocateInfoEXT),
            "::",
            stringify!(baseSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsLocateInfoEXT),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointLocationEXT {
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
    pub radius: f32,
}
#[test]
fn bindgen_test_layout_XrHandJointLocationEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandJointLocationEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandJointLocationEXT>(),
        40usize,
        concat!("Size of: ", stringify!(XrHandJointLocationEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandJointLocationEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandJointLocationEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locationFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationEXT),
            "::",
            stringify!(locationFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationEXT),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationEXT),
            "::",
            stringify!(radius)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointVelocityEXT {
    pub velocityFlags: XrSpaceVelocityFlags,
    pub linearVelocity: XrVector3f,
    pub angularVelocity: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrHandJointVelocityEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandJointVelocityEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandJointVelocityEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandJointVelocityEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandJointVelocityEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandJointVelocityEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).velocityFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocityEXT),
            "::",
            stringify!(velocityFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linearVelocity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocityEXT),
            "::",
            stringify!(linearVelocity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angularVelocity) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocityEXT),
            "::",
            stringify!(angularVelocity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointLocationsEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
    pub jointCount: u32,
    pub jointLocations: *mut XrHandJointLocationEXT,
}
#[test]
fn bindgen_test_layout_XrHandJointLocationsEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandJointLocationsEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandJointLocationsEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandJointLocationsEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandJointLocationsEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandJointLocationsEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationsEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationsEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isActive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationsEXT),
            "::",
            stringify!(isActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationsEXT),
            "::",
            stringify!(jointCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointLocations) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationsEXT),
            "::",
            stringify!(jointLocations)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointVelocitiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub jointCount: u32,
    pub jointVelocities: *mut XrHandJointVelocityEXT,
}
#[test]
fn bindgen_test_layout_XrHandJointVelocitiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandJointVelocitiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandJointVelocitiesEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandJointVelocitiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandJointVelocitiesEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandJointVelocitiesEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocitiesEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocitiesEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocitiesEXT),
            "::",
            stringify!(jointCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointVelocities) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocitiesEXT),
            "::",
            stringify!(jointVelocities)
        )
    );
}
pub type PFN_xrCreateHandTrackerEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrHandTrackerCreateInfoEXT,
        handTracker: *mut XrHandTrackerEXT,
    ) -> XrResult,
>;
pub type PFN_xrDestroyHandTrackerEXT =
    ::std::option::Option<unsafe extern "C" fn(handTracker: XrHandTrackerEXT) -> XrResult>;
pub type PFN_xrLocateHandJointsEXT = ::std::option::Option<
    unsafe extern "C" fn(
        handTracker: XrHandTrackerEXT,
        locateInfo: *const XrHandJointsLocateInfoEXT,
        locations: *mut XrHandJointLocationsEXT,
    ) -> XrResult,
>;
pub const XrHandPoseTypeMSFT_XR_HAND_POSE_TYPE_TRACKED_MSFT: XrHandPoseTypeMSFT = 0;
pub const XrHandPoseTypeMSFT_XR_HAND_POSE_TYPE_REFERENCE_OPEN_PALM_MSFT: XrHandPoseTypeMSFT = 1;
pub const XrHandPoseTypeMSFT_XR_HAND_POSE_TYPE_MAX_ENUM_MSFT: XrHandPoseTypeMSFT = 2147483647;
pub type XrHandPoseTypeMSFT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemHandTrackingMeshPropertiesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsHandTrackingMesh: XrBool32,
    pub maxHandMeshIndexCount: u32,
    pub maxHandMeshVertexCount: u32,
}
#[test]
fn bindgen_test_layout_XrSystemHandTrackingMeshPropertiesMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemHandTrackingMeshPropertiesMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemHandTrackingMeshPropertiesMSFT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemHandTrackingMeshPropertiesMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsHandTrackingMesh) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT),
            "::",
            stringify!(supportsHandTrackingMesh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxHandMeshIndexCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT),
            "::",
            stringify!(maxHandMeshIndexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxHandMeshVertexCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT),
            "::",
            stringify!(maxHandMeshVertexCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshSpaceCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub handPoseType: XrHandPoseTypeMSFT,
    pub poseInHandMeshSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrHandMeshSpaceCreateInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandMeshSpaceCreateInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandMeshSpaceCreateInfoMSFT>(),
        48usize,
        concat!("Size of: ", stringify!(XrHandMeshSpaceCreateInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandMeshSpaceCreateInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandMeshSpaceCreateInfoMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshSpaceCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshSpaceCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handPoseType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshSpaceCreateInfoMSFT),
            "::",
            stringify!(handPoseType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInHandMeshSpace) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshSpaceCreateInfoMSFT),
            "::",
            stringify!(poseInHandMeshSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshUpdateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub time: XrTime,
    pub handPoseType: XrHandPoseTypeMSFT,
}
#[test]
fn bindgen_test_layout_XrHandMeshUpdateInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandMeshUpdateInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandMeshUpdateInfoMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandMeshUpdateInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandMeshUpdateInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandMeshUpdateInfoMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshUpdateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshUpdateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshUpdateInfoMSFT),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handPoseType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshUpdateInfoMSFT),
            "::",
            stringify!(handPoseType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshIndexBufferMSFT {
    pub indexBufferKey: u32,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut u32,
}
#[test]
fn bindgen_test_layout_XrHandMeshIndexBufferMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandMeshIndexBufferMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandMeshIndexBufferMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandMeshIndexBufferMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandMeshIndexBufferMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandMeshIndexBufferMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexBufferKey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshIndexBufferMSFT),
            "::",
            stringify!(indexBufferKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCapacityInput) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshIndexBufferMSFT),
            "::",
            stringify!(indexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCountOutput) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshIndexBufferMSFT),
            "::",
            stringify!(indexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indices) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshIndexBufferMSFT),
            "::",
            stringify!(indices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshVertexMSFT {
    pub position: XrVector3f,
    pub normal: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrHandMeshVertexMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandMeshVertexMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandMeshVertexMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandMeshVertexMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandMeshVertexMSFT>(),
        4usize,
        concat!("Alignment of ", stringify!(XrHandMeshVertexMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshVertexMSFT),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normal) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshVertexMSFT),
            "::",
            stringify!(normal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshVertexBufferMSFT {
    pub vertexUpdateTime: XrTime,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrHandMeshVertexMSFT,
}
#[test]
fn bindgen_test_layout_XrHandMeshVertexBufferMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandMeshVertexBufferMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandMeshVertexBufferMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandMeshVertexBufferMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandMeshVertexBufferMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandMeshVertexBufferMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexUpdateTime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshVertexBufferMSFT),
            "::",
            stringify!(vertexUpdateTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCapacityInput) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshVertexBufferMSFT),
            "::",
            stringify!(vertexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCountOutput) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshVertexBufferMSFT),
            "::",
            stringify!(vertexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertices) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshVertexBufferMSFT),
            "::",
            stringify!(vertices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
    pub indexBufferChanged: XrBool32,
    pub vertexBufferChanged: XrBool32,
    pub indexBuffer: XrHandMeshIndexBufferMSFT,
    pub vertexBuffer: XrHandMeshVertexBufferMSFT,
}
#[test]
fn bindgen_test_layout_XrHandMeshMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandMeshMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandMeshMSFT>(),
        80usize,
        concat!("Size of: ", stringify!(XrHandMeshMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandMeshMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandMeshMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isActive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(isActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexBufferChanged) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(indexBufferChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexBufferChanged) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(vertexBufferChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexBuffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(indexBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexBuffer) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(vertexBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandPoseTypeInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub handPoseType: XrHandPoseTypeMSFT,
}
#[test]
fn bindgen_test_layout_XrHandPoseTypeInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandPoseTypeInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandPoseTypeInfoMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandPoseTypeInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandPoseTypeInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandPoseTypeInfoMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandPoseTypeInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandPoseTypeInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handPoseType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandPoseTypeInfoMSFT),
            "::",
            stringify!(handPoseType)
        )
    );
}
pub type PFN_xrCreateHandMeshSpaceMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        handTracker: XrHandTrackerEXT,
        createInfo: *const XrHandMeshSpaceCreateInfoMSFT,
        space: *mut XrSpace,
    ) -> XrResult,
>;
pub type PFN_xrUpdateHandMeshMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        handTracker: XrHandTrackerEXT,
        updateInfo: *const XrHandMeshUpdateInfoMSFT,
        handMesh: *mut XrHandMeshMSFT,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationSessionBeginInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationCount: u32,
    pub enabledViewConfigurationTypes: *const XrViewConfigurationType,
}
#[test]
fn bindgen_test_layout_XrSecondaryViewConfigurationSessionBeginInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSecondaryViewConfigurationSessionBeginInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSecondaryViewConfigurationSessionBeginInfoMSFT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrSecondaryViewConfigurationSessionBeginInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSecondaryViewConfigurationSessionBeginInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSecondaryViewConfigurationSessionBeginInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSessionBeginInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSessionBeginInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewConfigurationCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSessionBeginInfoMSFT),
            "::",
            stringify!(viewConfigurationCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).enabledViewConfigurationTypes) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSessionBeginInfoMSFT),
            "::",
            stringify!(enabledViewConfigurationTypes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
    pub active: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSecondaryViewConfigurationStateMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSecondaryViewConfigurationStateMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSecondaryViewConfigurationStateMSFT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSecondaryViewConfigurationStateMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSecondaryViewConfigurationStateMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSecondaryViewConfigurationStateMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationStateMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationStateMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewConfigurationType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationStateMSFT),
            "::",
            stringify!(viewConfigurationType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationStateMSFT),
            "::",
            stringify!(active)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationFrameStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub viewConfigurationCount: u32,
    pub viewConfigurationStates: *mut XrSecondaryViewConfigurationStateMSFT,
}
#[test]
fn bindgen_test_layout_XrSecondaryViewConfigurationFrameStateMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSecondaryViewConfigurationFrameStateMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSecondaryViewConfigurationFrameStateMSFT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrSecondaryViewConfigurationFrameStateMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSecondaryViewConfigurationFrameStateMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSecondaryViewConfigurationFrameStateMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameStateMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameStateMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewConfigurationCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameStateMSFT),
            "::",
            stringify!(viewConfigurationCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewConfigurationStates) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameStateMSFT),
            "::",
            stringify!(viewConfigurationStates)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationLayerInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
    pub environmentBlendMode: XrEnvironmentBlendMode,
    pub layerCount: u32,
    pub layers: *const *const XrCompositionLayerBaseHeader,
}
#[test]
fn bindgen_test_layout_XrSecondaryViewConfigurationLayerInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSecondaryViewConfigurationLayerInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSecondaryViewConfigurationLayerInfoMSFT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSecondaryViewConfigurationLayerInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewConfigurationType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT),
            "::",
            stringify!(viewConfigurationType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).environmentBlendMode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT),
            "::",
            stringify!(environmentBlendMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT),
            "::",
            stringify!(layerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layers) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT),
            "::",
            stringify!(layers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationFrameEndInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationCount: u32,
    pub viewConfigurationLayersInfo: *const XrSecondaryViewConfigurationLayerInfoMSFT,
}
#[test]
fn bindgen_test_layout_XrSecondaryViewConfigurationFrameEndInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSecondaryViewConfigurationFrameEndInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSecondaryViewConfigurationFrameEndInfoMSFT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrSecondaryViewConfigurationFrameEndInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSecondaryViewConfigurationFrameEndInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSecondaryViewConfigurationFrameEndInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameEndInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameEndInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewConfigurationCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameEndInfoMSFT),
            "::",
            stringify!(viewConfigurationCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewConfigurationLayersInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameEndInfoMSFT),
            "::",
            stringify!(viewConfigurationLayersInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationSwapchainCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
}
#[test]
fn bindgen_test_layout_XrSecondaryViewConfigurationSwapchainCreateInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSecondaryViewConfigurationSwapchainCreateInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSecondaryViewConfigurationSwapchainCreateInfoMSFT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSecondaryViewConfigurationSwapchainCreateInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewConfigurationType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT),
            "::",
            stringify!(viewConfigurationType)
        )
    );
}
pub type XrControllerModelKeyMSFT = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelKeyStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub modelKey: XrControllerModelKeyMSFT,
}
#[test]
fn bindgen_test_layout_XrControllerModelKeyStateMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrControllerModelKeyStateMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrControllerModelKeyStateMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrControllerModelKeyStateMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrControllerModelKeyStateMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrControllerModelKeyStateMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelKeyStateMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelKeyStateMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modelKey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelKeyStateMSFT),
            "::",
            stringify!(modelKey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelNodePropertiesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub parentNodeName: [::std::os::raw::c_char; 64usize],
    pub nodeName: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_XrControllerModelNodePropertiesMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrControllerModelNodePropertiesMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrControllerModelNodePropertiesMSFT>(),
        144usize,
        concat!("Size of: ", stringify!(XrControllerModelNodePropertiesMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrControllerModelNodePropertiesMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrControllerModelNodePropertiesMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodePropertiesMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodePropertiesMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parentNodeName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodePropertiesMSFT),
            "::",
            stringify!(parentNodeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeName) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodePropertiesMSFT),
            "::",
            stringify!(nodeName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelPropertiesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub nodeCapacityInput: u32,
    pub nodeCountOutput: u32,
    pub nodeProperties: *mut XrControllerModelNodePropertiesMSFT,
}
#[test]
fn bindgen_test_layout_XrControllerModelPropertiesMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrControllerModelPropertiesMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrControllerModelPropertiesMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrControllerModelPropertiesMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrControllerModelPropertiesMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrControllerModelPropertiesMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelPropertiesMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelPropertiesMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelPropertiesMSFT),
            "::",
            stringify!(nodeCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelPropertiesMSFT),
            "::",
            stringify!(nodeCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeProperties) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelPropertiesMSFT),
            "::",
            stringify!(nodeProperties)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelNodeStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub nodePose: XrPosef,
}
#[test]
fn bindgen_test_layout_XrControllerModelNodeStateMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrControllerModelNodeStateMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrControllerModelNodeStateMSFT>(),
        48usize,
        concat!("Size of: ", stringify!(XrControllerModelNodeStateMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrControllerModelNodeStateMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrControllerModelNodeStateMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodeStateMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodeStateMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodePose) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodeStateMSFT),
            "::",
            stringify!(nodePose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub nodeCapacityInput: u32,
    pub nodeCountOutput: u32,
    pub nodeStates: *mut XrControllerModelNodeStateMSFT,
}
#[test]
fn bindgen_test_layout_XrControllerModelStateMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrControllerModelStateMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrControllerModelStateMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrControllerModelStateMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrControllerModelStateMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrControllerModelStateMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelStateMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelStateMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelStateMSFT),
            "::",
            stringify!(nodeCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelStateMSFT),
            "::",
            stringify!(nodeCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeStates) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelStateMSFT),
            "::",
            stringify!(nodeStates)
        )
    );
}
pub type PFN_xrGetControllerModelKeyMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        topLevelUserPath: XrPath,
        controllerModelKeyState: *mut XrControllerModelKeyStateMSFT,
    ) -> XrResult,
>;
pub type PFN_xrLoadControllerModelMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        modelKey: XrControllerModelKeyMSFT,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut u8,
    ) -> XrResult,
>;
pub type PFN_xrGetControllerModelPropertiesMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        modelKey: XrControllerModelKeyMSFT,
        properties: *mut XrControllerModelPropertiesMSFT,
    ) -> XrResult,
>;
pub type PFN_xrGetControllerModelStateMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        modelKey: XrControllerModelKeyMSFT,
        state: *mut XrControllerModelStateMSFT,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewConfigurationViewFovEPIC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub recommendedFov: XrFovf,
    pub maxMutableFov: XrFovf,
}
#[test]
fn bindgen_test_layout_XrViewConfigurationViewFovEPIC() {
    const UNINIT: ::std::mem::MaybeUninit<XrViewConfigurationViewFovEPIC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrViewConfigurationViewFovEPIC>(),
        48usize,
        concat!("Size of: ", stringify!(XrViewConfigurationViewFovEPIC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewConfigurationViewFovEPIC>(),
        8usize,
        concat!("Alignment of ", stringify!(XrViewConfigurationViewFovEPIC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationViewFovEPIC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationViewFovEPIC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recommendedFov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationViewFovEPIC),
            "::",
            stringify!(recommendedFov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMutableFov) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationViewFovEPIC),
            "::",
            stringify!(maxMutableFov)
        )
    );
}
pub const XrReprojectionModeMSFT_XR_REPROJECTION_MODE_DEPTH_MSFT: XrReprojectionModeMSFT = 1;
pub const XrReprojectionModeMSFT_XR_REPROJECTION_MODE_PLANAR_FROM_DEPTH_MSFT:
    XrReprojectionModeMSFT = 2;
pub const XrReprojectionModeMSFT_XR_REPROJECTION_MODE_PLANAR_MANUAL_MSFT: XrReprojectionModeMSFT =
    3;
pub const XrReprojectionModeMSFT_XR_REPROJECTION_MODE_ORIENTATION_ONLY_MSFT:
    XrReprojectionModeMSFT = 4;
pub const XrReprojectionModeMSFT_XR_REPROJECTION_MODE_MAX_ENUM_MSFT: XrReprojectionModeMSFT =
    2147483647;
pub type XrReprojectionModeMSFT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerReprojectionInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub reprojectionMode: XrReprojectionModeMSFT,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerReprojectionInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerReprojectionInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerReprojectionInfoMSFT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrCompositionLayerReprojectionInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerReprojectionInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrCompositionLayerReprojectionInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerReprojectionInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerReprojectionInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reprojectionMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerReprojectionInfoMSFT),
            "::",
            stringify!(reprojectionMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerReprojectionPlaneOverrideMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub position: XrVector3f,
    pub normal: XrVector3f,
    pub velocity: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerReprojectionPlaneOverrideMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerReprojectionPlaneOverrideMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerReprojectionPlaneOverrideMSFT>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(XrCompositionLayerReprojectionPlaneOverrideMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerReprojectionPlaneOverrideMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrCompositionLayerReprojectionPlaneOverrideMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerReprojectionPlaneOverrideMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerReprojectionPlaneOverrideMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerReprojectionPlaneOverrideMSFT),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normal) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerReprojectionPlaneOverrideMSFT),
            "::",
            stringify!(normal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).velocity) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerReprojectionPlaneOverrideMSFT),
            "::",
            stringify!(velocity)
        )
    );
}
pub type PFN_xrEnumerateReprojectionModesMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        modeCapacityInput: u32,
        modeCountOutput: *mut u32,
        modes: *mut XrReprojectionModeMSFT,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainStateBaseHeaderFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSwapchainStateBaseHeaderFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSwapchainStateBaseHeaderFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainStateBaseHeaderFB>(),
        16usize,
        concat!("Size of: ", stringify!(XrSwapchainStateBaseHeaderFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainStateBaseHeaderFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainStateBaseHeaderFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainStateBaseHeaderFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainStateBaseHeaderFB),
            "::",
            stringify!(next)
        )
    );
}
pub type PFN_xrUpdateSwapchainFB = ::std::option::Option<
    unsafe extern "C" fn(
        swapchain: XrSwapchain,
        state: *const XrSwapchainStateBaseHeaderFB,
    ) -> XrResult,
>;
pub type PFN_xrGetSwapchainStateFB = ::std::option::Option<
    unsafe extern "C" fn(
        swapchain: XrSwapchain,
        state: *mut XrSwapchainStateBaseHeaderFB,
    ) -> XrResult,
>;
pub type XrCompositionLayerSecureContentFlagsFB = XrFlags64;
pub const XR_COMPOSITION_LAYER_SECURE_CONTENT_EXCLUDE_LAYER_BIT_FB:
    XrCompositionLayerSecureContentFlagsFB = 1;
pub const XR_COMPOSITION_LAYER_SECURE_CONTENT_REPLACE_LAYER_BIT_FB:
    XrCompositionLayerSecureContentFlagsFB = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerSecureContentFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrCompositionLayerSecureContentFlagsFB,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerSecureContentFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerSecureContentFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerSecureContentFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrCompositionLayerSecureContentFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerSecureContentFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrCompositionLayerSecureContentFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSecureContentFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSecureContentFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSecureContentFB),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyTrackerFB_T {
    _unused: [u8; 0],
}
pub type XrBodyTrackerFB = *mut XrBodyTrackerFB_T;
pub const XrBodyJointFB_XR_BODY_JOINT_ROOT_FB: XrBodyJointFB = 0;
pub const XrBodyJointFB_XR_BODY_JOINT_HIPS_FB: XrBodyJointFB = 1;
pub const XrBodyJointFB_XR_BODY_JOINT_SPINE_LOWER_FB: XrBodyJointFB = 2;
pub const XrBodyJointFB_XR_BODY_JOINT_SPINE_MIDDLE_FB: XrBodyJointFB = 3;
pub const XrBodyJointFB_XR_BODY_JOINT_SPINE_UPPER_FB: XrBodyJointFB = 4;
pub const XrBodyJointFB_XR_BODY_JOINT_CHEST_FB: XrBodyJointFB = 5;
pub const XrBodyJointFB_XR_BODY_JOINT_NECK_FB: XrBodyJointFB = 6;
pub const XrBodyJointFB_XR_BODY_JOINT_HEAD_FB: XrBodyJointFB = 7;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_SHOULDER_FB: XrBodyJointFB = 8;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_SCAPULA_FB: XrBodyJointFB = 9;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_ARM_UPPER_FB: XrBodyJointFB = 10;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_ARM_LOWER_FB: XrBodyJointFB = 11;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_WRIST_TWIST_FB: XrBodyJointFB = 12;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_SHOULDER_FB: XrBodyJointFB = 13;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_SCAPULA_FB: XrBodyJointFB = 14;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_ARM_UPPER_FB: XrBodyJointFB = 15;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_ARM_LOWER_FB: XrBodyJointFB = 16;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_WRIST_TWIST_FB: XrBodyJointFB = 17;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_PALM_FB: XrBodyJointFB = 18;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_WRIST_FB: XrBodyJointFB = 19;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_THUMB_METACARPAL_FB: XrBodyJointFB = 20;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_THUMB_PROXIMAL_FB: XrBodyJointFB = 21;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_THUMB_DISTAL_FB: XrBodyJointFB = 22;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_THUMB_TIP_FB: XrBodyJointFB = 23;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_INDEX_METACARPAL_FB: XrBodyJointFB = 24;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_INDEX_PROXIMAL_FB: XrBodyJointFB = 25;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_INDEX_INTERMEDIATE_FB: XrBodyJointFB = 26;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_INDEX_DISTAL_FB: XrBodyJointFB = 27;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_INDEX_TIP_FB: XrBodyJointFB = 28;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_MIDDLE_METACARPAL_FB: XrBodyJointFB = 29;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_MIDDLE_PROXIMAL_FB: XrBodyJointFB = 30;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_MIDDLE_INTERMEDIATE_FB: XrBodyJointFB = 31;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_MIDDLE_DISTAL_FB: XrBodyJointFB = 32;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_MIDDLE_TIP_FB: XrBodyJointFB = 33;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_RING_METACARPAL_FB: XrBodyJointFB = 34;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_RING_PROXIMAL_FB: XrBodyJointFB = 35;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_RING_INTERMEDIATE_FB: XrBodyJointFB = 36;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_RING_DISTAL_FB: XrBodyJointFB = 37;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_RING_TIP_FB: XrBodyJointFB = 38;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_LITTLE_METACARPAL_FB: XrBodyJointFB = 39;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_LITTLE_PROXIMAL_FB: XrBodyJointFB = 40;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_LITTLE_INTERMEDIATE_FB: XrBodyJointFB = 41;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_LITTLE_DISTAL_FB: XrBodyJointFB = 42;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_LITTLE_TIP_FB: XrBodyJointFB = 43;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_PALM_FB: XrBodyJointFB = 44;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_WRIST_FB: XrBodyJointFB = 45;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_THUMB_METACARPAL_FB: XrBodyJointFB = 46;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_THUMB_PROXIMAL_FB: XrBodyJointFB = 47;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_THUMB_DISTAL_FB: XrBodyJointFB = 48;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_THUMB_TIP_FB: XrBodyJointFB = 49;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_INDEX_METACARPAL_FB: XrBodyJointFB = 50;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_INDEX_PROXIMAL_FB: XrBodyJointFB = 51;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_INDEX_INTERMEDIATE_FB: XrBodyJointFB = 52;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_INDEX_DISTAL_FB: XrBodyJointFB = 53;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_INDEX_TIP_FB: XrBodyJointFB = 54;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_MIDDLE_METACARPAL_FB: XrBodyJointFB = 55;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_MIDDLE_PROXIMAL_FB: XrBodyJointFB = 56;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_MIDDLE_INTERMEDIATE_FB: XrBodyJointFB = 57;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_MIDDLE_DISTAL_FB: XrBodyJointFB = 58;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_MIDDLE_TIP_FB: XrBodyJointFB = 59;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_RING_METACARPAL_FB: XrBodyJointFB = 60;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_RING_PROXIMAL_FB: XrBodyJointFB = 61;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_RING_INTERMEDIATE_FB: XrBodyJointFB = 62;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_RING_DISTAL_FB: XrBodyJointFB = 63;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_RING_TIP_FB: XrBodyJointFB = 64;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_LITTLE_METACARPAL_FB: XrBodyJointFB = 65;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_LITTLE_PROXIMAL_FB: XrBodyJointFB = 66;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_LITTLE_INTERMEDIATE_FB: XrBodyJointFB = 67;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_LITTLE_DISTAL_FB: XrBodyJointFB = 68;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_LITTLE_TIP_FB: XrBodyJointFB = 69;
pub const XrBodyJointFB_XR_BODY_JOINT_COUNT_FB: XrBodyJointFB = 70;
pub const XrBodyJointFB_XR_BODY_JOINT_NONE_FB: XrBodyJointFB = -1;
pub const XrBodyJointFB_XR_BODY_JOINT_MAX_ENUM_FB: XrBodyJointFB = 2147483647;
pub type XrBodyJointFB = ::std::os::raw::c_int;
pub const XrBodyJointSetFB_XR_BODY_JOINT_SET_DEFAULT_FB: XrBodyJointSetFB = 0;
pub const XrBodyJointSetFB_XR_BODY_JOINT_SET_MAX_ENUM_FB: XrBodyJointSetFB = 2147483647;
pub type XrBodyJointSetFB = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyJointLocationFB {
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
}
#[test]
fn bindgen_test_layout_XrBodyJointLocationFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrBodyJointLocationFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBodyJointLocationFB>(),
        40usize,
        concat!("Size of: ", stringify!(XrBodyJointLocationFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBodyJointLocationFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrBodyJointLocationFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locationFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointLocationFB),
            "::",
            stringify!(locationFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointLocationFB),
            "::",
            stringify!(pose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemBodyTrackingPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsBodyTracking: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemBodyTrackingPropertiesFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemBodyTrackingPropertiesFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemBodyTrackingPropertiesFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemBodyTrackingPropertiesFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemBodyTrackingPropertiesFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemBodyTrackingPropertiesFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemBodyTrackingPropertiesFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemBodyTrackingPropertiesFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsBodyTracking) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemBodyTrackingPropertiesFB),
            "::",
            stringify!(supportsBodyTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyTrackerCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub bodyJointSet: XrBodyJointSetFB,
}
#[test]
fn bindgen_test_layout_XrBodyTrackerCreateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrBodyTrackerCreateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBodyTrackerCreateInfoFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrBodyTrackerCreateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBodyTrackerCreateInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrBodyTrackerCreateInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyTrackerCreateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyTrackerCreateInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bodyJointSet) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyTrackerCreateInfoFB),
            "::",
            stringify!(bodyJointSet)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodySkeletonJointFB {
    pub joint: i32,
    pub parentJoint: i32,
    pub pose: XrPosef,
}
#[test]
fn bindgen_test_layout_XrBodySkeletonJointFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrBodySkeletonJointFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBodySkeletonJointFB>(),
        36usize,
        concat!("Size of: ", stringify!(XrBodySkeletonJointFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBodySkeletonJointFB>(),
        4usize,
        concat!("Alignment of ", stringify!(XrBodySkeletonJointFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).joint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodySkeletonJointFB),
            "::",
            stringify!(joint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parentJoint) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodySkeletonJointFB),
            "::",
            stringify!(parentJoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodySkeletonJointFB),
            "::",
            stringify!(pose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodySkeletonFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub jointCount: u32,
    pub joints: *mut XrBodySkeletonJointFB,
}
#[test]
fn bindgen_test_layout_XrBodySkeletonFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrBodySkeletonFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBodySkeletonFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrBodySkeletonFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBodySkeletonFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrBodySkeletonFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodySkeletonFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodySkeletonFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodySkeletonFB),
            "::",
            stringify!(jointCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).joints) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodySkeletonFB),
            "::",
            stringify!(joints)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyJointsLocateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrBodyJointsLocateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrBodyJointsLocateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBodyJointsLocateInfoFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrBodyJointsLocateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBodyJointsLocateInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrBodyJointsLocateInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointsLocateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointsLocateInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseSpace) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointsLocateInfoFB),
            "::",
            stringify!(baseSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointsLocateInfoFB),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyJointLocationsFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
    pub confidence: f32,
    pub jointCount: u32,
    pub jointLocations: *mut XrBodyJointLocationFB,
    pub skeletonChangedCount: u32,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrBodyJointLocationsFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrBodyJointLocationsFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBodyJointLocationsFB>(),
        56usize,
        concat!("Size of: ", stringify!(XrBodyJointLocationsFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBodyJointLocationsFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrBodyJointLocationsFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointLocationsFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointLocationsFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isActive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointLocationsFB),
            "::",
            stringify!(isActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidence) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointLocationsFB),
            "::",
            stringify!(confidence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointLocationsFB),
            "::",
            stringify!(jointCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointLocations) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointLocationsFB),
            "::",
            stringify!(jointLocations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skeletonChangedCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointLocationsFB),
            "::",
            stringify!(skeletonChangedCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBodyJointLocationsFB),
            "::",
            stringify!(time)
        )
    );
}
pub type PFN_xrCreateBodyTrackerFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrBodyTrackerCreateInfoFB,
        bodyTracker: *mut XrBodyTrackerFB,
    ) -> XrResult,
>;
pub type PFN_xrDestroyBodyTrackerFB =
    ::std::option::Option<unsafe extern "C" fn(bodyTracker: XrBodyTrackerFB) -> XrResult>;
pub type PFN_xrLocateBodyJointsFB = ::std::option::Option<
    unsafe extern "C" fn(
        bodyTracker: XrBodyTrackerFB,
        locateInfo: *const XrBodyJointsLocateInfoFB,
        locations: *mut XrBodyJointLocationsFB,
    ) -> XrResult,
>;
pub type PFN_xrGetBodySkeletonFB = ::std::option::Option<
    unsafe extern "C" fn(bodyTracker: XrBodyTrackerFB, skeleton: *mut XrBodySkeletonFB) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInteractionProfileDpadBindingEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub binding: XrPath,
    pub actionSet: XrActionSet,
    pub forceThreshold: f32,
    pub forceThresholdReleased: f32,
    pub centerRegion: f32,
    pub wedgeAngle: f32,
    pub isSticky: XrBool32,
    pub onHaptic: *const XrHapticBaseHeader,
    pub offHaptic: *const XrHapticBaseHeader,
}
#[test]
fn bindgen_test_layout_XrInteractionProfileDpadBindingEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrInteractionProfileDpadBindingEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrInteractionProfileDpadBindingEXT>(),
        72usize,
        concat!("Size of: ", stringify!(XrInteractionProfileDpadBindingEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrInteractionProfileDpadBindingEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrInteractionProfileDpadBindingEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileDpadBindingEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileDpadBindingEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileDpadBindingEXT),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionSet) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileDpadBindingEXT),
            "::",
            stringify!(actionSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forceThreshold) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileDpadBindingEXT),
            "::",
            stringify!(forceThreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forceThresholdReleased) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileDpadBindingEXT),
            "::",
            stringify!(forceThresholdReleased)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).centerRegion) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileDpadBindingEXT),
            "::",
            stringify!(centerRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wedgeAngle) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileDpadBindingEXT),
            "::",
            stringify!(wedgeAngle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isSticky) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileDpadBindingEXT),
            "::",
            stringify!(isSticky)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onHaptic) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileDpadBindingEXT),
            "::",
            stringify!(onHaptic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offHaptic) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileDpadBindingEXT),
            "::",
            stringify!(offHaptic)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInteractionProfileAnalogThresholdVALVE {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
    pub binding: XrPath,
    pub onThreshold: f32,
    pub offThreshold: f32,
    pub onHaptic: *const XrHapticBaseHeader,
    pub offHaptic: *const XrHapticBaseHeader,
}
#[test]
fn bindgen_test_layout_XrInteractionProfileAnalogThresholdVALVE() {
    const UNINIT: ::std::mem::MaybeUninit<XrInteractionProfileAnalogThresholdVALVE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrInteractionProfileAnalogThresholdVALVE>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrInteractionProfileAnalogThresholdVALVE>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onThreshold) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(onThreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offThreshold) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(offThreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onHaptic) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(onHaptic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offHaptic) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(offHaptic)
        )
    );
}
pub const XrHandJointsMotionRangeEXT_XR_HAND_JOINTS_MOTION_RANGE_UNOBSTRUCTED_EXT:
    XrHandJointsMotionRangeEXT = 1;
pub const XrHandJointsMotionRangeEXT_XR_HAND_JOINTS_MOTION_RANGE_CONFORMING_TO_CONTROLLER_EXT:
    XrHandJointsMotionRangeEXT = 2;
pub const XrHandJointsMotionRangeEXT_XR_HAND_JOINTS_MOTION_RANGE_MAX_ENUM_EXT:
    XrHandJointsMotionRangeEXT = 2147483647;
pub type XrHandJointsMotionRangeEXT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointsMotionRangeInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub handJointsMotionRange: XrHandJointsMotionRangeEXT,
}
#[test]
fn bindgen_test_layout_XrHandJointsMotionRangeInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandJointsMotionRangeInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandJointsMotionRangeInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandJointsMotionRangeInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandJointsMotionRangeInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandJointsMotionRangeInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsMotionRangeInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsMotionRangeInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handJointsMotionRange) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsMotionRangeInfoEXT),
            "::",
            stringify!(handJointsMotionRange)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneObserverMSFT_T {
    _unused: [u8; 0],
}
pub type XrSceneObserverMSFT = *mut XrSceneObserverMSFT_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMSFT_T {
    _unused: [u8; 0],
}
pub type XrSceneMSFT = *mut XrSceneMSFT_T;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_PLANE_MSFT: XrSceneComputeFeatureMSFT =
    1;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_PLANE_MESH_MSFT:
    XrSceneComputeFeatureMSFT = 2;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_VISUAL_MESH_MSFT:
    XrSceneComputeFeatureMSFT = 3;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_COLLIDER_MESH_MSFT:
    XrSceneComputeFeatureMSFT = 4;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_SERIALIZE_SCENE_MSFT:
    XrSceneComputeFeatureMSFT = 1000098000;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_MARKER_MSFT:
    XrSceneComputeFeatureMSFT = 1000147000;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_MAX_ENUM_MSFT:
    XrSceneComputeFeatureMSFT = 2147483647;
pub type XrSceneComputeFeatureMSFT = ::std::os::raw::c_int;
pub const XrSceneComputeConsistencyMSFT_XR_SCENE_COMPUTE_CONSISTENCY_SNAPSHOT_COMPLETE_MSFT:
    XrSceneComputeConsistencyMSFT = 1;
pub const XrSceneComputeConsistencyMSFT_XR_SCENE_COMPUTE_CONSISTENCY_SNAPSHOT_INCOMPLETE_FAST_MSFT : XrSceneComputeConsistencyMSFT = 2 ;
pub const XrSceneComputeConsistencyMSFT_XR_SCENE_COMPUTE_CONSISTENCY_OCCLUSION_OPTIMIZED_MSFT:
    XrSceneComputeConsistencyMSFT = 3;
pub const XrSceneComputeConsistencyMSFT_XR_SCENE_COMPUTE_CONSISTENCY_MAX_ENUM_MSFT:
    XrSceneComputeConsistencyMSFT = 2147483647;
pub type XrSceneComputeConsistencyMSFT = ::std::os::raw::c_int;
pub const XrMeshComputeLodMSFT_XR_MESH_COMPUTE_LOD_COARSE_MSFT: XrMeshComputeLodMSFT = 1;
pub const XrMeshComputeLodMSFT_XR_MESH_COMPUTE_LOD_MEDIUM_MSFT: XrMeshComputeLodMSFT = 2;
pub const XrMeshComputeLodMSFT_XR_MESH_COMPUTE_LOD_FINE_MSFT: XrMeshComputeLodMSFT = 3;
pub const XrMeshComputeLodMSFT_XR_MESH_COMPUTE_LOD_UNLIMITED_MSFT: XrMeshComputeLodMSFT = 4;
pub const XrMeshComputeLodMSFT_XR_MESH_COMPUTE_LOD_MAX_ENUM_MSFT: XrMeshComputeLodMSFT = 2147483647;
pub type XrMeshComputeLodMSFT = ::std::os::raw::c_int;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_INVALID_MSFT: XrSceneComponentTypeMSFT =
    -1;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_OBJECT_MSFT: XrSceneComponentTypeMSFT =
    1;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_PLANE_MSFT: XrSceneComponentTypeMSFT = 2;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_VISUAL_MESH_MSFT:
    XrSceneComponentTypeMSFT = 3;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_COLLIDER_MESH_MSFT:
    XrSceneComponentTypeMSFT = 4;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_SERIALIZED_SCENE_FRAGMENT_MSFT:
    XrSceneComponentTypeMSFT = 1000098000;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_MARKER_MSFT: XrSceneComponentTypeMSFT =
    1000147000;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_MAX_ENUM_MSFT: XrSceneComponentTypeMSFT =
    2147483647;
pub type XrSceneComponentTypeMSFT = ::std::os::raw::c_int;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_UNCATEGORIZED_MSFT: XrSceneObjectTypeMSFT = -1;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_BACKGROUND_MSFT: XrSceneObjectTypeMSFT = 1;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_WALL_MSFT: XrSceneObjectTypeMSFT = 2;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_FLOOR_MSFT: XrSceneObjectTypeMSFT = 3;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_CEILING_MSFT: XrSceneObjectTypeMSFT = 4;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_PLATFORM_MSFT: XrSceneObjectTypeMSFT = 5;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_INFERRED_MSFT: XrSceneObjectTypeMSFT = 6;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_MAX_ENUM_MSFT: XrSceneObjectTypeMSFT =
    2147483647;
pub type XrSceneObjectTypeMSFT = ::std::os::raw::c_int;
pub const XrScenePlaneAlignmentTypeMSFT_XR_SCENE_PLANE_ALIGNMENT_TYPE_NON_ORTHOGONAL_MSFT:
    XrScenePlaneAlignmentTypeMSFT = 0;
pub const XrScenePlaneAlignmentTypeMSFT_XR_SCENE_PLANE_ALIGNMENT_TYPE_HORIZONTAL_MSFT:
    XrScenePlaneAlignmentTypeMSFT = 1;
pub const XrScenePlaneAlignmentTypeMSFT_XR_SCENE_PLANE_ALIGNMENT_TYPE_VERTICAL_MSFT:
    XrScenePlaneAlignmentTypeMSFT = 2;
pub const XrScenePlaneAlignmentTypeMSFT_XR_SCENE_PLANE_ALIGNMENT_TYPE_MAX_ENUM_MSFT:
    XrScenePlaneAlignmentTypeMSFT = 2147483647;
pub type XrScenePlaneAlignmentTypeMSFT = ::std::os::raw::c_int;
pub const XrSceneComputeStateMSFT_XR_SCENE_COMPUTE_STATE_NONE_MSFT: XrSceneComputeStateMSFT = 0;
pub const XrSceneComputeStateMSFT_XR_SCENE_COMPUTE_STATE_UPDATING_MSFT: XrSceneComputeStateMSFT = 1;
pub const XrSceneComputeStateMSFT_XR_SCENE_COMPUTE_STATE_COMPLETED_MSFT: XrSceneComputeStateMSFT =
    2;
pub const XrSceneComputeStateMSFT_XR_SCENE_COMPUTE_STATE_COMPLETED_WITH_ERROR_MSFT:
    XrSceneComputeStateMSFT = 3;
pub const XrSceneComputeStateMSFT_XR_SCENE_COMPUTE_STATE_MAX_ENUM_MSFT: XrSceneComputeStateMSFT =
    2147483647;
pub type XrSceneComputeStateMSFT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrUuidMSFT {
    pub bytes: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_XrUuidMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrUuidMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrUuidMSFT>(),
        16usize,
        concat!("Size of: ", stringify!(XrUuidMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrUuidMSFT>(),
        1usize,
        concat!("Alignment of ", stringify!(XrUuidMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrUuidMSFT),
            "::",
            stringify!(bytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneObserverCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSceneObserverCreateInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneObserverCreateInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneObserverCreateInfoMSFT>(),
        16usize,
        concat!("Size of: ", stringify!(XrSceneObserverCreateInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneObserverCreateInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneObserverCreateInfoMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneObserverCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneObserverCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSceneCreateInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneCreateInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneCreateInfoMSFT>(),
        16usize,
        concat!("Size of: ", stringify!(XrSceneCreateInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneCreateInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneCreateInfoMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneSphereBoundMSFT {
    pub center: XrVector3f,
    pub radius: f32,
}
#[test]
fn bindgen_test_layout_XrSceneSphereBoundMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneSphereBoundMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneSphereBoundMSFT>(),
        16usize,
        concat!("Size of: ", stringify!(XrSceneSphereBoundMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneSphereBoundMSFT>(),
        4usize,
        concat!("Alignment of ", stringify!(XrSceneSphereBoundMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneSphereBoundMSFT),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneSphereBoundMSFT),
            "::",
            stringify!(radius)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneOrientedBoxBoundMSFT {
    pub pose: XrPosef,
    pub extents: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrSceneOrientedBoxBoundMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneOrientedBoxBoundMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneOrientedBoxBoundMSFT>(),
        40usize,
        concat!("Size of: ", stringify!(XrSceneOrientedBoxBoundMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneOrientedBoxBoundMSFT>(),
        4usize,
        concat!("Alignment of ", stringify!(XrSceneOrientedBoxBoundMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneOrientedBoxBoundMSFT),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneOrientedBoxBoundMSFT),
            "::",
            stringify!(extents)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneFrustumBoundMSFT {
    pub pose: XrPosef,
    pub fov: XrFovf,
    pub farDistance: f32,
}
#[test]
fn bindgen_test_layout_XrSceneFrustumBoundMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneFrustumBoundMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneFrustumBoundMSFT>(),
        48usize,
        concat!("Size of: ", stringify!(XrSceneFrustumBoundMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneFrustumBoundMSFT>(),
        4usize,
        concat!("Alignment of ", stringify!(XrSceneFrustumBoundMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneFrustumBoundMSFT),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fov) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneFrustumBoundMSFT),
            "::",
            stringify!(fov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).farDistance) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneFrustumBoundMSFT),
            "::",
            stringify!(farDistance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneBoundsMSFT {
    pub space: XrSpace,
    pub time: XrTime,
    pub sphereCount: u32,
    pub spheres: *const XrSceneSphereBoundMSFT,
    pub boxCount: u32,
    pub boxes: *const XrSceneOrientedBoxBoundMSFT,
    pub frustumCount: u32,
    pub frustums: *const XrSceneFrustumBoundMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneBoundsMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneBoundsMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneBoundsMSFT>(),
        64usize,
        concat!("Size of: ", stringify!(XrSceneBoundsMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneBoundsMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneBoundsMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneBoundsMSFT),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneBoundsMSFT),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sphereCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneBoundsMSFT),
            "::",
            stringify!(sphereCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spheres) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneBoundsMSFT),
            "::",
            stringify!(spheres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boxCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneBoundsMSFT),
            "::",
            stringify!(boxCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boxes) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneBoundsMSFT),
            "::",
            stringify!(boxes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frustumCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneBoundsMSFT),
            "::",
            stringify!(frustumCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frustums) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneBoundsMSFT),
            "::",
            stringify!(frustums)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrNewSceneComputeInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestedFeatureCount: u32,
    pub requestedFeatures: *const XrSceneComputeFeatureMSFT,
    pub consistency: XrSceneComputeConsistencyMSFT,
    pub bounds: XrSceneBoundsMSFT,
}
#[test]
fn bindgen_test_layout_XrNewSceneComputeInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrNewSceneComputeInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrNewSceneComputeInfoMSFT>(),
        104usize,
        concat!("Size of: ", stringify!(XrNewSceneComputeInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrNewSceneComputeInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrNewSceneComputeInfoMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNewSceneComputeInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNewSceneComputeInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestedFeatureCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNewSceneComputeInfoMSFT),
            "::",
            stringify!(requestedFeatureCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestedFeatures) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNewSceneComputeInfoMSFT),
            "::",
            stringify!(requestedFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).consistency) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNewSceneComputeInfoMSFT),
            "::",
            stringify!(consistency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNewSceneComputeInfoMSFT),
            "::",
            stringify!(bounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVisualMeshComputeLodInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub lod: XrMeshComputeLodMSFT,
}
#[test]
fn bindgen_test_layout_XrVisualMeshComputeLodInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrVisualMeshComputeLodInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVisualMeshComputeLodInfoMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrVisualMeshComputeLodInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVisualMeshComputeLodInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrVisualMeshComputeLodInfoMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisualMeshComputeLodInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisualMeshComputeLodInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lod) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisualMeshComputeLodInfoMSFT),
            "::",
            stringify!(lod)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentMSFT {
    pub componentType: XrSceneComponentTypeMSFT,
    pub id: XrUuidMSFT,
    pub parentId: XrUuidMSFT,
    pub updateTime: XrTime,
}
#[test]
fn bindgen_test_layout_XrSceneComponentMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneComponentMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneComponentMSFT>(),
        48usize,
        concat!("Size of: ", stringify!(XrSceneComponentMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneComponentMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneComponentMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentMSFT),
            "::",
            stringify!(componentType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentMSFT),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parentId) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentMSFT),
            "::",
            stringify!(parentId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).updateTime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentMSFT),
            "::",
            stringify!(updateTime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentsMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub componentCapacityInput: u32,
    pub componentCountOutput: u32,
    pub components: *mut XrSceneComponentMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneComponentsMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneComponentsMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneComponentsMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneComponentsMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneComponentsMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneComponentsMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsMSFT),
            "::",
            stringify!(componentCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsMSFT),
            "::",
            stringify!(componentCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).components) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsMSFT),
            "::",
            stringify!(components)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentsGetInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub componentType: XrSceneComponentTypeMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneComponentsGetInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneComponentsGetInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneComponentsGetInfoMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrSceneComponentsGetInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneComponentsGetInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneComponentsGetInfoMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsGetInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsGetInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsGetInfoMSFT),
            "::",
            stringify!(componentType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentLocationMSFT {
    pub flags: XrSpaceLocationFlags,
    pub pose: XrPosef,
}
#[test]
fn bindgen_test_layout_XrSceneComponentLocationMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneComponentLocationMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneComponentLocationMSFT>(),
        40usize,
        concat!("Size of: ", stringify!(XrSceneComponentLocationMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneComponentLocationMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneComponentLocationMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentLocationMSFT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentLocationMSFT),
            "::",
            stringify!(pose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentLocationsMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub locationCount: u32,
    pub locations: *mut XrSceneComponentLocationMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneComponentLocationsMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneComponentLocationsMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneComponentLocationsMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneComponentLocationsMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneComponentLocationsMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneComponentLocationsMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentLocationsMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentLocationsMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locationCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentLocationsMSFT),
            "::",
            stringify!(locationCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locations) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentLocationsMSFT),
            "::",
            stringify!(locations)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentsLocateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
    pub componentIdCount: u32,
    pub componentIds: *const XrUuidMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneComponentsLocateInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneComponentsLocateInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneComponentsLocateInfoMSFT>(),
        48usize,
        concat!("Size of: ", stringify!(XrSceneComponentsLocateInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneComponentsLocateInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneComponentsLocateInfoMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsLocateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsLocateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseSpace) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsLocateInfoMSFT),
            "::",
            stringify!(baseSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsLocateInfoMSFT),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentIdCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsLocateInfoMSFT),
            "::",
            stringify!(componentIdCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentIds) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentsLocateInfoMSFT),
            "::",
            stringify!(componentIds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneObjectMSFT {
    pub objectType: XrSceneObjectTypeMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneObjectMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneObjectMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneObjectMSFT>(),
        4usize,
        concat!("Size of: ", stringify!(XrSceneObjectMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneObjectMSFT>(),
        4usize,
        concat!("Alignment of ", stringify!(XrSceneObjectMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneObjectMSFT),
            "::",
            stringify!(objectType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneObjectsMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub sceneObjectCount: u32,
    pub sceneObjects: *mut XrSceneObjectMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneObjectsMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneObjectsMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneObjectsMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneObjectsMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneObjectsMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneObjectsMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneObjectsMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneObjectsMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sceneObjectCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneObjectsMSFT),
            "::",
            stringify!(sceneObjectCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sceneObjects) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneObjectsMSFT),
            "::",
            stringify!(sceneObjects)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentParentFilterInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub parentId: XrUuidMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneComponentParentFilterInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneComponentParentFilterInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneComponentParentFilterInfoMSFT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrSceneComponentParentFilterInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneComponentParentFilterInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSceneComponentParentFilterInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentParentFilterInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentParentFilterInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parentId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneComponentParentFilterInfoMSFT),
            "::",
            stringify!(parentId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneObjectTypesFilterInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub objectTypeCount: u32,
    pub objectTypes: *const XrSceneObjectTypeMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneObjectTypesFilterInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneObjectTypesFilterInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneObjectTypesFilterInfoMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneObjectTypesFilterInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneObjectTypesFilterInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSceneObjectTypesFilterInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneObjectTypesFilterInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneObjectTypesFilterInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectTypeCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneObjectTypesFilterInfoMSFT),
            "::",
            stringify!(objectTypeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectTypes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneObjectTypesFilterInfoMSFT),
            "::",
            stringify!(objectTypes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrScenePlaneMSFT {
    pub alignment: XrScenePlaneAlignmentTypeMSFT,
    pub size: XrExtent2Df,
    pub meshBufferId: u64,
    pub supportsIndicesUint16: XrBool32,
}
#[test]
fn bindgen_test_layout_XrScenePlaneMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrScenePlaneMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrScenePlaneMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrScenePlaneMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrScenePlaneMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrScenePlaneMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrScenePlaneMSFT),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrScenePlaneMSFT),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meshBufferId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrScenePlaneMSFT),
            "::",
            stringify!(meshBufferId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsIndicesUint16) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrScenePlaneMSFT),
            "::",
            stringify!(supportsIndicesUint16)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrScenePlanesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub scenePlaneCount: u32,
    pub scenePlanes: *mut XrScenePlaneMSFT,
}
#[test]
fn bindgen_test_layout_XrScenePlanesMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrScenePlanesMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrScenePlanesMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrScenePlanesMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrScenePlanesMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrScenePlanesMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrScenePlanesMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrScenePlanesMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scenePlaneCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrScenePlanesMSFT),
            "::",
            stringify!(scenePlaneCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scenePlanes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrScenePlanesMSFT),
            "::",
            stringify!(scenePlanes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrScenePlaneAlignmentFilterInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub alignmentCount: u32,
    pub alignments: *const XrScenePlaneAlignmentTypeMSFT,
}
#[test]
fn bindgen_test_layout_XrScenePlaneAlignmentFilterInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrScenePlaneAlignmentFilterInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrScenePlaneAlignmentFilterInfoMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrScenePlaneAlignmentFilterInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrScenePlaneAlignmentFilterInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrScenePlaneAlignmentFilterInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrScenePlaneAlignmentFilterInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrScenePlaneAlignmentFilterInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignmentCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrScenePlaneAlignmentFilterInfoMSFT),
            "::",
            stringify!(alignmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignments) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrScenePlaneAlignmentFilterInfoMSFT),
            "::",
            stringify!(alignments)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshMSFT {
    pub meshBufferId: u64,
    pub supportsIndicesUint16: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSceneMeshMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneMeshMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneMeshMSFT>(),
        16usize,
        concat!("Size of: ", stringify!(XrSceneMeshMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneMeshMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneMeshMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meshBufferId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshMSFT),
            "::",
            stringify!(meshBufferId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsIndicesUint16) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshMSFT),
            "::",
            stringify!(supportsIndicesUint16)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub sceneMeshCount: u32,
    pub sceneMeshes: *mut XrSceneMeshMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneMeshesMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneMeshesMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneMeshesMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneMeshesMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneMeshesMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneMeshesMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshesMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshesMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sceneMeshCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshesMSFT),
            "::",
            stringify!(sceneMeshCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sceneMeshes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshesMSFT),
            "::",
            stringify!(sceneMeshes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshBuffersGetInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub meshBufferId: u64,
}
#[test]
fn bindgen_test_layout_XrSceneMeshBuffersGetInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneMeshBuffersGetInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneMeshBuffersGetInfoMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrSceneMeshBuffersGetInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneMeshBuffersGetInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneMeshBuffersGetInfoMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshBuffersGetInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshBuffersGetInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meshBufferId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshBuffersGetInfoMSFT),
            "::",
            stringify!(meshBufferId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshBuffersMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSceneMeshBuffersMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneMeshBuffersMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneMeshBuffersMSFT>(),
        16usize,
        concat!("Size of: ", stringify!(XrSceneMeshBuffersMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneMeshBuffersMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneMeshBuffersMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshBuffersMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshBuffersMSFT),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshVertexBufferMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrVector3f,
}
#[test]
fn bindgen_test_layout_XrSceneMeshVertexBufferMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneMeshVertexBufferMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneMeshVertexBufferMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneMeshVertexBufferMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneMeshVertexBufferMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneMeshVertexBufferMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshVertexBufferMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshVertexBufferMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshVertexBufferMSFT),
            "::",
            stringify!(vertexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshVertexBufferMSFT),
            "::",
            stringify!(vertexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshVertexBufferMSFT),
            "::",
            stringify!(vertices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshIndicesUint32MSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut u32,
}
#[test]
fn bindgen_test_layout_XrSceneMeshIndicesUint32MSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneMeshIndicesUint32MSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneMeshIndicesUint32MSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneMeshIndicesUint32MSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneMeshIndicesUint32MSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneMeshIndicesUint32MSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshIndicesUint32MSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshIndicesUint32MSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshIndicesUint32MSFT),
            "::",
            stringify!(indexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshIndicesUint32MSFT),
            "::",
            stringify!(indexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshIndicesUint32MSFT),
            "::",
            stringify!(indices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshIndicesUint16MSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut u16,
}
#[test]
fn bindgen_test_layout_XrSceneMeshIndicesUint16MSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneMeshIndicesUint16MSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneMeshIndicesUint16MSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneMeshIndicesUint16MSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneMeshIndicesUint16MSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneMeshIndicesUint16MSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshIndicesUint16MSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshIndicesUint16MSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshIndicesUint16MSFT),
            "::",
            stringify!(indexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshIndicesUint16MSFT),
            "::",
            stringify!(indexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMeshIndicesUint16MSFT),
            "::",
            stringify!(indices)
        )
    );
}
pub type PFN_xrEnumerateSceneComputeFeaturesMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        systemId: XrSystemId,
        featureCapacityInput: u32,
        featureCountOutput: *mut u32,
        features: *mut XrSceneComputeFeatureMSFT,
    ) -> XrResult,
>;
pub type PFN_xrCreateSceneObserverMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrSceneObserverCreateInfoMSFT,
        sceneObserver: *mut XrSceneObserverMSFT,
    ) -> XrResult,
>;
pub type PFN_xrDestroySceneObserverMSFT =
    ::std::option::Option<unsafe extern "C" fn(sceneObserver: XrSceneObserverMSFT) -> XrResult>;
pub type PFN_xrCreateSceneMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        sceneObserver: XrSceneObserverMSFT,
        createInfo: *const XrSceneCreateInfoMSFT,
        scene: *mut XrSceneMSFT,
    ) -> XrResult,
>;
pub type PFN_xrDestroySceneMSFT =
    ::std::option::Option<unsafe extern "C" fn(scene: XrSceneMSFT) -> XrResult>;
pub type PFN_xrComputeNewSceneMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        sceneObserver: XrSceneObserverMSFT,
        computeInfo: *const XrNewSceneComputeInfoMSFT,
    ) -> XrResult,
>;
pub type PFN_xrGetSceneComputeStateMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        sceneObserver: XrSceneObserverMSFT,
        state: *mut XrSceneComputeStateMSFT,
    ) -> XrResult,
>;
pub type PFN_xrGetSceneComponentsMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        scene: XrSceneMSFT,
        getInfo: *const XrSceneComponentsGetInfoMSFT,
        components: *mut XrSceneComponentsMSFT,
    ) -> XrResult,
>;
pub type PFN_xrLocateSceneComponentsMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        scene: XrSceneMSFT,
        locateInfo: *const XrSceneComponentsLocateInfoMSFT,
        locations: *mut XrSceneComponentLocationsMSFT,
    ) -> XrResult,
>;
pub type PFN_xrGetSceneMeshBuffersMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        scene: XrSceneMSFT,
        getInfo: *const XrSceneMeshBuffersGetInfoMSFT,
        buffers: *mut XrSceneMeshBuffersMSFT,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSerializedSceneFragmentDataGetInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub sceneFragmentId: XrUuidMSFT,
}
#[test]
fn bindgen_test_layout_XrSerializedSceneFragmentDataGetInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSerializedSceneFragmentDataGetInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSerializedSceneFragmentDataGetInfoMSFT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrSerializedSceneFragmentDataGetInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSerializedSceneFragmentDataGetInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSerializedSceneFragmentDataGetInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSerializedSceneFragmentDataGetInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSerializedSceneFragmentDataGetInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sceneFragmentId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSerializedSceneFragmentDataGetInfoMSFT),
            "::",
            stringify!(sceneFragmentId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDeserializeSceneFragmentMSFT {
    pub bufferSize: u32,
    pub buffer: *const u8,
}
#[test]
fn bindgen_test_layout_XrDeserializeSceneFragmentMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrDeserializeSceneFragmentMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrDeserializeSceneFragmentMSFT>(),
        16usize,
        concat!("Size of: ", stringify!(XrDeserializeSceneFragmentMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrDeserializeSceneFragmentMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrDeserializeSceneFragmentMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDeserializeSceneFragmentMSFT),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDeserializeSceneFragmentMSFT),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneDeserializeInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub fragmentCount: u32,
    pub fragments: *const XrDeserializeSceneFragmentMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneDeserializeInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneDeserializeInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneDeserializeInfoMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneDeserializeInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneDeserializeInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneDeserializeInfoMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneDeserializeInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneDeserializeInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneDeserializeInfoMSFT),
            "::",
            stringify!(fragmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragments) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneDeserializeInfoMSFT),
            "::",
            stringify!(fragments)
        )
    );
}
pub type PFN_xrDeserializeSceneMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        sceneObserver: XrSceneObserverMSFT,
        deserializeInfo: *const XrSceneDeserializeInfoMSFT,
    ) -> XrResult,
>;
pub type PFN_xrGetSerializedSceneFragmentDataMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        scene: XrSceneMSFT,
        getInfo: *const XrSerializedSceneFragmentDataGetInfoMSFT,
        countInput: u32,
        readOutput: *mut u32,
        buffer: *mut u8,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataDisplayRefreshRateChangedFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub fromDisplayRefreshRate: f32,
    pub toDisplayRefreshRate: f32,
}
#[test]
fn bindgen_test_layout_XrEventDataDisplayRefreshRateChangedFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataDisplayRefreshRateChangedFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataDisplayRefreshRateChangedFB>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataDisplayRefreshRateChangedFB)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataDisplayRefreshRateChangedFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataDisplayRefreshRateChangedFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataDisplayRefreshRateChangedFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataDisplayRefreshRateChangedFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fromDisplayRefreshRate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataDisplayRefreshRateChangedFB),
            "::",
            stringify!(fromDisplayRefreshRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toDisplayRefreshRate) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataDisplayRefreshRateChangedFB),
            "::",
            stringify!(toDisplayRefreshRate)
        )
    );
}
pub type PFN_xrEnumerateDisplayRefreshRatesFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        displayRefreshRateCapacityInput: u32,
        displayRefreshRateCountOutput: *mut u32,
        displayRefreshRates: *mut f32,
    ) -> XrResult,
>;
pub type PFN_xrGetDisplayRefreshRateFB = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, displayRefreshRate: *mut f32) -> XrResult,
>;
pub type PFN_xrRequestDisplayRefreshRateFB = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, displayRefreshRate: f32) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViveTrackerPathsHTCX {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub persistentPath: XrPath,
    pub rolePath: XrPath,
}
#[test]
fn bindgen_test_layout_XrViveTrackerPathsHTCX() {
    const UNINIT: ::std::mem::MaybeUninit<XrViveTrackerPathsHTCX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrViveTrackerPathsHTCX>(),
        32usize,
        concat!("Size of: ", stringify!(XrViveTrackerPathsHTCX))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViveTrackerPathsHTCX>(),
        8usize,
        concat!("Alignment of ", stringify!(XrViveTrackerPathsHTCX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViveTrackerPathsHTCX),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViveTrackerPathsHTCX),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).persistentPath) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViveTrackerPathsHTCX),
            "::",
            stringify!(persistentPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rolePath) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViveTrackerPathsHTCX),
            "::",
            stringify!(rolePath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataViveTrackerConnectedHTCX {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub paths: *mut XrViveTrackerPathsHTCX,
}
#[test]
fn bindgen_test_layout_XrEventDataViveTrackerConnectedHTCX() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataViveTrackerConnectedHTCX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataViveTrackerConnectedHTCX>(),
        24usize,
        concat!("Size of: ", stringify!(XrEventDataViveTrackerConnectedHTCX))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataViveTrackerConnectedHTCX>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataViveTrackerConnectedHTCX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataViveTrackerConnectedHTCX),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataViveTrackerConnectedHTCX),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paths) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataViveTrackerConnectedHTCX),
            "::",
            stringify!(paths)
        )
    );
}
pub type PFN_xrEnumerateViveTrackerPathsHTCX = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        pathCapacityInput: u32,
        pathCountOutput: *mut u32,
        paths: *mut XrViveTrackerPathsHTCX,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFacialTrackerHTC_T {
    _unused: [u8; 0],
}
pub type XrFacialTrackerHTC = *mut XrFacialTrackerHTC_T;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_BLINK_HTC: XrEyeExpressionHTC = 0;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_WIDE_HTC: XrEyeExpressionHTC = 1;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_BLINK_HTC: XrEyeExpressionHTC = 2;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_WIDE_HTC: XrEyeExpressionHTC = 3;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_SQUEEZE_HTC: XrEyeExpressionHTC = 4;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_SQUEEZE_HTC: XrEyeExpressionHTC = 5;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_DOWN_HTC: XrEyeExpressionHTC = 6;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_DOWN_HTC: XrEyeExpressionHTC = 7;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_OUT_HTC: XrEyeExpressionHTC = 8;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_IN_HTC: XrEyeExpressionHTC = 9;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_IN_HTC: XrEyeExpressionHTC = 10;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_OUT_HTC: XrEyeExpressionHTC = 11;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_UP_HTC: XrEyeExpressionHTC = 12;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_UP_HTC: XrEyeExpressionHTC = 13;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_MAX_ENUM_HTC: XrEyeExpressionHTC = 2147483647;
pub type XrEyeExpressionHTC = ::std::os::raw::c_int;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_JAW_RIGHT_HTC: XrLipExpressionHTC = 0;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_JAW_LEFT_HTC: XrLipExpressionHTC = 1;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_JAW_FORWARD_HTC: XrLipExpressionHTC = 2;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_JAW_OPEN_HTC: XrLipExpressionHTC = 3;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_APE_SHAPE_HTC: XrLipExpressionHTC = 4;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_UPPER_RIGHT_HTC: XrLipExpressionHTC = 5;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_UPPER_LEFT_HTC: XrLipExpressionHTC = 6;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_RIGHT_HTC: XrLipExpressionHTC = 7;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_LEFT_HTC: XrLipExpressionHTC = 8;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_UPPER_OVERTURN_HTC: XrLipExpressionHTC = 9;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_OVERTURN_HTC: XrLipExpressionHTC = 10;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_POUT_HTC: XrLipExpressionHTC = 11;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_SMILE_RIGHT_HTC: XrLipExpressionHTC = 12;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_SMILE_LEFT_HTC: XrLipExpressionHTC = 13;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_SAD_RIGHT_HTC: XrLipExpressionHTC = 14;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_SAD_LEFT_HTC: XrLipExpressionHTC = 15;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_CHEEK_PUFF_RIGHT_HTC: XrLipExpressionHTC = 16;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_CHEEK_PUFF_LEFT_HTC: XrLipExpressionHTC = 17;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_CHEEK_SUCK_HTC: XrLipExpressionHTC = 18;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_UPPER_UPRIGHT_HTC: XrLipExpressionHTC = 19;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_UPPER_UPLEFT_HTC: XrLipExpressionHTC = 20;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_DOWNRIGHT_HTC: XrLipExpressionHTC = 21;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_DOWNLEFT_HTC: XrLipExpressionHTC = 22;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_UPPER_INSIDE_HTC: XrLipExpressionHTC = 23;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_INSIDE_HTC: XrLipExpressionHTC = 24;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_OVERLAY_HTC: XrLipExpressionHTC = 25;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_LONGSTEP1_HTC: XrLipExpressionHTC = 26;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_LEFT_HTC: XrLipExpressionHTC = 27;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_RIGHT_HTC: XrLipExpressionHTC = 28;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_UP_HTC: XrLipExpressionHTC = 29;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_DOWN_HTC: XrLipExpressionHTC = 30;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_ROLL_HTC: XrLipExpressionHTC = 31;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_LONGSTEP2_HTC: XrLipExpressionHTC = 32;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_UPRIGHT_MORPH_HTC: XrLipExpressionHTC = 33;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_UPLEFT_MORPH_HTC: XrLipExpressionHTC = 34;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_DOWNRIGHT_MORPH_HTC: XrLipExpressionHTC = 35;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_DOWNLEFT_MORPH_HTC: XrLipExpressionHTC = 36;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MAX_ENUM_HTC: XrLipExpressionHTC = 2147483647;
pub type XrLipExpressionHTC = ::std::os::raw::c_int;
pub const XrFacialTrackingTypeHTC_XR_FACIAL_TRACKING_TYPE_EYE_DEFAULT_HTC: XrFacialTrackingTypeHTC =
    1;
pub const XrFacialTrackingTypeHTC_XR_FACIAL_TRACKING_TYPE_LIP_DEFAULT_HTC: XrFacialTrackingTypeHTC =
    2;
pub const XrFacialTrackingTypeHTC_XR_FACIAL_TRACKING_TYPE_MAX_ENUM_HTC: XrFacialTrackingTypeHTC =
    2147483647;
pub type XrFacialTrackingTypeHTC = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemFacialTrackingPropertiesHTC {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportEyeFacialTracking: XrBool32,
    pub supportLipFacialTracking: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemFacialTrackingPropertiesHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemFacialTrackingPropertiesHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemFacialTrackingPropertiesHTC>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemFacialTrackingPropertiesHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemFacialTrackingPropertiesHTC>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemFacialTrackingPropertiesHTC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFacialTrackingPropertiesHTC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFacialTrackingPropertiesHTC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportEyeFacialTracking) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFacialTrackingPropertiesHTC),
            "::",
            stringify!(supportEyeFacialTracking)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportLipFacialTracking) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFacialTrackingPropertiesHTC),
            "::",
            stringify!(supportLipFacialTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFacialExpressionsHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub isActive: XrBool32,
    pub sampleTime: XrTime,
    pub expressionCount: u32,
    pub expressionWeightings: *mut f32,
}
#[test]
fn bindgen_test_layout_XrFacialExpressionsHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrFacialExpressionsHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFacialExpressionsHTC>(),
        48usize,
        concat!("Size of: ", stringify!(XrFacialExpressionsHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFacialExpressionsHTC>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFacialExpressionsHTC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFacialExpressionsHTC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFacialExpressionsHTC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isActive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFacialExpressionsHTC),
            "::",
            stringify!(isActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleTime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFacialExpressionsHTC),
            "::",
            stringify!(sampleTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expressionCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFacialExpressionsHTC),
            "::",
            stringify!(expressionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expressionWeightings) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFacialExpressionsHTC),
            "::",
            stringify!(expressionWeightings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFacialTrackerCreateInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub facialTrackingType: XrFacialTrackingTypeHTC,
}
#[test]
fn bindgen_test_layout_XrFacialTrackerCreateInfoHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrFacialTrackerCreateInfoHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFacialTrackerCreateInfoHTC>(),
        24usize,
        concat!("Size of: ", stringify!(XrFacialTrackerCreateInfoHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFacialTrackerCreateInfoHTC>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFacialTrackerCreateInfoHTC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFacialTrackerCreateInfoHTC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFacialTrackerCreateInfoHTC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).facialTrackingType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFacialTrackerCreateInfoHTC),
            "::",
            stringify!(facialTrackingType)
        )
    );
}
pub type PFN_xrCreateFacialTrackerHTC = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrFacialTrackerCreateInfoHTC,
        facialTracker: *mut XrFacialTrackerHTC,
    ) -> XrResult,
>;
pub type PFN_xrDestroyFacialTrackerHTC =
    ::std::option::Option<unsafe extern "C" fn(facialTracker: XrFacialTrackerHTC) -> XrResult>;
pub type PFN_xrGetFacialExpressionsHTC = ::std::option::Option<
    unsafe extern "C" fn(
        facialTracker: XrFacialTrackerHTC,
        facialExpressions: *mut XrFacialExpressionsHTC,
    ) -> XrResult,
>;
pub const XrColorSpaceFB_XR_COLOR_SPACE_UNMANAGED_FB: XrColorSpaceFB = 0;
pub const XrColorSpaceFB_XR_COLOR_SPACE_REC2020_FB: XrColorSpaceFB = 1;
pub const XrColorSpaceFB_XR_COLOR_SPACE_REC709_FB: XrColorSpaceFB = 2;
pub const XrColorSpaceFB_XR_COLOR_SPACE_RIFT_CV1_FB: XrColorSpaceFB = 3;
pub const XrColorSpaceFB_XR_COLOR_SPACE_RIFT_S_FB: XrColorSpaceFB = 4;
pub const XrColorSpaceFB_XR_COLOR_SPACE_QUEST_FB: XrColorSpaceFB = 5;
pub const XrColorSpaceFB_XR_COLOR_SPACE_P3_FB: XrColorSpaceFB = 6;
pub const XrColorSpaceFB_XR_COLOR_SPACE_ADOBE_RGB_FB: XrColorSpaceFB = 7;
pub const XrColorSpaceFB_XR_COLOR_SPACE_MAX_ENUM_FB: XrColorSpaceFB = 2147483647;
pub type XrColorSpaceFB = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemColorSpacePropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub colorSpace: XrColorSpaceFB,
}
#[test]
fn bindgen_test_layout_XrSystemColorSpacePropertiesFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemColorSpacePropertiesFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemColorSpacePropertiesFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemColorSpacePropertiesFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemColorSpacePropertiesFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSystemColorSpacePropertiesFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemColorSpacePropertiesFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemColorSpacePropertiesFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorSpace) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemColorSpacePropertiesFB),
            "::",
            stringify!(colorSpace)
        )
    );
}
pub type PFN_xrEnumerateColorSpacesFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        colorSpaceCapacityInput: u32,
        colorSpaceCountOutput: *mut u32,
        colorSpaces: *mut XrColorSpaceFB,
    ) -> XrResult,
>;
pub type PFN_xrSetColorSpaceFB = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, colorSpace: XrColorSpaceFB) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVector4sFB {
    pub x: i16,
    pub y: i16,
    pub z: i16,
    pub w: i16,
}
#[test]
fn bindgen_test_layout_XrVector4sFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrVector4sFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVector4sFB>(),
        8usize,
        concat!("Size of: ", stringify!(XrVector4sFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVector4sFB>(),
        2usize,
        concat!("Alignment of ", stringify!(XrVector4sFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector4sFB),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector4sFB),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector4sFB),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector4sFB),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackingMeshFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub jointCapacityInput: u32,
    pub jointCountOutput: u32,
    pub jointBindPoses: *mut XrPosef,
    pub jointRadii: *mut f32,
    pub jointParents: *mut XrHandJointEXT,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertexPositions: *mut XrVector3f,
    pub vertexNormals: *mut XrVector3f,
    pub vertexUVs: *mut XrVector2f,
    pub vertexBlendIndices: *mut XrVector4sFB,
    pub vertexBlendWeights: *mut XrVector4f,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut i16,
}
#[test]
fn bindgen_test_layout_XrHandTrackingMeshFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandTrackingMeshFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandTrackingMeshFB>(),
        112usize,
        concat!("Size of: ", stringify!(XrHandTrackingMeshFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandTrackingMeshFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandTrackingMeshFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(jointCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(jointCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointBindPoses) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(jointBindPoses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointRadii) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(jointRadii)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointParents) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(jointParents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCapacityInput) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(vertexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCountOutput) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(vertexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexPositions) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(vertexPositions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexNormals) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(vertexNormals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexUVs) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(vertexUVs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexBlendIndices) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(vertexBlendIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexBlendWeights) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(vertexBlendWeights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCapacityInput) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(indexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCountOutput) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(indexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indices) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingMeshFB),
            "::",
            stringify!(indices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackingScaleFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub sensorOutput: f32,
    pub currentOutput: f32,
    pub overrideHandScale: XrBool32,
    pub overrideValueInput: f32,
}
#[test]
fn bindgen_test_layout_XrHandTrackingScaleFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandTrackingScaleFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandTrackingScaleFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandTrackingScaleFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandTrackingScaleFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandTrackingScaleFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingScaleFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingScaleFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensorOutput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingScaleFB),
            "::",
            stringify!(sensorOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingScaleFB),
            "::",
            stringify!(currentOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overrideHandScale) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingScaleFB),
            "::",
            stringify!(overrideHandScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overrideValueInput) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingScaleFB),
            "::",
            stringify!(overrideValueInput)
        )
    );
}
pub type PFN_xrGetHandMeshFB = ::std::option::Option<
    unsafe extern "C" fn(
        handTracker: XrHandTrackerEXT,
        mesh: *mut XrHandTrackingMeshFB,
    ) -> XrResult,
>;
pub type XrHandTrackingAimFlagsFB = XrFlags64;
pub const XR_HAND_TRACKING_AIM_COMPUTED_BIT_FB: XrHandTrackingAimFlagsFB = 1;
pub const XR_HAND_TRACKING_AIM_VALID_BIT_FB: XrHandTrackingAimFlagsFB = 2;
pub const XR_HAND_TRACKING_AIM_INDEX_PINCHING_BIT_FB: XrHandTrackingAimFlagsFB = 4;
pub const XR_HAND_TRACKING_AIM_MIDDLE_PINCHING_BIT_FB: XrHandTrackingAimFlagsFB = 8;
pub const XR_HAND_TRACKING_AIM_RING_PINCHING_BIT_FB: XrHandTrackingAimFlagsFB = 16;
pub const XR_HAND_TRACKING_AIM_LITTLE_PINCHING_BIT_FB: XrHandTrackingAimFlagsFB = 32;
pub const XR_HAND_TRACKING_AIM_SYSTEM_GESTURE_BIT_FB: XrHandTrackingAimFlagsFB = 64;
pub const XR_HAND_TRACKING_AIM_DOMINANT_HAND_BIT_FB: XrHandTrackingAimFlagsFB = 128;
pub const XR_HAND_TRACKING_AIM_MENU_PRESSED_BIT_FB: XrHandTrackingAimFlagsFB = 256;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackingAimStateFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub status: XrHandTrackingAimFlagsFB,
    pub aimPose: XrPosef,
    pub pinchStrengthIndex: f32,
    pub pinchStrengthMiddle: f32,
    pub pinchStrengthRing: f32,
    pub pinchStrengthLittle: f32,
}
#[test]
fn bindgen_test_layout_XrHandTrackingAimStateFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandTrackingAimStateFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandTrackingAimStateFB>(),
        72usize,
        concat!("Size of: ", stringify!(XrHandTrackingAimStateFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandTrackingAimStateFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandTrackingAimStateFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingAimStateFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingAimStateFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingAimStateFB),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aimPose) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingAimStateFB),
            "::",
            stringify!(aimPose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pinchStrengthIndex) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingAimStateFB),
            "::",
            stringify!(pinchStrengthIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pinchStrengthMiddle) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingAimStateFB),
            "::",
            stringify!(pinchStrengthMiddle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pinchStrengthRing) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingAimStateFB),
            "::",
            stringify!(pinchStrengthRing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pinchStrengthLittle) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingAimStateFB),
            "::",
            stringify!(pinchStrengthLittle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandCapsuleFB {
    pub points: [XrVector3f; 2usize],
    pub radius: f32,
    pub joint: XrHandJointEXT,
}
#[test]
fn bindgen_test_layout_XrHandCapsuleFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandCapsuleFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandCapsuleFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandCapsuleFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandCapsuleFB>(),
        4usize,
        concat!("Alignment of ", stringify!(XrHandCapsuleFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).points) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandCapsuleFB),
            "::",
            stringify!(points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandCapsuleFB),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).joint) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandCapsuleFB),
            "::",
            stringify!(joint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackingCapsulesStateFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub capsules: [XrHandCapsuleFB; 19usize],
}
#[test]
fn bindgen_test_layout_XrHandTrackingCapsulesStateFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandTrackingCapsulesStateFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandTrackingCapsulesStateFB>(),
        624usize,
        concat!("Size of: ", stringify!(XrHandTrackingCapsulesStateFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandTrackingCapsulesStateFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandTrackingCapsulesStateFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingCapsulesStateFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingCapsulesStateFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capsules) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingCapsulesStateFB),
            "::",
            stringify!(capsules)
        )
    );
}
pub type XrAsyncRequestIdFB = u64;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_LOCATABLE_FB: XrSpaceComponentTypeFB = 0;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_STORABLE_FB: XrSpaceComponentTypeFB = 1;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_SHARABLE_FB: XrSpaceComponentTypeFB = 2;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_BOUNDED_2D_FB: XrSpaceComponentTypeFB = 3;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_BOUNDED_3D_FB: XrSpaceComponentTypeFB = 4;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_SEMANTIC_LABELS_FB:
    XrSpaceComponentTypeFB = 5;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_ROOM_LAYOUT_FB: XrSpaceComponentTypeFB = 6;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_SPACE_CONTAINER_FB:
    XrSpaceComponentTypeFB = 7;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_TRIANGLE_MESH_META:
    XrSpaceComponentTypeFB = 1000269000;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_MAX_ENUM_FB: XrSpaceComponentTypeFB =
    2147483647;
pub type XrSpaceComponentTypeFB = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemSpatialEntityPropertiesFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub supportsSpatialEntity: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemSpatialEntityPropertiesFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemSpatialEntityPropertiesFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemSpatialEntityPropertiesFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemSpatialEntityPropertiesFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemSpatialEntityPropertiesFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemSpatialEntityPropertiesFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemSpatialEntityPropertiesFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemSpatialEntityPropertiesFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsSpatialEntity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemSpatialEntityPropertiesFB),
            "::",
            stringify!(supportsSpatialEntity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub poseInSpace: XrPosef,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrSpatialAnchorCreateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpatialAnchorCreateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpatialAnchorCreateInfoFB>(),
        64usize,
        concat!("Size of: ", stringify!(XrSpatialAnchorCreateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialAnchorCreateInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpatialAnchorCreateInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoFB),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInSpace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoFB),
            "::",
            stringify!(poseInSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoFB),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceComponentStatusSetInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub componentType: XrSpaceComponentTypeFB,
    pub enabled: XrBool32,
    pub timeout: XrDuration,
}
#[test]
fn bindgen_test_layout_XrSpaceComponentStatusSetInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceComponentStatusSetInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceComponentStatusSetInfoFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrSpaceComponentStatusSetInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceComponentStatusSetInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceComponentStatusSetInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceComponentStatusSetInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceComponentStatusSetInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceComponentStatusSetInfoFB),
            "::",
            stringify!(componentType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceComponentStatusSetInfoFB),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceComponentStatusSetInfoFB),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceComponentStatusFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub enabled: XrBool32,
    pub changePending: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSpaceComponentStatusFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceComponentStatusFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceComponentStatusFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSpaceComponentStatusFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceComponentStatusFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceComponentStatusFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceComponentStatusFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceComponentStatusFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceComponentStatusFB),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changePending) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceComponentStatusFB),
            "::",
            stringify!(changePending)
        )
    );
}
pub type XrUuidEXT = XrUuid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpatialAnchorCreateCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
    pub space: XrSpace,
    pub uuid: XrUuidEXT,
}
#[test]
fn bindgen_test_layout_XrEventDataSpatialAnchorCreateCompleteFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataSpatialAnchorCreateCompleteFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataSpatialAnchorCreateCompleteFB>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataSpatialAnchorCreateCompleteFB)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataSpatialAnchorCreateCompleteFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataSpatialAnchorCreateCompleteFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpatialAnchorCreateCompleteFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpatialAnchorCreateCompleteFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpatialAnchorCreateCompleteFB),
            "::",
            stringify!(requestId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpatialAnchorCreateCompleteFB),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpatialAnchorCreateCompleteFB),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpatialAnchorCreateCompleteFB),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceSetStatusCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
    pub space: XrSpace,
    pub uuid: XrUuidEXT,
    pub componentType: XrSpaceComponentTypeFB,
    pub enabled: XrBool32,
}
#[test]
fn bindgen_test_layout_XrEventDataSpaceSetStatusCompleteFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataSpaceSetStatusCompleteFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataSpaceSetStatusCompleteFB>(),
        64usize,
        concat!("Size of: ", stringify!(XrEventDataSpaceSetStatusCompleteFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataSpaceSetStatusCompleteFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataSpaceSetStatusCompleteFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSetStatusCompleteFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSetStatusCompleteFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSetStatusCompleteFB),
            "::",
            stringify!(requestId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSetStatusCompleteFB),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSetStatusCompleteFB),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSetStatusCompleteFB),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentType) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSetStatusCompleteFB),
            "::",
            stringify!(componentType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSetStatusCompleteFB),
            "::",
            stringify!(enabled)
        )
    );
}
pub type PFN_xrCreateSpatialAnchorFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        info: *const XrSpatialAnchorCreateInfoFB,
        requestId: *mut XrAsyncRequestIdFB,
    ) -> XrResult,
>;
pub type PFN_xrGetSpaceUuidFB =
    ::std::option::Option<unsafe extern "C" fn(space: XrSpace, uuid: *mut XrUuidEXT) -> XrResult>;
pub type PFN_xrEnumerateSpaceSupportedComponentsFB = ::std::option::Option<
    unsafe extern "C" fn(
        space: XrSpace,
        componentTypeCapacityInput: u32,
        componentTypeCountOutput: *mut u32,
        componentTypes: *mut XrSpaceComponentTypeFB,
    ) -> XrResult,
>;
pub type PFN_xrSetSpaceComponentStatusFB = ::std::option::Option<
    unsafe extern "C" fn(
        space: XrSpace,
        info: *const XrSpaceComponentStatusSetInfoFB,
        requestId: *mut XrAsyncRequestIdFB,
    ) -> XrResult,
>;
pub type PFN_xrGetSpaceComponentStatusFB = ::std::option::Option<
    unsafe extern "C" fn(
        space: XrSpace,
        componentType: XrSpaceComponentTypeFB,
        status: *mut XrSpaceComponentStatusFB,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationProfileFB_T {
    _unused: [u8; 0],
}
pub type XrFoveationProfileFB = *mut XrFoveationProfileFB_T;
pub type XrSwapchainCreateFoveationFlagsFB = XrFlags64;
pub const XR_SWAPCHAIN_CREATE_FOVEATION_SCALED_BIN_BIT_FB: XrSwapchainCreateFoveationFlagsFB = 1;
pub const XR_SWAPCHAIN_CREATE_FOVEATION_FRAGMENT_DENSITY_MAP_BIT_FB:
    XrSwapchainCreateFoveationFlagsFB = 2;
pub type XrSwapchainStateFoveationFlagsFB = XrFlags64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationProfileCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrFoveationProfileCreateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrFoveationProfileCreateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFoveationProfileCreateInfoFB>(),
        16usize,
        concat!("Size of: ", stringify!(XrFoveationProfileCreateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFoveationProfileCreateInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFoveationProfileCreateInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationProfileCreateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationProfileCreateInfoFB),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainCreateInfoFoveationFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub flags: XrSwapchainCreateFoveationFlagsFB,
}
#[test]
fn bindgen_test_layout_XrSwapchainCreateInfoFoveationFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSwapchainCreateInfoFoveationFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainCreateInfoFoveationFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSwapchainCreateInfoFoveationFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainCreateInfoFoveationFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSwapchainCreateInfoFoveationFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfoFoveationFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfoFoveationFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfoFoveationFB),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainStateFoveationFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub flags: XrSwapchainStateFoveationFlagsFB,
    pub profile: XrFoveationProfileFB,
}
#[test]
fn bindgen_test_layout_XrSwapchainStateFoveationFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSwapchainStateFoveationFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainStateFoveationFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrSwapchainStateFoveationFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainStateFoveationFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainStateFoveationFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainStateFoveationFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainStateFoveationFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainStateFoveationFB),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainStateFoveationFB),
            "::",
            stringify!(profile)
        )
    );
}
pub type PFN_xrCreateFoveationProfileFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrFoveationProfileCreateInfoFB,
        profile: *mut XrFoveationProfileFB,
    ) -> XrResult,
>;
pub type PFN_xrDestroyFoveationProfileFB =
    ::std::option::Option<unsafe extern "C" fn(profile: XrFoveationProfileFB) -> XrResult>;
pub const XrFoveationLevelFB_XR_FOVEATION_LEVEL_NONE_FB: XrFoveationLevelFB = 0;
pub const XrFoveationLevelFB_XR_FOVEATION_LEVEL_LOW_FB: XrFoveationLevelFB = 1;
pub const XrFoveationLevelFB_XR_FOVEATION_LEVEL_MEDIUM_FB: XrFoveationLevelFB = 2;
pub const XrFoveationLevelFB_XR_FOVEATION_LEVEL_HIGH_FB: XrFoveationLevelFB = 3;
pub const XrFoveationLevelFB_XR_FOVEATION_LEVEL_MAX_ENUM_FB: XrFoveationLevelFB = 2147483647;
pub type XrFoveationLevelFB = ::std::os::raw::c_int;
pub const XrFoveationDynamicFB_XR_FOVEATION_DYNAMIC_DISABLED_FB: XrFoveationDynamicFB = 0;
pub const XrFoveationDynamicFB_XR_FOVEATION_DYNAMIC_LEVEL_ENABLED_FB: XrFoveationDynamicFB = 1;
pub const XrFoveationDynamicFB_XR_FOVEATION_DYNAMIC_MAX_ENUM_FB: XrFoveationDynamicFB = 2147483647;
pub type XrFoveationDynamicFB = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationLevelProfileCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub level: XrFoveationLevelFB,
    pub verticalOffset: f32,
    pub dynamic: XrFoveationDynamicFB,
}
#[test]
fn bindgen_test_layout_XrFoveationLevelProfileCreateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrFoveationLevelProfileCreateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFoveationLevelProfileCreateInfoFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrFoveationLevelProfileCreateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFoveationLevelProfileCreateInfoFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrFoveationLevelProfileCreateInfoFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationLevelProfileCreateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationLevelProfileCreateInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationLevelProfileCreateInfoFB),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verticalOffset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationLevelProfileCreateInfoFB),
            "::",
            stringify!(verticalOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamic) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationLevelProfileCreateInfoFB),
            "::",
            stringify!(dynamic)
        )
    );
}
pub type XrKeyboardTrackingFlagsFB = XrFlags64;
pub const XR_KEYBOARD_TRACKING_EXISTS_BIT_FB: XrKeyboardTrackingFlagsFB = 1;
pub const XR_KEYBOARD_TRACKING_LOCAL_BIT_FB: XrKeyboardTrackingFlagsFB = 2;
pub const XR_KEYBOARD_TRACKING_REMOTE_BIT_FB: XrKeyboardTrackingFlagsFB = 4;
pub const XR_KEYBOARD_TRACKING_CONNECTED_BIT_FB: XrKeyboardTrackingFlagsFB = 8;
pub type XrKeyboardTrackingQueryFlagsFB = XrFlags64;
pub const XR_KEYBOARD_TRACKING_QUERY_LOCAL_BIT_FB: XrKeyboardTrackingQueryFlagsFB = 2;
pub const XR_KEYBOARD_TRACKING_QUERY_REMOTE_BIT_FB: XrKeyboardTrackingQueryFlagsFB = 4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemKeyboardTrackingPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsKeyboardTracking: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemKeyboardTrackingPropertiesFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemKeyboardTrackingPropertiesFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemKeyboardTrackingPropertiesFB>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemKeyboardTrackingPropertiesFB)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemKeyboardTrackingPropertiesFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemKeyboardTrackingPropertiesFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemKeyboardTrackingPropertiesFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemKeyboardTrackingPropertiesFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsKeyboardTracking) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemKeyboardTrackingPropertiesFB),
            "::",
            stringify!(supportsKeyboardTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrKeyboardTrackingDescriptionFB {
    pub trackedKeyboardId: u64,
    pub size: XrVector3f,
    pub flags: XrKeyboardTrackingFlagsFB,
    pub name: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_XrKeyboardTrackingDescriptionFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrKeyboardTrackingDescriptionFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrKeyboardTrackingDescriptionFB>(),
        160usize,
        concat!("Size of: ", stringify!(XrKeyboardTrackingDescriptionFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrKeyboardTrackingDescriptionFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrKeyboardTrackingDescriptionFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trackedKeyboardId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrKeyboardTrackingDescriptionFB),
            "::",
            stringify!(trackedKeyboardId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrKeyboardTrackingDescriptionFB),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrKeyboardTrackingDescriptionFB),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrKeyboardTrackingDescriptionFB),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrKeyboardSpaceCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub trackedKeyboardId: u64,
}
#[test]
fn bindgen_test_layout_XrKeyboardSpaceCreateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrKeyboardSpaceCreateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrKeyboardSpaceCreateInfoFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrKeyboardSpaceCreateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrKeyboardSpaceCreateInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrKeyboardSpaceCreateInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrKeyboardSpaceCreateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrKeyboardSpaceCreateInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trackedKeyboardId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrKeyboardSpaceCreateInfoFB),
            "::",
            stringify!(trackedKeyboardId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrKeyboardTrackingQueryFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub flags: XrKeyboardTrackingQueryFlagsFB,
}
#[test]
fn bindgen_test_layout_XrKeyboardTrackingQueryFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrKeyboardTrackingQueryFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrKeyboardTrackingQueryFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrKeyboardTrackingQueryFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrKeyboardTrackingQueryFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrKeyboardTrackingQueryFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrKeyboardTrackingQueryFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrKeyboardTrackingQueryFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrKeyboardTrackingQueryFB),
            "::",
            stringify!(flags)
        )
    );
}
pub type PFN_xrQuerySystemTrackedKeyboardFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        queryInfo: *const XrKeyboardTrackingQueryFB,
        keyboard: *mut XrKeyboardTrackingDescriptionFB,
    ) -> XrResult,
>;
pub type PFN_xrCreateKeyboardSpaceFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrKeyboardSpaceCreateInfoFB,
        keyboardSpace: *mut XrSpace,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrTriangleMeshFB_T {
    _unused: [u8; 0],
}
pub type XrTriangleMeshFB = *mut XrTriangleMeshFB_T;
pub const XrWindingOrderFB_XR_WINDING_ORDER_UNKNOWN_FB: XrWindingOrderFB = 0;
pub const XrWindingOrderFB_XR_WINDING_ORDER_CW_FB: XrWindingOrderFB = 1;
pub const XrWindingOrderFB_XR_WINDING_ORDER_CCW_FB: XrWindingOrderFB = 2;
pub const XrWindingOrderFB_XR_WINDING_ORDER_MAX_ENUM_FB: XrWindingOrderFB = 2147483647;
pub type XrWindingOrderFB = ::std::os::raw::c_int;
pub type XrTriangleMeshFlagsFB = XrFlags64;
pub const XR_TRIANGLE_MESH_MUTABLE_BIT_FB: XrTriangleMeshFlagsFB = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrTriangleMeshCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrTriangleMeshFlagsFB,
    pub windingOrder: XrWindingOrderFB,
    pub vertexCount: u32,
    pub vertexBuffer: *const XrVector3f,
    pub triangleCount: u32,
    pub indexBuffer: *const u32,
}
#[test]
fn bindgen_test_layout_XrTriangleMeshCreateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrTriangleMeshCreateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrTriangleMeshCreateInfoFB>(),
        56usize,
        concat!("Size of: ", stringify!(XrTriangleMeshCreateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrTriangleMeshCreateInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrTriangleMeshCreateInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrTriangleMeshCreateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrTriangleMeshCreateInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrTriangleMeshCreateInfoFB),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windingOrder) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrTriangleMeshCreateInfoFB),
            "::",
            stringify!(windingOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrTriangleMeshCreateInfoFB),
            "::",
            stringify!(vertexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexBuffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrTriangleMeshCreateInfoFB),
            "::",
            stringify!(vertexBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).triangleCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrTriangleMeshCreateInfoFB),
            "::",
            stringify!(triangleCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexBuffer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrTriangleMeshCreateInfoFB),
            "::",
            stringify!(indexBuffer)
        )
    );
}
pub type PFN_xrCreateTriangleMeshFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrTriangleMeshCreateInfoFB,
        outTriangleMesh: *mut XrTriangleMeshFB,
    ) -> XrResult,
>;
pub type PFN_xrDestroyTriangleMeshFB =
    ::std::option::Option<unsafe extern "C" fn(mesh: XrTriangleMeshFB) -> XrResult>;
pub type PFN_xrTriangleMeshGetVertexBufferFB = ::std::option::Option<
    unsafe extern "C" fn(mesh: XrTriangleMeshFB, outVertexBuffer: *mut *mut XrVector3f) -> XrResult,
>;
pub type PFN_xrTriangleMeshGetIndexBufferFB = ::std::option::Option<
    unsafe extern "C" fn(mesh: XrTriangleMeshFB, outIndexBuffer: *mut *mut u32) -> XrResult,
>;
pub type PFN_xrTriangleMeshBeginUpdateFB =
    ::std::option::Option<unsafe extern "C" fn(mesh: XrTriangleMeshFB) -> XrResult>;
pub type PFN_xrTriangleMeshEndUpdateFB = ::std::option::Option<
    unsafe extern "C" fn(mesh: XrTriangleMeshFB, vertexCount: u32, triangleCount: u32) -> XrResult,
>;
pub type PFN_xrTriangleMeshBeginVertexBufferUpdateFB = ::std::option::Option<
    unsafe extern "C" fn(mesh: XrTriangleMeshFB, outVertexCount: *mut u32) -> XrResult,
>;
pub type PFN_xrTriangleMeshEndVertexBufferUpdateFB =
    ::std::option::Option<unsafe extern "C" fn(mesh: XrTriangleMeshFB) -> XrResult>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughFB_T {
    _unused: [u8; 0],
}
pub type XrPassthroughFB = *mut XrPassthroughFB_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughLayerFB_T {
    _unused: [u8; 0],
}
pub type XrPassthroughLayerFB = *mut XrPassthroughLayerFB_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrGeometryInstanceFB_T {
    _unused: [u8; 0],
}
pub type XrGeometryInstanceFB = *mut XrGeometryInstanceFB_T;
pub const XrPassthroughLayerPurposeFB_XR_PASSTHROUGH_LAYER_PURPOSE_RECONSTRUCTION_FB:
    XrPassthroughLayerPurposeFB = 0;
pub const XrPassthroughLayerPurposeFB_XR_PASSTHROUGH_LAYER_PURPOSE_PROJECTED_FB:
    XrPassthroughLayerPurposeFB = 1;
pub const XrPassthroughLayerPurposeFB_XR_PASSTHROUGH_LAYER_PURPOSE_TRACKED_KEYBOARD_HANDS_FB:
    XrPassthroughLayerPurposeFB = 1000203001;
pub const XrPassthroughLayerPurposeFB_XR_PASSTHROUGH_LAYER_PURPOSE_TRACKED_KEYBOARD_MASKED_HANDS_FB : XrPassthroughLayerPurposeFB = 1000203002 ;
pub const XrPassthroughLayerPurposeFB_XR_PASSTHROUGH_LAYER_PURPOSE_MAX_ENUM_FB:
    XrPassthroughLayerPurposeFB = 2147483647;
pub type XrPassthroughLayerPurposeFB = ::std::os::raw::c_int;
pub type XrPassthroughCapabilityFlagsFB = XrFlags64;
pub const XR_PASSTHROUGH_CAPABILITY_BIT_FB: XrPassthroughCapabilityFlagsFB = 1;
pub const XR_PASSTHROUGH_CAPABILITY_COLOR_BIT_FB: XrPassthroughCapabilityFlagsFB = 2;
pub const XR_PASSTHROUGH_CAPABILITY_LAYER_DEPTH_BIT_FB: XrPassthroughCapabilityFlagsFB = 4;
pub type XrPassthroughFlagsFB = XrFlags64;
pub const XR_PASSTHROUGH_IS_RUNNING_AT_CREATION_BIT_FB: XrPassthroughFlagsFB = 1;
pub const XR_PASSTHROUGH_LAYER_DEPTH_BIT_FB: XrPassthroughFlagsFB = 2;
pub type XrPassthroughStateChangedFlagsFB = XrFlags64;
pub const XR_PASSTHROUGH_STATE_CHANGED_REINIT_REQUIRED_BIT_FB: XrPassthroughStateChangedFlagsFB = 1;
pub const XR_PASSTHROUGH_STATE_CHANGED_NON_RECOVERABLE_ERROR_BIT_FB:
    XrPassthroughStateChangedFlagsFB = 2;
pub const XR_PASSTHROUGH_STATE_CHANGED_RECOVERABLE_ERROR_BIT_FB: XrPassthroughStateChangedFlagsFB =
    4;
pub const XR_PASSTHROUGH_STATE_CHANGED_RESTORED_ERROR_BIT_FB: XrPassthroughStateChangedFlagsFB = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemPassthroughPropertiesFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub supportsPassthrough: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemPassthroughPropertiesFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemPassthroughPropertiesFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemPassthroughPropertiesFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemPassthroughPropertiesFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemPassthroughPropertiesFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSystemPassthroughPropertiesFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemPassthroughPropertiesFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemPassthroughPropertiesFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsPassthrough) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemPassthroughPropertiesFB),
            "::",
            stringify!(supportsPassthrough)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemPassthroughProperties2FB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub capabilities: XrPassthroughCapabilityFlagsFB,
}
#[test]
fn bindgen_test_layout_XrSystemPassthroughProperties2FB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemPassthroughProperties2FB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemPassthroughProperties2FB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemPassthroughProperties2FB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemPassthroughProperties2FB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemPassthroughProperties2FB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemPassthroughProperties2FB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemPassthroughProperties2FB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemPassthroughProperties2FB),
            "::",
            stringify!(capabilities)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrPassthroughFlagsFB,
}
#[test]
fn bindgen_test_layout_XrPassthroughCreateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughCreateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughCreateInfoFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrPassthroughCreateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughCreateInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPassthroughCreateInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughCreateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughCreateInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughCreateInfoFB),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughLayerCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub passthrough: XrPassthroughFB,
    pub flags: XrPassthroughFlagsFB,
    pub purpose: XrPassthroughLayerPurposeFB,
}
#[test]
fn bindgen_test_layout_XrPassthroughLayerCreateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughLayerCreateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughLayerCreateInfoFB>(),
        40usize,
        concat!("Size of: ", stringify!(XrPassthroughLayerCreateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughLayerCreateInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPassthroughLayerCreateInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughLayerCreateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughLayerCreateInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passthrough) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughLayerCreateInfoFB),
            "::",
            stringify!(passthrough)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughLayerCreateInfoFB),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purpose) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughLayerCreateInfoFB),
            "::",
            stringify!(purpose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerPassthroughFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub layerHandle: XrPassthroughLayerFB,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerPassthroughFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerPassthroughFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerPassthroughFB>(),
        40usize,
        concat!("Size of: ", stringify!(XrCompositionLayerPassthroughFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerPassthroughFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerPassthroughFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerPassthroughFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerPassthroughFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerPassthroughFB),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerPassthroughFB),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerHandle) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerPassthroughFB),
            "::",
            stringify!(layerHandle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrGeometryInstanceCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layer: XrPassthroughLayerFB,
    pub mesh: XrTriangleMeshFB,
    pub baseSpace: XrSpace,
    pub pose: XrPosef,
    pub scale: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrGeometryInstanceCreateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrGeometryInstanceCreateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrGeometryInstanceCreateInfoFB>(),
        80usize,
        concat!("Size of: ", stringify!(XrGeometryInstanceCreateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrGeometryInstanceCreateInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrGeometryInstanceCreateInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceCreateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceCreateInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceCreateInfoFB),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mesh) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceCreateInfoFB),
            "::",
            stringify!(mesh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseSpace) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceCreateInfoFB),
            "::",
            stringify!(baseSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceCreateInfoFB),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceCreateInfoFB),
            "::",
            stringify!(scale)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrGeometryInstanceTransformFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
    pub pose: XrPosef,
    pub scale: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrGeometryInstanceTransformFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrGeometryInstanceTransformFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrGeometryInstanceTransformFB>(),
        72usize,
        concat!("Size of: ", stringify!(XrGeometryInstanceTransformFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrGeometryInstanceTransformFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrGeometryInstanceTransformFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceTransformFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceTransformFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseSpace) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceTransformFB),
            "::",
            stringify!(baseSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceTransformFB),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceTransformFB),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGeometryInstanceTransformFB),
            "::",
            stringify!(scale)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughStyleFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub textureOpacityFactor: f32,
    pub edgeColor: XrColor4f,
}
#[test]
fn bindgen_test_layout_XrPassthroughStyleFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughStyleFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughStyleFB>(),
        40usize,
        concat!("Size of: ", stringify!(XrPassthroughStyleFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughStyleFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPassthroughStyleFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughStyleFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughStyleFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureOpacityFactor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughStyleFB),
            "::",
            stringify!(textureOpacityFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edgeColor) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughStyleFB),
            "::",
            stringify!(edgeColor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorMapMonoToRgbaFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub textureColorMap: [XrColor4f; 256usize],
}
#[test]
fn bindgen_test_layout_XrPassthroughColorMapMonoToRgbaFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughColorMapMonoToRgbaFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughColorMapMonoToRgbaFB>(),
        4112usize,
        concat!("Size of: ", stringify!(XrPassthroughColorMapMonoToRgbaFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughColorMapMonoToRgbaFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrPassthroughColorMapMonoToRgbaFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapMonoToRgbaFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapMonoToRgbaFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureColorMap) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapMonoToRgbaFB),
            "::",
            stringify!(textureColorMap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorMapMonoToMonoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub textureColorMap: [u8; 256usize],
}
#[test]
fn bindgen_test_layout_XrPassthroughColorMapMonoToMonoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughColorMapMonoToMonoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughColorMapMonoToMonoFB>(),
        272usize,
        concat!("Size of: ", stringify!(XrPassthroughColorMapMonoToMonoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughColorMapMonoToMonoFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrPassthroughColorMapMonoToMonoFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapMonoToMonoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapMonoToMonoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureColorMap) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapMonoToMonoFB),
            "::",
            stringify!(textureColorMap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughBrightnessContrastSaturationFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub brightness: f32,
    pub contrast: f32,
    pub saturation: f32,
}
#[test]
fn bindgen_test_layout_XrPassthroughBrightnessContrastSaturationFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughBrightnessContrastSaturationFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughBrightnessContrastSaturationFB>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrPassthroughBrightnessContrastSaturationFB)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughBrightnessContrastSaturationFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrPassthroughBrightnessContrastSaturationFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughBrightnessContrastSaturationFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughBrightnessContrastSaturationFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brightness) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughBrightnessContrastSaturationFB),
            "::",
            stringify!(brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contrast) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughBrightnessContrastSaturationFB),
            "::",
            stringify!(contrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saturation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughBrightnessContrastSaturationFB),
            "::",
            stringify!(saturation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataPassthroughStateChangedFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrPassthroughStateChangedFlagsFB,
}
#[test]
fn bindgen_test_layout_XrEventDataPassthroughStateChangedFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataPassthroughStateChangedFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataPassthroughStateChangedFB>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataPassthroughStateChangedFB)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataPassthroughStateChangedFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataPassthroughStateChangedFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPassthroughStateChangedFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPassthroughStateChangedFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPassthroughStateChangedFB),
            "::",
            stringify!(flags)
        )
    );
}
pub type PFN_xrCreatePassthroughFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrPassthroughCreateInfoFB,
        outPassthrough: *mut XrPassthroughFB,
    ) -> XrResult,
>;
pub type PFN_xrDestroyPassthroughFB =
    ::std::option::Option<unsafe extern "C" fn(passthrough: XrPassthroughFB) -> XrResult>;
pub type PFN_xrPassthroughStartFB =
    ::std::option::Option<unsafe extern "C" fn(passthrough: XrPassthroughFB) -> XrResult>;
pub type PFN_xrPassthroughPauseFB =
    ::std::option::Option<unsafe extern "C" fn(passthrough: XrPassthroughFB) -> XrResult>;
pub type PFN_xrCreatePassthroughLayerFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrPassthroughLayerCreateInfoFB,
        outLayer: *mut XrPassthroughLayerFB,
    ) -> XrResult,
>;
pub type PFN_xrDestroyPassthroughLayerFB =
    ::std::option::Option<unsafe extern "C" fn(layer: XrPassthroughLayerFB) -> XrResult>;
pub type PFN_xrPassthroughLayerPauseFB =
    ::std::option::Option<unsafe extern "C" fn(layer: XrPassthroughLayerFB) -> XrResult>;
pub type PFN_xrPassthroughLayerResumeFB =
    ::std::option::Option<unsafe extern "C" fn(layer: XrPassthroughLayerFB) -> XrResult>;
pub type PFN_xrPassthroughLayerSetStyleFB = ::std::option::Option<
    unsafe extern "C" fn(
        layer: XrPassthroughLayerFB,
        style: *const XrPassthroughStyleFB,
    ) -> XrResult,
>;
pub type PFN_xrCreateGeometryInstanceFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrGeometryInstanceCreateInfoFB,
        outGeometryInstance: *mut XrGeometryInstanceFB,
    ) -> XrResult,
>;
pub type PFN_xrDestroyGeometryInstanceFB =
    ::std::option::Option<unsafe extern "C" fn(instance: XrGeometryInstanceFB) -> XrResult>;
pub type PFN_xrGeometryInstanceSetTransformFB = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrGeometryInstanceFB,
        transformation: *const XrGeometryInstanceTransformFB,
    ) -> XrResult,
>;
pub type XrRenderModelKeyFB = u64;
pub type XrRenderModelFlagsFB = XrFlags64;
pub const XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_1_BIT_FB: XrRenderModelFlagsFB = 1;
pub const XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_2_BIT_FB: XrRenderModelFlagsFB = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRenderModelPathInfoFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub path: XrPath,
}
#[test]
fn bindgen_test_layout_XrRenderModelPathInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrRenderModelPathInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrRenderModelPathInfoFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrRenderModelPathInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrRenderModelPathInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrRenderModelPathInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelPathInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelPathInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelPathInfoFB),
            "::",
            stringify!(path)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRenderModelPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub vendorId: u32,
    pub modelName: [::std::os::raw::c_char; 64usize],
    pub modelKey: XrRenderModelKeyFB,
    pub modelVersion: u32,
    pub flags: XrRenderModelFlagsFB,
}
#[test]
fn bindgen_test_layout_XrRenderModelPropertiesFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrRenderModelPropertiesFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrRenderModelPropertiesFB>(),
        112usize,
        concat!("Size of: ", stringify!(XrRenderModelPropertiesFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrRenderModelPropertiesFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrRenderModelPropertiesFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelPropertiesFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelPropertiesFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendorId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelPropertiesFB),
            "::",
            stringify!(vendorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modelName) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelPropertiesFB),
            "::",
            stringify!(modelName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modelKey) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelPropertiesFB),
            "::",
            stringify!(modelKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modelVersion) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelPropertiesFB),
            "::",
            stringify!(modelVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelPropertiesFB),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRenderModelBufferFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub bufferCapacityInput: u32,
    pub bufferCountOutput: u32,
    pub buffer: *mut u8,
}
#[test]
fn bindgen_test_layout_XrRenderModelBufferFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrRenderModelBufferFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrRenderModelBufferFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrRenderModelBufferFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrRenderModelBufferFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrRenderModelBufferFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelBufferFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelBufferFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelBufferFB),
            "::",
            stringify!(bufferCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelBufferFB),
            "::",
            stringify!(bufferCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelBufferFB),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRenderModelLoadInfoFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub modelKey: XrRenderModelKeyFB,
}
#[test]
fn bindgen_test_layout_XrRenderModelLoadInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrRenderModelLoadInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrRenderModelLoadInfoFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrRenderModelLoadInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrRenderModelLoadInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrRenderModelLoadInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelLoadInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelLoadInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modelKey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelLoadInfoFB),
            "::",
            stringify!(modelKey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemRenderModelPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsRenderModelLoading: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemRenderModelPropertiesFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemRenderModelPropertiesFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemRenderModelPropertiesFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemRenderModelPropertiesFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemRenderModelPropertiesFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSystemRenderModelPropertiesFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemRenderModelPropertiesFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemRenderModelPropertiesFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsRenderModelLoading) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemRenderModelPropertiesFB),
            "::",
            stringify!(supportsRenderModelLoading)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRenderModelCapabilitiesRequestFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub flags: XrRenderModelFlagsFB,
}
#[test]
fn bindgen_test_layout_XrRenderModelCapabilitiesRequestFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrRenderModelCapabilitiesRequestFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrRenderModelCapabilitiesRequestFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrRenderModelCapabilitiesRequestFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrRenderModelCapabilitiesRequestFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrRenderModelCapabilitiesRequestFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelCapabilitiesRequestFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelCapabilitiesRequestFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRenderModelCapabilitiesRequestFB),
            "::",
            stringify!(flags)
        )
    );
}
pub type PFN_xrEnumerateRenderModelPathsFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        pathCapacityInput: u32,
        pathCountOutput: *mut u32,
        paths: *mut XrRenderModelPathInfoFB,
    ) -> XrResult,
>;
pub type PFN_xrGetRenderModelPropertiesFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        path: XrPath,
        properties: *mut XrRenderModelPropertiesFB,
    ) -> XrResult,
>;
pub type PFN_xrLoadRenderModelFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        info: *const XrRenderModelLoadInfoFB,
        buffer: *mut XrRenderModelBufferFB,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewLocateFoveatedRenderingVARJO {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub foveatedRenderingActive: XrBool32,
}
#[test]
fn bindgen_test_layout_XrViewLocateFoveatedRenderingVARJO() {
    const UNINIT: ::std::mem::MaybeUninit<XrViewLocateFoveatedRenderingVARJO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrViewLocateFoveatedRenderingVARJO>(),
        24usize,
        concat!("Size of: ", stringify!(XrViewLocateFoveatedRenderingVARJO))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewLocateFoveatedRenderingVARJO>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrViewLocateFoveatedRenderingVARJO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateFoveatedRenderingVARJO),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateFoveatedRenderingVARJO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).foveatedRenderingActive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateFoveatedRenderingVARJO),
            "::",
            stringify!(foveatedRenderingActive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveatedViewConfigurationViewVARJO {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub foveatedRenderingActive: XrBool32,
}
#[test]
fn bindgen_test_layout_XrFoveatedViewConfigurationViewVARJO() {
    const UNINIT: ::std::mem::MaybeUninit<XrFoveatedViewConfigurationViewVARJO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFoveatedViewConfigurationViewVARJO>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrFoveatedViewConfigurationViewVARJO)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrFoveatedViewConfigurationViewVARJO>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrFoveatedViewConfigurationViewVARJO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveatedViewConfigurationViewVARJO),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveatedViewConfigurationViewVARJO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).foveatedRenderingActive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveatedViewConfigurationViewVARJO),
            "::",
            stringify!(foveatedRenderingActive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemFoveatedRenderingPropertiesVARJO {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsFoveatedRendering: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemFoveatedRenderingPropertiesVARJO() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemFoveatedRenderingPropertiesVARJO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemFoveatedRenderingPropertiesVARJO>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemFoveatedRenderingPropertiesVARJO)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemFoveatedRenderingPropertiesVARJO>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemFoveatedRenderingPropertiesVARJO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFoveatedRenderingPropertiesVARJO),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFoveatedRenderingPropertiesVARJO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsFoveatedRendering) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFoveatedRenderingPropertiesVARJO),
            "::",
            stringify!(supportsFoveatedRendering)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerDepthTestVARJO {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub depthTestRangeNearZ: f32,
    pub depthTestRangeFarZ: f32,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerDepthTestVARJO() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerDepthTestVARJO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerDepthTestVARJO>(),
        24usize,
        concat!("Size of: ", stringify!(XrCompositionLayerDepthTestVARJO))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerDepthTestVARJO>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrCompositionLayerDepthTestVARJO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthTestVARJO),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthTestVARJO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthTestRangeNearZ) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthTestVARJO),
            "::",
            stringify!(depthTestRangeNearZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthTestRangeFarZ) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthTestVARJO),
            "::",
            stringify!(depthTestRangeFarZ)
        )
    );
}
pub type PFN_xrSetEnvironmentDepthEstimationVARJO =
    ::std::option::Option<unsafe extern "C" fn(session: XrSession, enabled: XrBool32) -> XrResult>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemMarkerTrackingPropertiesVARJO {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsMarkerTracking: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemMarkerTrackingPropertiesVARJO() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemMarkerTrackingPropertiesVARJO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemMarkerTrackingPropertiesVARJO>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemMarkerTrackingPropertiesVARJO)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemMarkerTrackingPropertiesVARJO>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemMarkerTrackingPropertiesVARJO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemMarkerTrackingPropertiesVARJO),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemMarkerTrackingPropertiesVARJO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsMarkerTracking) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemMarkerTrackingPropertiesVARJO),
            "::",
            stringify!(supportsMarkerTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataMarkerTrackingUpdateVARJO {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub markerId: u64,
    pub isActive: XrBool32,
    pub isPredicted: XrBool32,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrEventDataMarkerTrackingUpdateVARJO() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataMarkerTrackingUpdateVARJO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataMarkerTrackingUpdateVARJO>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataMarkerTrackingUpdateVARJO)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataMarkerTrackingUpdateVARJO>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataMarkerTrackingUpdateVARJO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMarkerTrackingUpdateVARJO),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMarkerTrackingUpdateVARJO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).markerId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMarkerTrackingUpdateVARJO),
            "::",
            stringify!(markerId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isActive) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMarkerTrackingUpdateVARJO),
            "::",
            stringify!(isActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPredicted) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMarkerTrackingUpdateVARJO),
            "::",
            stringify!(isPredicted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMarkerTrackingUpdateVARJO),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerSpaceCreateInfoVARJO {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub markerId: u64,
    pub poseInMarkerSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrMarkerSpaceCreateInfoVARJO() {
    const UNINIT: ::std::mem::MaybeUninit<XrMarkerSpaceCreateInfoVARJO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrMarkerSpaceCreateInfoVARJO>(),
        56usize,
        concat!("Size of: ", stringify!(XrMarkerSpaceCreateInfoVARJO))
    );
    assert_eq!(
        ::std::mem::align_of::<XrMarkerSpaceCreateInfoVARJO>(),
        8usize,
        concat!("Alignment of ", stringify!(XrMarkerSpaceCreateInfoVARJO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerSpaceCreateInfoVARJO),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerSpaceCreateInfoVARJO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).markerId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerSpaceCreateInfoVARJO),
            "::",
            stringify!(markerId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInMarkerSpace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerSpaceCreateInfoVARJO),
            "::",
            stringify!(poseInMarkerSpace)
        )
    );
}
pub type PFN_xrSetMarkerTrackingVARJO =
    ::std::option::Option<unsafe extern "C" fn(session: XrSession, enabled: XrBool32) -> XrResult>;
pub type PFN_xrSetMarkerTrackingTimeoutVARJO = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, markerId: u64, timeout: XrDuration) -> XrResult,
>;
pub type PFN_xrSetMarkerTrackingPredictionVARJO = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, markerId: u64, enable: XrBool32) -> XrResult,
>;
pub type PFN_xrGetMarkerSizeVARJO = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, markerId: u64, size: *mut XrExtent2Df) -> XrResult,
>;
pub type PFN_xrCreateMarkerSpaceVARJO = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrMarkerSpaceCreateInfoVARJO,
        space: *mut XrSpace,
    ) -> XrResult,
>;
pub type PFN_xrSetViewOffsetVARJO =
    ::std::option::Option<unsafe extern "C" fn(session: XrSession, offset: f32) -> XrResult>;
pub type XrFrameEndInfoFlagsML = XrFlags64;
pub const XR_FRAME_END_INFO_PROTECTED_BIT_ML: XrFrameEndInfoFlagsML = 1;
pub const XR_FRAME_END_INFO_VIGNETTE_BIT_ML: XrFrameEndInfoFlagsML = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameEndInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub focusDistance: f32,
    pub flags: XrFrameEndInfoFlagsML,
}
#[test]
fn bindgen_test_layout_XrFrameEndInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrFrameEndInfoML> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFrameEndInfoML>(),
        32usize,
        concat!("Size of: ", stringify!(XrFrameEndInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFrameEndInfoML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFrameEndInfoML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfoML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).focusDistance) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfoML),
            "::",
            stringify!(focusDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfoML),
            "::",
            stringify!(flags)
        )
    );
}
pub type XrGlobalDimmerFrameEndInfoFlagsML = XrFlags64;
pub const XR_GLOBAL_DIMMER_FRAME_END_INFO_ENABLED_BIT_ML: XrGlobalDimmerFrameEndInfoFlagsML = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrGlobalDimmerFrameEndInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub dimmerValue: f32,
    pub flags: XrGlobalDimmerFrameEndInfoFlagsML,
}
#[test]
fn bindgen_test_layout_XrGlobalDimmerFrameEndInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrGlobalDimmerFrameEndInfoML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrGlobalDimmerFrameEndInfoML>(),
        32usize,
        concat!("Size of: ", stringify!(XrGlobalDimmerFrameEndInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrGlobalDimmerFrameEndInfoML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrGlobalDimmerFrameEndInfoML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGlobalDimmerFrameEndInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGlobalDimmerFrameEndInfoML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimmerValue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGlobalDimmerFrameEndInfoML),
            "::",
            stringify!(dimmerValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrGlobalDimmerFrameEndInfoML),
            "::",
            stringify!(flags)
        )
    );
}
pub type XrMarkerML = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorML_T {
    _unused: [u8; 0],
}
pub type XrMarkerDetectorML = *mut XrMarkerDetectorML_T;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_DEFAULT_ML:
    XrMarkerDetectorProfileML = 0;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_SPEED_ML: XrMarkerDetectorProfileML =
    1;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_ACCURACY_ML:
    XrMarkerDetectorProfileML = 2;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_SMALL_TARGETS_ML:
    XrMarkerDetectorProfileML = 3;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_LARGE_FOV_ML:
    XrMarkerDetectorProfileML = 4;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_CUSTOM_ML:
    XrMarkerDetectorProfileML = 5;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_MAX_ENUM_ML:
    XrMarkerDetectorProfileML = 2147483647;
pub type XrMarkerDetectorProfileML = ::std::os::raw::c_int;
pub const XrMarkerTypeML_XR_MARKER_TYPE_ARUCO_ML: XrMarkerTypeML = 0;
pub const XrMarkerTypeML_XR_MARKER_TYPE_APRIL_TAG_ML: XrMarkerTypeML = 1;
pub const XrMarkerTypeML_XR_MARKER_TYPE_QR_ML: XrMarkerTypeML = 2;
pub const XrMarkerTypeML_XR_MARKER_TYPE_EAN_13_ML: XrMarkerTypeML = 3;
pub const XrMarkerTypeML_XR_MARKER_TYPE_UPC_A_ML: XrMarkerTypeML = 4;
pub const XrMarkerTypeML_XR_MARKER_TYPE_CODE_128_ML: XrMarkerTypeML = 5;
pub const XrMarkerTypeML_XR_MARKER_TYPE_MAX_ENUM_ML: XrMarkerTypeML = 2147483647;
pub type XrMarkerTypeML = ::std::os::raw::c_int;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_4X4_50_ML: XrMarkerArucoDictML = 0;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_4X4_100_ML: XrMarkerArucoDictML = 1;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_4X4_250_ML: XrMarkerArucoDictML = 2;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_4X4_1000_ML: XrMarkerArucoDictML = 3;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_5X5_50_ML: XrMarkerArucoDictML = 4;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_5X5_100_ML: XrMarkerArucoDictML = 5;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_5X5_250_ML: XrMarkerArucoDictML = 6;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_5X5_1000_ML: XrMarkerArucoDictML = 7;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_6X6_50_ML: XrMarkerArucoDictML = 8;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_6X6_100_ML: XrMarkerArucoDictML = 9;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_6X6_250_ML: XrMarkerArucoDictML = 10;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_6X6_1000_ML: XrMarkerArucoDictML = 11;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_7X7_50_ML: XrMarkerArucoDictML = 12;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_7X7_100_ML: XrMarkerArucoDictML = 13;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_7X7_250_ML: XrMarkerArucoDictML = 14;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_7X7_1000_ML: XrMarkerArucoDictML = 15;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_MAX_ENUM_ML: XrMarkerArucoDictML = 2147483647;
pub type XrMarkerArucoDictML = ::std::os::raw::c_int;
pub const XrMarkerAprilTagDictML_XR_MARKER_APRIL_TAG_DICT_16H5_ML: XrMarkerAprilTagDictML = 0;
pub const XrMarkerAprilTagDictML_XR_MARKER_APRIL_TAG_DICT_25H9_ML: XrMarkerAprilTagDictML = 1;
pub const XrMarkerAprilTagDictML_XR_MARKER_APRIL_TAG_DICT_36H10_ML: XrMarkerAprilTagDictML = 2;
pub const XrMarkerAprilTagDictML_XR_MARKER_APRIL_TAG_DICT_36H11_ML: XrMarkerAprilTagDictML = 3;
pub const XrMarkerAprilTagDictML_XR_MARKER_APRIL_TAG_DICT_MAX_ENUM_ML: XrMarkerAprilTagDictML =
    2147483647;
pub type XrMarkerAprilTagDictML = ::std::os::raw::c_int;
pub const XrMarkerDetectorFpsML_XR_MARKER_DETECTOR_FPS_LOW_ML: XrMarkerDetectorFpsML = 0;
pub const XrMarkerDetectorFpsML_XR_MARKER_DETECTOR_FPS_MEDIUM_ML: XrMarkerDetectorFpsML = 1;
pub const XrMarkerDetectorFpsML_XR_MARKER_DETECTOR_FPS_HIGH_ML: XrMarkerDetectorFpsML = 2;
pub const XrMarkerDetectorFpsML_XR_MARKER_DETECTOR_FPS_MAX_ML: XrMarkerDetectorFpsML = 3;
pub const XrMarkerDetectorFpsML_XR_MARKER_DETECTOR_FPS_MAX_ENUM_ML: XrMarkerDetectorFpsML =
    2147483647;
pub type XrMarkerDetectorFpsML = ::std::os::raw::c_int;
pub const XrMarkerDetectorResolutionML_XR_MARKER_DETECTOR_RESOLUTION_LOW_ML:
    XrMarkerDetectorResolutionML = 0;
pub const XrMarkerDetectorResolutionML_XR_MARKER_DETECTOR_RESOLUTION_MEDIUM_ML:
    XrMarkerDetectorResolutionML = 1;
pub const XrMarkerDetectorResolutionML_XR_MARKER_DETECTOR_RESOLUTION_HIGH_ML:
    XrMarkerDetectorResolutionML = 2;
pub const XrMarkerDetectorResolutionML_XR_MARKER_DETECTOR_RESOLUTION_MAX_ENUM_ML:
    XrMarkerDetectorResolutionML = 2147483647;
pub type XrMarkerDetectorResolutionML = ::std::os::raw::c_int;
pub const XrMarkerDetectorCameraML_XR_MARKER_DETECTOR_CAMERA_RGB_CAMERA_ML:
    XrMarkerDetectorCameraML = 0;
pub const XrMarkerDetectorCameraML_XR_MARKER_DETECTOR_CAMERA_WORLD_CAMERAS_ML:
    XrMarkerDetectorCameraML = 1;
pub const XrMarkerDetectorCameraML_XR_MARKER_DETECTOR_CAMERA_MAX_ENUM_ML: XrMarkerDetectorCameraML =
    2147483647;
pub type XrMarkerDetectorCameraML = ::std::os::raw::c_int;
pub const XrMarkerDetectorCornerRefineMethodML_XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_NONE_ML:
    XrMarkerDetectorCornerRefineMethodML = 0;
pub const XrMarkerDetectorCornerRefineMethodML_XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_SUBPIX_ML:
    XrMarkerDetectorCornerRefineMethodML = 1;
pub const XrMarkerDetectorCornerRefineMethodML_XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_CONTOUR_ML : XrMarkerDetectorCornerRefineMethodML = 2 ;
pub const XrMarkerDetectorCornerRefineMethodML_XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_APRIL_TAG_ML : XrMarkerDetectorCornerRefineMethodML = 3 ;
pub const XrMarkerDetectorCornerRefineMethodML_XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_MAX_ENUM_ML : XrMarkerDetectorCornerRefineMethodML = 2147483647 ;
pub type XrMarkerDetectorCornerRefineMethodML = ::std::os::raw::c_int;
pub const XrMarkerDetectorFullAnalysisIntervalML_XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_MAX_ML : XrMarkerDetectorFullAnalysisIntervalML = 0 ;
pub const XrMarkerDetectorFullAnalysisIntervalML_XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_FAST_ML : XrMarkerDetectorFullAnalysisIntervalML = 1 ;
pub const XrMarkerDetectorFullAnalysisIntervalML_XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_MEDIUM_ML : XrMarkerDetectorFullAnalysisIntervalML = 2 ;
pub const XrMarkerDetectorFullAnalysisIntervalML_XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_SLOW_ML : XrMarkerDetectorFullAnalysisIntervalML = 3 ;
pub const XrMarkerDetectorFullAnalysisIntervalML_XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_MAX_ENUM_ML : XrMarkerDetectorFullAnalysisIntervalML = 2147483647 ;
pub type XrMarkerDetectorFullAnalysisIntervalML = ::std::os::raw::c_int;
pub const XrMarkerDetectorStatusML_XR_MARKER_DETECTOR_STATUS_PENDING_ML: XrMarkerDetectorStatusML =
    0;
pub const XrMarkerDetectorStatusML_XR_MARKER_DETECTOR_STATUS_READY_ML: XrMarkerDetectorStatusML = 1;
pub const XrMarkerDetectorStatusML_XR_MARKER_DETECTOR_STATUS_ERROR_ML: XrMarkerDetectorStatusML = 2;
pub const XrMarkerDetectorStatusML_XR_MARKER_DETECTOR_STATUS_MAX_ENUM_ML: XrMarkerDetectorStatusML =
    2147483647;
pub type XrMarkerDetectorStatusML = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemMarkerUnderstandingPropertiesML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsMarkerUnderstanding: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemMarkerUnderstandingPropertiesML() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemMarkerUnderstandingPropertiesML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemMarkerUnderstandingPropertiesML>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemMarkerUnderstandingPropertiesML)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemMarkerUnderstandingPropertiesML>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemMarkerUnderstandingPropertiesML)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemMarkerUnderstandingPropertiesML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemMarkerUnderstandingPropertiesML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsMarkerUnderstanding) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemMarkerUnderstandingPropertiesML),
            "::",
            stringify!(supportsMarkerUnderstanding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorCreateInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub profile: XrMarkerDetectorProfileML,
    pub markerType: XrMarkerTypeML,
}
#[test]
fn bindgen_test_layout_XrMarkerDetectorCreateInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrMarkerDetectorCreateInfoML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrMarkerDetectorCreateInfoML>(),
        24usize,
        concat!("Size of: ", stringify!(XrMarkerDetectorCreateInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrMarkerDetectorCreateInfoML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrMarkerDetectorCreateInfoML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorCreateInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorCreateInfoML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorCreateInfoML),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).markerType) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorCreateInfoML),
            "::",
            stringify!(markerType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorArucoInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub arucoDict: XrMarkerArucoDictML,
}
#[test]
fn bindgen_test_layout_XrMarkerDetectorArucoInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrMarkerDetectorArucoInfoML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrMarkerDetectorArucoInfoML>(),
        24usize,
        concat!("Size of: ", stringify!(XrMarkerDetectorArucoInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrMarkerDetectorArucoInfoML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrMarkerDetectorArucoInfoML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorArucoInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorArucoInfoML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arucoDict) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorArucoInfoML),
            "::",
            stringify!(arucoDict)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorSizeInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub markerLength: f32,
}
#[test]
fn bindgen_test_layout_XrMarkerDetectorSizeInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrMarkerDetectorSizeInfoML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrMarkerDetectorSizeInfoML>(),
        24usize,
        concat!("Size of: ", stringify!(XrMarkerDetectorSizeInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrMarkerDetectorSizeInfoML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrMarkerDetectorSizeInfoML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorSizeInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorSizeInfoML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).markerLength) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorSizeInfoML),
            "::",
            stringify!(markerLength)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorAprilTagInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub aprilTagDict: XrMarkerAprilTagDictML,
}
#[test]
fn bindgen_test_layout_XrMarkerDetectorAprilTagInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrMarkerDetectorAprilTagInfoML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrMarkerDetectorAprilTagInfoML>(),
        24usize,
        concat!("Size of: ", stringify!(XrMarkerDetectorAprilTagInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrMarkerDetectorAprilTagInfoML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrMarkerDetectorAprilTagInfoML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorAprilTagInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorAprilTagInfoML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aprilTagDict) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorAprilTagInfoML),
            "::",
            stringify!(aprilTagDict)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorCustomProfileInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub fpsHint: XrMarkerDetectorFpsML,
    pub resolutionHint: XrMarkerDetectorResolutionML,
    pub cameraHint: XrMarkerDetectorCameraML,
    pub cornerRefineMethod: XrMarkerDetectorCornerRefineMethodML,
    pub useEdgeRefinement: XrBool32,
    pub fullAnalysisIntervalHint: XrMarkerDetectorFullAnalysisIntervalML,
}
#[test]
fn bindgen_test_layout_XrMarkerDetectorCustomProfileInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrMarkerDetectorCustomProfileInfoML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrMarkerDetectorCustomProfileInfoML>(),
        40usize,
        concat!("Size of: ", stringify!(XrMarkerDetectorCustomProfileInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrMarkerDetectorCustomProfileInfoML>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrMarkerDetectorCustomProfileInfoML)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorCustomProfileInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorCustomProfileInfoML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpsHint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorCustomProfileInfoML),
            "::",
            stringify!(fpsHint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolutionHint) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorCustomProfileInfoML),
            "::",
            stringify!(resolutionHint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cameraHint) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorCustomProfileInfoML),
            "::",
            stringify!(cameraHint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cornerRefineMethod) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorCustomProfileInfoML),
            "::",
            stringify!(cornerRefineMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useEdgeRefinement) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorCustomProfileInfoML),
            "::",
            stringify!(useEdgeRefinement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullAnalysisIntervalHint) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorCustomProfileInfoML),
            "::",
            stringify!(fullAnalysisIntervalHint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorSnapshotInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrMarkerDetectorSnapshotInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrMarkerDetectorSnapshotInfoML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrMarkerDetectorSnapshotInfoML>(),
        16usize,
        concat!("Size of: ", stringify!(XrMarkerDetectorSnapshotInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrMarkerDetectorSnapshotInfoML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrMarkerDetectorSnapshotInfoML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorSnapshotInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorSnapshotInfoML),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorStateML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub state: XrMarkerDetectorStatusML,
}
#[test]
fn bindgen_test_layout_XrMarkerDetectorStateML() {
    const UNINIT: ::std::mem::MaybeUninit<XrMarkerDetectorStateML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrMarkerDetectorStateML>(),
        24usize,
        concat!("Size of: ", stringify!(XrMarkerDetectorStateML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrMarkerDetectorStateML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrMarkerDetectorStateML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorStateML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorStateML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerDetectorStateML),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerSpaceCreateInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub markerDetector: XrMarkerDetectorML,
    pub marker: XrMarkerML,
    pub poseInMarkerSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrMarkerSpaceCreateInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrMarkerSpaceCreateInfoML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrMarkerSpaceCreateInfoML>(),
        64usize,
        concat!("Size of: ", stringify!(XrMarkerSpaceCreateInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrMarkerSpaceCreateInfoML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrMarkerSpaceCreateInfoML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerSpaceCreateInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerSpaceCreateInfoML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).markerDetector) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerSpaceCreateInfoML),
            "::",
            stringify!(markerDetector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerSpaceCreateInfoML),
            "::",
            stringify!(marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInMarkerSpace) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMarkerSpaceCreateInfoML),
            "::",
            stringify!(poseInMarkerSpace)
        )
    );
}
pub type PFN_xrCreateMarkerDetectorML = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrMarkerDetectorCreateInfoML,
        markerDetector: *mut XrMarkerDetectorML,
    ) -> XrResult,
>;
pub type PFN_xrDestroyMarkerDetectorML =
    ::std::option::Option<unsafe extern "C" fn(markerDetector: XrMarkerDetectorML) -> XrResult>;
pub type PFN_xrSnapshotMarkerDetectorML = ::std::option::Option<
    unsafe extern "C" fn(
        markerDetector: XrMarkerDetectorML,
        snapshotInfo: *mut XrMarkerDetectorSnapshotInfoML,
    ) -> XrResult,
>;
pub type PFN_xrGetMarkerDetectorStateML = ::std::option::Option<
    unsafe extern "C" fn(
        markerDetector: XrMarkerDetectorML,
        state: *mut XrMarkerDetectorStateML,
    ) -> XrResult,
>;
pub type PFN_xrGetMarkersML = ::std::option::Option<
    unsafe extern "C" fn(
        markerDetector: XrMarkerDetectorML,
        markerCapacityInput: u32,
        markerCountOutput: *mut u32,
        markers: *mut XrMarkerML,
    ) -> XrResult,
>;
pub type PFN_xrGetMarkerReprojectionErrorML = ::std::option::Option<
    unsafe extern "C" fn(
        markerDetector: XrMarkerDetectorML,
        marker: XrMarkerML,
        reprojectionErrorMeters: *mut f32,
    ) -> XrResult,
>;
pub type PFN_xrGetMarkerLengthML = ::std::option::Option<
    unsafe extern "C" fn(
        markerDetector: XrMarkerDetectorML,
        marker: XrMarkerML,
        meters: *mut f32,
    ) -> XrResult,
>;
pub type PFN_xrGetMarkerNumberML = ::std::option::Option<
    unsafe extern "C" fn(
        markerDetector: XrMarkerDetectorML,
        marker: XrMarkerML,
        number: *mut u64,
    ) -> XrResult,
>;
pub type PFN_xrGetMarkerStringML = ::std::option::Option<
    unsafe extern "C" fn(
        markerDetector: XrMarkerDetectorML,
        marker: XrMarkerML,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult,
>;
pub type PFN_xrCreateMarkerSpaceML = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrMarkerSpaceCreateInfoML,
        space: *mut XrSpace,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExportedLocalizationMapML_T {
    _unused: [u8; 0],
}
pub type XrExportedLocalizationMapML = *mut XrExportedLocalizationMapML_T;
pub const XrLocalizationMapStateML_XR_LOCALIZATION_MAP_STATE_NOT_LOCALIZED_ML:
    XrLocalizationMapStateML = 0;
pub const XrLocalizationMapStateML_XR_LOCALIZATION_MAP_STATE_LOCALIZED_ML:
    XrLocalizationMapStateML = 1;
pub const XrLocalizationMapStateML_XR_LOCALIZATION_MAP_STATE_LOCALIZATION_PENDING_ML:
    XrLocalizationMapStateML = 2;
pub const XrLocalizationMapStateML_XR_LOCALIZATION_MAP_STATE_LOCALIZATION_SLEEPING_BEFORE_RETRY_ML : XrLocalizationMapStateML = 3 ;
pub const XrLocalizationMapStateML_XR_LOCALIZATION_MAP_STATE_MAX_ENUM_ML: XrLocalizationMapStateML =
    2147483647;
pub type XrLocalizationMapStateML = ::std::os::raw::c_int;
pub const XrLocalizationMapTypeML_XR_LOCALIZATION_MAP_TYPE_ON_DEVICE_ML: XrLocalizationMapTypeML =
    0;
pub const XrLocalizationMapTypeML_XR_LOCALIZATION_MAP_TYPE_CLOUD_ML: XrLocalizationMapTypeML = 1;
pub const XrLocalizationMapTypeML_XR_LOCALIZATION_MAP_TYPE_MAX_ENUM_ML: XrLocalizationMapTypeML =
    2147483647;
pub type XrLocalizationMapTypeML = ::std::os::raw::c_int;
pub const XrLocalizationMapConfidenceML_XR_LOCALIZATION_MAP_CONFIDENCE_POOR_ML:
    XrLocalizationMapConfidenceML = 0;
pub const XrLocalizationMapConfidenceML_XR_LOCALIZATION_MAP_CONFIDENCE_FAIR_ML:
    XrLocalizationMapConfidenceML = 1;
pub const XrLocalizationMapConfidenceML_XR_LOCALIZATION_MAP_CONFIDENCE_GOOD_ML:
    XrLocalizationMapConfidenceML = 2;
pub const XrLocalizationMapConfidenceML_XR_LOCALIZATION_MAP_CONFIDENCE_EXCELLENT_ML:
    XrLocalizationMapConfidenceML = 3;
pub const XrLocalizationMapConfidenceML_XR_LOCALIZATION_MAP_CONFIDENCE_MAX_ENUM_ML:
    XrLocalizationMapConfidenceML = 2147483647;
pub type XrLocalizationMapConfidenceML = ::std::os::raw::c_int;
pub type XrLocalizationMapErrorFlagsML = XrFlags64;
pub const XR_LOCALIZATION_MAP_ERROR_UNKNOWN_BIT_ML: XrLocalizationMapErrorFlagsML = 1;
pub const XR_LOCALIZATION_MAP_ERROR_OUT_OF_MAPPED_AREA_BIT_ML: XrLocalizationMapErrorFlagsML = 2;
pub const XR_LOCALIZATION_MAP_ERROR_LOW_FEATURE_COUNT_BIT_ML: XrLocalizationMapErrorFlagsML = 4;
pub const XR_LOCALIZATION_MAP_ERROR_EXCESSIVE_MOTION_BIT_ML: XrLocalizationMapErrorFlagsML = 8;
pub const XR_LOCALIZATION_MAP_ERROR_LOW_LIGHT_BIT_ML: XrLocalizationMapErrorFlagsML = 16;
pub const XR_LOCALIZATION_MAP_ERROR_HEADPOSE_BIT_ML: XrLocalizationMapErrorFlagsML = 32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLocalizationMapML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 64usize],
    pub mapUuid: XrUuidEXT,
    pub mapType: XrLocalizationMapTypeML,
}
#[test]
fn bindgen_test_layout_XrLocalizationMapML() {
    const UNINIT: ::std::mem::MaybeUninit<XrLocalizationMapML> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrLocalizationMapML>(),
        104usize,
        concat!("Size of: ", stringify!(XrLocalizationMapML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrLocalizationMapML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrLocalizationMapML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationMapML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationMapML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationMapML),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapUuid) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationMapML),
            "::",
            stringify!(mapUuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapType) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationMapML),
            "::",
            stringify!(mapType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataLocalizationChangedML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub state: XrLocalizationMapStateML,
    pub map: XrLocalizationMapML,
    pub confidence: XrLocalizationMapConfidenceML,
    pub errorFlags: XrLocalizationMapErrorFlagsML,
}
#[test]
fn bindgen_test_layout_XrEventDataLocalizationChangedML() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataLocalizationChangedML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataLocalizationChangedML>(),
        152usize,
        concat!("Size of: ", stringify!(XrEventDataLocalizationChangedML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataLocalizationChangedML>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataLocalizationChangedML)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataLocalizationChangedML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataLocalizationChangedML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataLocalizationChangedML),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataLocalizationChangedML),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataLocalizationChangedML),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidence) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataLocalizationChangedML),
            "::",
            stringify!(confidence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errorFlags) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataLocalizationChangedML),
            "::",
            stringify!(errorFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLocalizationMapQueryInfoBaseHeaderML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrLocalizationMapQueryInfoBaseHeaderML() {
    const UNINIT: ::std::mem::MaybeUninit<XrLocalizationMapQueryInfoBaseHeaderML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrLocalizationMapQueryInfoBaseHeaderML>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(XrLocalizationMapQueryInfoBaseHeaderML)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrLocalizationMapQueryInfoBaseHeaderML>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrLocalizationMapQueryInfoBaseHeaderML)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationMapQueryInfoBaseHeaderML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationMapQueryInfoBaseHeaderML),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMapLocalizationRequestInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub mapUuid: XrUuidEXT,
}
#[test]
fn bindgen_test_layout_XrMapLocalizationRequestInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrMapLocalizationRequestInfoML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrMapLocalizationRequestInfoML>(),
        32usize,
        concat!("Size of: ", stringify!(XrMapLocalizationRequestInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrMapLocalizationRequestInfoML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrMapLocalizationRequestInfoML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMapLocalizationRequestInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMapLocalizationRequestInfoML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapUuid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrMapLocalizationRequestInfoML),
            "::",
            stringify!(mapUuid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLocalizationMapImportInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub size: u32,
    pub data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XrLocalizationMapImportInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrLocalizationMapImportInfoML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrLocalizationMapImportInfoML>(),
        32usize,
        concat!("Size of: ", stringify!(XrLocalizationMapImportInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrLocalizationMapImportInfoML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrLocalizationMapImportInfoML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationMapImportInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationMapImportInfoML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationMapImportInfoML),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationMapImportInfoML),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLocalizationEnableEventsInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub enabled: XrBool32,
}
#[test]
fn bindgen_test_layout_XrLocalizationEnableEventsInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrLocalizationEnableEventsInfoML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrLocalizationEnableEventsInfoML>(),
        24usize,
        concat!("Size of: ", stringify!(XrLocalizationEnableEventsInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrLocalizationEnableEventsInfoML>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrLocalizationEnableEventsInfoML)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationEnableEventsInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationEnableEventsInfoML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalizationEnableEventsInfoML),
            "::",
            stringify!(enabled)
        )
    );
}
pub type PFN_xrEnableLocalizationEventsML = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        info: *const XrLocalizationEnableEventsInfoML,
    ) -> XrResult,
>;
pub type PFN_xrQueryLocalizationMapsML = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        queryInfo: *const XrLocalizationMapQueryInfoBaseHeaderML,
        mapCapacityInput: u32,
        mapCountOutput: *mut u32,
        maps: *mut XrLocalizationMapML,
    ) -> XrResult,
>;
pub type PFN_xrRequestMapLocalizationML = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        requestInfo: *const XrMapLocalizationRequestInfoML,
    ) -> XrResult,
>;
pub type PFN_xrImportLocalizationMapML = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        importInfo: *const XrLocalizationMapImportInfoML,
        mapUuid: *mut XrUuidEXT,
    ) -> XrResult,
>;
pub type PFN_xrCreateExportedLocalizationMapML = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        mapUuid: *const XrUuidEXT,
        map: *mut XrExportedLocalizationMapML,
    ) -> XrResult,
>;
pub type PFN_xrDestroyExportedLocalizationMapML =
    ::std::option::Option<unsafe extern "C" fn(map: XrExportedLocalizationMapML) -> XrResult>;
pub type PFN_xrGetExportedLocalizationMapDataML = ::std::option::Option<
    unsafe extern "C" fn(
        map: XrExportedLocalizationMapML,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorStoreConnectionMSFT_T {
    _unused: [u8; 0],
}
pub type XrSpatialAnchorStoreConnectionMSFT = *mut XrSpatialAnchorStoreConnectionMSFT_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorPersistenceNameMSFT {
    pub name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_XrSpatialAnchorPersistenceNameMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpatialAnchorPersistenceNameMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpatialAnchorPersistenceNameMSFT>(),
        256usize,
        concat!("Size of: ", stringify!(XrSpatialAnchorPersistenceNameMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialAnchorPersistenceNameMSFT>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(XrSpatialAnchorPersistenceNameMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorPersistenceNameMSFT),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorPersistenceInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub spatialAnchorPersistenceName: XrSpatialAnchorPersistenceNameMSFT,
    pub spatialAnchor: XrSpatialAnchorMSFT,
}
#[test]
fn bindgen_test_layout_XrSpatialAnchorPersistenceInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpatialAnchorPersistenceInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpatialAnchorPersistenceInfoMSFT>(),
        280usize,
        concat!("Size of: ", stringify!(XrSpatialAnchorPersistenceInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialAnchorPersistenceInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSpatialAnchorPersistenceInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorPersistenceInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorPersistenceInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).spatialAnchorPersistenceName) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorPersistenceInfoMSFT),
            "::",
            stringify!(spatialAnchorPersistenceName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spatialAnchor) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorPersistenceInfoMSFT),
            "::",
            stringify!(spatialAnchor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub spatialAnchorStore: XrSpatialAnchorStoreConnectionMSFT,
    pub spatialAnchorPersistenceName: XrSpatialAnchorPersistenceNameMSFT,
}
#[test]
fn bindgen_test_layout_XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT>(),
        280usize,
        concat!(
            "Size of: ",
            stringify!(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spatialAnchorStore) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT),
            "::",
            stringify!(spatialAnchorStore)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).spatialAnchorPersistenceName) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT),
            "::",
            stringify!(spatialAnchorPersistenceName)
        )
    );
}
pub type PFN_xrCreateSpatialAnchorStoreConnectionMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        spatialAnchorStore: *mut XrSpatialAnchorStoreConnectionMSFT,
    ) -> XrResult,
>;
pub type PFN_xrDestroySpatialAnchorStoreConnectionMSFT = ::std::option::Option<
    unsafe extern "C" fn(spatialAnchorStore: XrSpatialAnchorStoreConnectionMSFT) -> XrResult,
>;
pub type PFN_xrPersistSpatialAnchorMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        spatialAnchorStore: XrSpatialAnchorStoreConnectionMSFT,
        spatialAnchorPersistenceInfo: *const XrSpatialAnchorPersistenceInfoMSFT,
    ) -> XrResult,
>;
pub type PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        spatialAnchorStore: XrSpatialAnchorStoreConnectionMSFT,
        spatialAnchorNameCapacityInput: u32,
        spatialAnchorNameCountOutput: *mut u32,
        spatialAnchorNames: *mut XrSpatialAnchorPersistenceNameMSFT,
    ) -> XrResult,
>;
pub type PFN_xrCreateSpatialAnchorFromPersistedNameMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        spatialAnchorCreateInfo: *const XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT,
        spatialAnchor: *mut XrSpatialAnchorMSFT,
    ) -> XrResult,
>;
pub type PFN_xrUnpersistSpatialAnchorMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        spatialAnchorStore: XrSpatialAnchorStoreConnectionMSFT,
        spatialAnchorPersistenceName: *const XrSpatialAnchorPersistenceNameMSFT,
    ) -> XrResult,
>;
pub type PFN_xrClearSpatialAnchorStoreMSFT = ::std::option::Option<
    unsafe extern "C" fn(spatialAnchorStore: XrSpatialAnchorStoreConnectionMSFT) -> XrResult,
>;
pub const XrSceneMarkerTypeMSFT_XR_SCENE_MARKER_TYPE_QR_CODE_MSFT: XrSceneMarkerTypeMSFT = 1;
pub const XrSceneMarkerTypeMSFT_XR_SCENE_MARKER_TYPE_MAX_ENUM_MSFT: XrSceneMarkerTypeMSFT =
    2147483647;
pub type XrSceneMarkerTypeMSFT = ::std::os::raw::c_int;
pub const XrSceneMarkerQRCodeSymbolTypeMSFT_XR_SCENE_MARKER_QR_CODE_SYMBOL_TYPE_QR_CODE_MSFT:
    XrSceneMarkerQRCodeSymbolTypeMSFT = 1;
pub const XrSceneMarkerQRCodeSymbolTypeMSFT_XR_SCENE_MARKER_QR_CODE_SYMBOL_TYPE_MICRO_QR_CODE_MSFT : XrSceneMarkerQRCodeSymbolTypeMSFT = 2 ;
pub const XrSceneMarkerQRCodeSymbolTypeMSFT_XR_SCENE_MARKER_QRCODE_SYMBOL_TYPE_MAX_ENUM_MSFT:
    XrSceneMarkerQRCodeSymbolTypeMSFT = 2147483647;
pub type XrSceneMarkerQRCodeSymbolTypeMSFT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMarkerMSFT {
    pub markerType: XrSceneMarkerTypeMSFT,
    pub lastSeenTime: XrTime,
    pub center: XrOffset2Df,
    pub size: XrExtent2Df,
}
#[test]
fn bindgen_test_layout_XrSceneMarkerMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneMarkerMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneMarkerMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneMarkerMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneMarkerMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneMarkerMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).markerType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerMSFT),
            "::",
            stringify!(markerType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastSeenTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerMSFT),
            "::",
            stringify!(lastSeenTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerMSFT),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerMSFT),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMarkersMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub sceneMarkerCapacityInput: u32,
    pub sceneMarkers: *mut XrSceneMarkerMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneMarkersMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneMarkersMSFT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneMarkersMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneMarkersMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneMarkersMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneMarkersMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkersMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkersMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sceneMarkerCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkersMSFT),
            "::",
            stringify!(sceneMarkerCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sceneMarkers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkersMSFT),
            "::",
            stringify!(sceneMarkers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMarkerTypeFilterMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub markerTypeCount: u32,
    pub markerTypes: *mut XrSceneMarkerTypeMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneMarkerTypeFilterMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneMarkerTypeFilterMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneMarkerTypeFilterMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneMarkerTypeFilterMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneMarkerTypeFilterMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneMarkerTypeFilterMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerTypeFilterMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerTypeFilterMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).markerTypeCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerTypeFilterMSFT),
            "::",
            stringify!(markerTypeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).markerTypes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerTypeFilterMSFT),
            "::",
            stringify!(markerTypes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMarkerQRCodeMSFT {
    pub symbolType: XrSceneMarkerQRCodeSymbolTypeMSFT,
    pub version: u8,
}
#[test]
fn bindgen_test_layout_XrSceneMarkerQRCodeMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneMarkerQRCodeMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneMarkerQRCodeMSFT>(),
        8usize,
        concat!("Size of: ", stringify!(XrSceneMarkerQRCodeMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneMarkerQRCodeMSFT>(),
        4usize,
        concat!("Alignment of ", stringify!(XrSceneMarkerQRCodeMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbolType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerQRCodeMSFT),
            "::",
            stringify!(symbolType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerQRCodeMSFT),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMarkerQRCodesMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub qrCodeCapacityInput: u32,
    pub qrCodes: *mut XrSceneMarkerQRCodeMSFT,
}
#[test]
fn bindgen_test_layout_XrSceneMarkerQRCodesMSFT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneMarkerQRCodesMSFT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneMarkerQRCodesMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneMarkerQRCodesMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneMarkerQRCodesMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneMarkerQRCodesMSFT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerQRCodesMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerQRCodesMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qrCodeCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerQRCodesMSFT),
            "::",
            stringify!(qrCodeCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qrCodes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneMarkerQRCodesMSFT),
            "::",
            stringify!(qrCodes)
        )
    );
}
pub type PFN_xrGetSceneMarkerRawDataMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        scene: XrSceneMSFT,
        markerId: *const XrUuidMSFT,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut u8,
    ) -> XrResult,
>;
pub type PFN_xrGetSceneMarkerDecodedStringMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        scene: XrSceneMSFT,
        markerId: *const XrUuidMSFT,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult,
>;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_PALM_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 0;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_WRIST_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 1;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_THUMB_METACARPAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 2;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_THUMB_PROXIMAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 3;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_THUMB_DISTAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 4;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_THUMB_TIP_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 5;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_INDEX_METACARPAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 6;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_INDEX_PROXIMAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 7;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_INDEX_INTERMEDIATE_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 8;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_INDEX_DISTAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 9;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_INDEX_TIP_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 10;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_MIDDLE_METACARPAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 11;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_MIDDLE_PROXIMAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 12;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_MIDDLE_INTERMEDIATE_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 13;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_MIDDLE_DISTAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 14;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_MIDDLE_TIP_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 15;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_RING_METACARPAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 16;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_RING_PROXIMAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 17;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_RING_INTERMEDIATE_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 18;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_RING_DISTAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 19;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_RING_TIP_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 20;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_LITTLE_METACARPAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 21;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_LITTLE_PROXIMAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 22;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_LITTLE_INTERMEDIATE_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 23;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_LITTLE_DISTAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 24;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_LITTLE_TIP_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 25;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_ELBOW_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 26;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_MAX_ENUM_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 2147483647;
pub type XrHandForearmJointULTRALEAP = ::std::os::raw::c_int;
pub const XrSpaceQueryActionFB_XR_SPACE_QUERY_ACTION_LOAD_FB: XrSpaceQueryActionFB = 0;
pub const XrSpaceQueryActionFB_XR_SPACE_QUERY_ACTION_MAX_ENUM_FB: XrSpaceQueryActionFB = 2147483647;
pub type XrSpaceQueryActionFB = ::std::os::raw::c_int;
pub const XrSpaceStorageLocationFB_XR_SPACE_STORAGE_LOCATION_INVALID_FB: XrSpaceStorageLocationFB =
    0;
pub const XrSpaceStorageLocationFB_XR_SPACE_STORAGE_LOCATION_LOCAL_FB: XrSpaceStorageLocationFB = 1;
pub const XrSpaceStorageLocationFB_XR_SPACE_STORAGE_LOCATION_CLOUD_FB: XrSpaceStorageLocationFB = 2;
pub const XrSpaceStorageLocationFB_XR_SPACE_STORAGE_LOCATION_MAX_ENUM_FB: XrSpaceStorageLocationFB =
    2147483647;
pub type XrSpaceStorageLocationFB = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceQueryInfoBaseHeaderFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSpaceQueryInfoBaseHeaderFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceQueryInfoBaseHeaderFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceQueryInfoBaseHeaderFB>(),
        16usize,
        concat!("Size of: ", stringify!(XrSpaceQueryInfoBaseHeaderFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceQueryInfoBaseHeaderFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceQueryInfoBaseHeaderFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryInfoBaseHeaderFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryInfoBaseHeaderFB),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceFilterInfoBaseHeaderFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSpaceFilterInfoBaseHeaderFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceFilterInfoBaseHeaderFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceFilterInfoBaseHeaderFB>(),
        16usize,
        concat!("Size of: ", stringify!(XrSpaceFilterInfoBaseHeaderFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceFilterInfoBaseHeaderFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceFilterInfoBaseHeaderFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceFilterInfoBaseHeaderFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceFilterInfoBaseHeaderFB),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceQueryInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub queryAction: XrSpaceQueryActionFB,
    pub maxResultCount: u32,
    pub timeout: XrDuration,
    pub filter: *const XrSpaceFilterInfoBaseHeaderFB,
    pub excludeFilter: *const XrSpaceFilterInfoBaseHeaderFB,
}
#[test]
fn bindgen_test_layout_XrSpaceQueryInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceQueryInfoFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceQueryInfoFB>(),
        48usize,
        concat!("Size of: ", stringify!(XrSpaceQueryInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceQueryInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceQueryInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queryAction) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryInfoFB),
            "::",
            stringify!(queryAction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxResultCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryInfoFB),
            "::",
            stringify!(maxResultCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryInfoFB),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryInfoFB),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).excludeFilter) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryInfoFB),
            "::",
            stringify!(excludeFilter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceStorageLocationFilterInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub location: XrSpaceStorageLocationFB,
}
#[test]
fn bindgen_test_layout_XrSpaceStorageLocationFilterInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceStorageLocationFilterInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceStorageLocationFilterInfoFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSpaceStorageLocationFilterInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceStorageLocationFilterInfoFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSpaceStorageLocationFilterInfoFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceStorageLocationFilterInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceStorageLocationFilterInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceStorageLocationFilterInfoFB),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceUuidFilterInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub uuidCount: u32,
    pub uuids: *mut XrUuidEXT,
}
#[test]
fn bindgen_test_layout_XrSpaceUuidFilterInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceUuidFilterInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceUuidFilterInfoFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrSpaceUuidFilterInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceUuidFilterInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceUuidFilterInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceUuidFilterInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceUuidFilterInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuidCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceUuidFilterInfoFB),
            "::",
            stringify!(uuidCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuids) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceUuidFilterInfoFB),
            "::",
            stringify!(uuids)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceComponentFilterInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub componentType: XrSpaceComponentTypeFB,
}
#[test]
fn bindgen_test_layout_XrSpaceComponentFilterInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceComponentFilterInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceComponentFilterInfoFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSpaceComponentFilterInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceComponentFilterInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceComponentFilterInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceComponentFilterInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceComponentFilterInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceComponentFilterInfoFB),
            "::",
            stringify!(componentType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceQueryResultFB {
    pub space: XrSpace,
    pub uuid: XrUuidEXT,
}
#[test]
fn bindgen_test_layout_XrSpaceQueryResultFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceQueryResultFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceQueryResultFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSpaceQueryResultFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceQueryResultFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceQueryResultFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryResultFB),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryResultFB),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceQueryResultsFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub resultCapacityInput: u32,
    pub resultCountOutput: u32,
    pub results: *mut XrSpaceQueryResultFB,
}
#[test]
fn bindgen_test_layout_XrSpaceQueryResultsFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceQueryResultsFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceQueryResultsFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrSpaceQueryResultsFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceQueryResultsFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceQueryResultsFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryResultsFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryResultsFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resultCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryResultsFB),
            "::",
            stringify!(resultCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resultCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryResultsFB),
            "::",
            stringify!(resultCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).results) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceQueryResultsFB),
            "::",
            stringify!(results)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceQueryResultsAvailableFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
}
#[test]
fn bindgen_test_layout_XrEventDataSpaceQueryResultsAvailableFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataSpaceQueryResultsAvailableFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataSpaceQueryResultsAvailableFB>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataSpaceQueryResultsAvailableFB)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataSpaceQueryResultsAvailableFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataSpaceQueryResultsAvailableFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceQueryResultsAvailableFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceQueryResultsAvailableFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceQueryResultsAvailableFB),
            "::",
            stringify!(requestId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceQueryCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[test]
fn bindgen_test_layout_XrEventDataSpaceQueryCompleteFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataSpaceQueryCompleteFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataSpaceQueryCompleteFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrEventDataSpaceQueryCompleteFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataSpaceQueryCompleteFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataSpaceQueryCompleteFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceQueryCompleteFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceQueryCompleteFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceQueryCompleteFB),
            "::",
            stringify!(requestId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceQueryCompleteFB),
            "::",
            stringify!(result)
        )
    );
}
pub type PFN_xrQuerySpacesFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        info: *const XrSpaceQueryInfoBaseHeaderFB,
        requestId: *mut XrAsyncRequestIdFB,
    ) -> XrResult,
>;
pub type PFN_xrRetrieveSpaceQueryResultsFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        requestId: XrAsyncRequestIdFB,
        results: *mut XrSpaceQueryResultsFB,
    ) -> XrResult,
>;
pub const XrSpacePersistenceModeFB_XR_SPACE_PERSISTENCE_MODE_INVALID_FB: XrSpacePersistenceModeFB =
    0;
pub const XrSpacePersistenceModeFB_XR_SPACE_PERSISTENCE_MODE_INDEFINITE_FB:
    XrSpacePersistenceModeFB = 1;
pub const XrSpacePersistenceModeFB_XR_SPACE_PERSISTENCE_MODE_MAX_ENUM_FB: XrSpacePersistenceModeFB =
    2147483647;
pub type XrSpacePersistenceModeFB = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceSaveInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub location: XrSpaceStorageLocationFB,
    pub persistenceMode: XrSpacePersistenceModeFB,
}
#[test]
fn bindgen_test_layout_XrSpaceSaveInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceSaveInfoFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceSaveInfoFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrSpaceSaveInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceSaveInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceSaveInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceSaveInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceSaveInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceSaveInfoFB),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceSaveInfoFB),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).persistenceMode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceSaveInfoFB),
            "::",
            stringify!(persistenceMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceEraseInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub location: XrSpaceStorageLocationFB,
}
#[test]
fn bindgen_test_layout_XrSpaceEraseInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceEraseInfoFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceEraseInfoFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrSpaceEraseInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceEraseInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceEraseInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceEraseInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceEraseInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceEraseInfoFB),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceEraseInfoFB),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceSaveCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
    pub space: XrSpace,
    pub uuid: XrUuidEXT,
    pub location: XrSpaceStorageLocationFB,
}
#[test]
fn bindgen_test_layout_XrEventDataSpaceSaveCompleteFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataSpaceSaveCompleteFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataSpaceSaveCompleteFB>(),
        64usize,
        concat!("Size of: ", stringify!(XrEventDataSpaceSaveCompleteFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataSpaceSaveCompleteFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataSpaceSaveCompleteFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSaveCompleteFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSaveCompleteFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSaveCompleteFB),
            "::",
            stringify!(requestId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSaveCompleteFB),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSaveCompleteFB),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSaveCompleteFB),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceSaveCompleteFB),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceEraseCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
    pub space: XrSpace,
    pub uuid: XrUuidEXT,
    pub location: XrSpaceStorageLocationFB,
}
#[test]
fn bindgen_test_layout_XrEventDataSpaceEraseCompleteFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataSpaceEraseCompleteFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataSpaceEraseCompleteFB>(),
        64usize,
        concat!("Size of: ", stringify!(XrEventDataSpaceEraseCompleteFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataSpaceEraseCompleteFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataSpaceEraseCompleteFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceEraseCompleteFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceEraseCompleteFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceEraseCompleteFB),
            "::",
            stringify!(requestId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceEraseCompleteFB),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceEraseCompleteFB),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceEraseCompleteFB),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceEraseCompleteFB),
            "::",
            stringify!(location)
        )
    );
}
pub type PFN_xrSaveSpaceFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        info: *const XrSpaceSaveInfoFB,
        requestId: *mut XrAsyncRequestIdFB,
    ) -> XrResult,
>;
pub type PFN_xrEraseSpaceFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        info: *const XrSpaceEraseInfoFB,
        requestId: *mut XrAsyncRequestIdFB,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceUserFB_T {
    _unused: [u8; 0],
}
pub type XrSpaceUserFB = *mut XrSpaceUserFB_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceShareInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub spaceCount: u32,
    pub spaces: *mut XrSpace,
    pub userCount: u32,
    pub users: *mut XrSpaceUserFB,
}
#[test]
fn bindgen_test_layout_XrSpaceShareInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceShareInfoFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceShareInfoFB>(),
        48usize,
        concat!("Size of: ", stringify!(XrSpaceShareInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceShareInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceShareInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceShareInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceShareInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaceCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceShareInfoFB),
            "::",
            stringify!(spaceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaces) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceShareInfoFB),
            "::",
            stringify!(spaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceShareInfoFB),
            "::",
            stringify!(userCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).users) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceShareInfoFB),
            "::",
            stringify!(users)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceShareCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[test]
fn bindgen_test_layout_XrEventDataSpaceShareCompleteFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataSpaceShareCompleteFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataSpaceShareCompleteFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrEventDataSpaceShareCompleteFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataSpaceShareCompleteFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataSpaceShareCompleteFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceShareCompleteFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceShareCompleteFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceShareCompleteFB),
            "::",
            stringify!(requestId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceShareCompleteFB),
            "::",
            stringify!(result)
        )
    );
}
pub type PFN_xrShareSpacesFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        info: *const XrSpaceShareInfoFB,
        requestId: *mut XrAsyncRequestIdFB,
    ) -> XrResult,
>;
pub type XrCompositionLayerSpaceWarpInfoFlagsFB = XrFlags64;
pub const XR_COMPOSITION_LAYER_SPACE_WARP_INFO_FRAME_SKIP_BIT_FB:
    XrCompositionLayerSpaceWarpInfoFlagsFB = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerSpaceWarpInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerSpaceWarpInfoFlagsFB,
    pub motionVectorSubImage: XrSwapchainSubImage,
    pub appSpaceDeltaPose: XrPosef,
    pub depthSubImage: XrSwapchainSubImage,
    pub minDepth: f32,
    pub maxDepth: f32,
    pub nearZ: f32,
    pub farZ: f32,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerSpaceWarpInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerSpaceWarpInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerSpaceWarpInfoFB>(),
        136usize,
        concat!("Size of: ", stringify!(XrCompositionLayerSpaceWarpInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerSpaceWarpInfoFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrCompositionLayerSpaceWarpInfoFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSpaceWarpInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSpaceWarpInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSpaceWarpInfoFB),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motionVectorSubImage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSpaceWarpInfoFB),
            "::",
            stringify!(motionVectorSubImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appSpaceDeltaPose) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSpaceWarpInfoFB),
            "::",
            stringify!(appSpaceDeltaPose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthSubImage) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSpaceWarpInfoFB),
            "::",
            stringify!(depthSubImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minDepth) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSpaceWarpInfoFB),
            "::",
            stringify!(minDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDepth) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSpaceWarpInfoFB),
            "::",
            stringify!(maxDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nearZ) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSpaceWarpInfoFB),
            "::",
            stringify!(nearZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).farZ) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSpaceWarpInfoFB),
            "::",
            stringify!(farZ)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemSpaceWarpPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub recommendedMotionVectorImageRectWidth: u32,
    pub recommendedMotionVectorImageRectHeight: u32,
}
#[test]
fn bindgen_test_layout_XrSystemSpaceWarpPropertiesFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemSpaceWarpPropertiesFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemSpaceWarpPropertiesFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemSpaceWarpPropertiesFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemSpaceWarpPropertiesFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSystemSpaceWarpPropertiesFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemSpaceWarpPropertiesFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemSpaceWarpPropertiesFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).recommendedMotionVectorImageRectWidth) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemSpaceWarpPropertiesFB),
            "::",
            stringify!(recommendedMotionVectorImageRectWidth)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).recommendedMotionVectorImageRectHeight) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemSpaceWarpPropertiesFB),
            "::",
            stringify!(recommendedMotionVectorImageRectHeight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticAmplitudeEnvelopeVibrationFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub duration: XrDuration,
    pub amplitudeCount: u32,
    pub amplitudes: *const f32,
}
#[test]
fn bindgen_test_layout_XrHapticAmplitudeEnvelopeVibrationFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrHapticAmplitudeEnvelopeVibrationFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHapticAmplitudeEnvelopeVibrationFB>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(XrHapticAmplitudeEnvelopeVibrationFB)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrHapticAmplitudeEnvelopeVibrationFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrHapticAmplitudeEnvelopeVibrationFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticAmplitudeEnvelopeVibrationFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticAmplitudeEnvelopeVibrationFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticAmplitudeEnvelopeVibrationFB),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amplitudeCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticAmplitudeEnvelopeVibrationFB),
            "::",
            stringify!(amplitudeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amplitudes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticAmplitudeEnvelopeVibrationFB),
            "::",
            stringify!(amplitudes)
        )
    );
}
pub type XrSemanticLabelsSupportFlagsFB = XrFlags64;
pub const XR_SEMANTIC_LABELS_SUPPORT_MULTIPLE_SEMANTIC_LABELS_BIT_FB:
    XrSemanticLabelsSupportFlagsFB = 1;
pub const XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_DESK_TO_TABLE_MIGRATION_BIT_FB:
    XrSemanticLabelsSupportFlagsFB = 2;
pub const XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_INVISIBLE_WALL_FACE_BIT_FB:
    XrSemanticLabelsSupportFlagsFB = 4;
pub type XrExtent3DfFB = XrExtent3Df;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrOffset3DfFB {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_XrOffset3DfFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrOffset3DfFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrOffset3DfFB>(),
        12usize,
        concat!("Size of: ", stringify!(XrOffset3DfFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrOffset3DfFB>(),
        4usize,
        concat!("Alignment of ", stringify!(XrOffset3DfFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrOffset3DfFB),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrOffset3DfFB),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrOffset3DfFB),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRect3DfFB {
    pub offset: XrOffset3DfFB,
    pub extent: XrExtent3DfFB,
}
#[test]
fn bindgen_test_layout_XrRect3DfFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrRect3DfFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrRect3DfFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrRect3DfFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrRect3DfFB>(),
        4usize,
        concat!("Alignment of ", stringify!(XrRect3DfFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRect3DfFB),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRect3DfFB),
            "::",
            stringify!(extent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSemanticLabelsFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub bufferCapacityInput: u32,
    pub bufferCountOutput: u32,
    pub buffer: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XrSemanticLabelsFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSemanticLabelsFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSemanticLabelsFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrSemanticLabelsFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSemanticLabelsFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSemanticLabelsFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSemanticLabelsFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSemanticLabelsFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSemanticLabelsFB),
            "::",
            stringify!(bufferCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSemanticLabelsFB),
            "::",
            stringify!(bufferCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSemanticLabelsFB),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRoomLayoutFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub floorUuid: XrUuidEXT,
    pub ceilingUuid: XrUuidEXT,
    pub wallUuidCapacityInput: u32,
    pub wallUuidCountOutput: u32,
    pub wallUuids: *mut XrUuidEXT,
}
#[test]
fn bindgen_test_layout_XrRoomLayoutFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrRoomLayoutFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrRoomLayoutFB>(),
        64usize,
        concat!("Size of: ", stringify!(XrRoomLayoutFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrRoomLayoutFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrRoomLayoutFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRoomLayoutFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRoomLayoutFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).floorUuid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRoomLayoutFB),
            "::",
            stringify!(floorUuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ceilingUuid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRoomLayoutFB),
            "::",
            stringify!(ceilingUuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wallUuidCapacityInput) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRoomLayoutFB),
            "::",
            stringify!(wallUuidCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wallUuidCountOutput) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRoomLayoutFB),
            "::",
            stringify!(wallUuidCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wallUuids) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRoomLayoutFB),
            "::",
            stringify!(wallUuids)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBoundary2DFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrVector2f,
}
#[test]
fn bindgen_test_layout_XrBoundary2DFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrBoundary2DFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrBoundary2DFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrBoundary2DFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBoundary2DFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrBoundary2DFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoundary2DFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoundary2DFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoundary2DFB),
            "::",
            stringify!(vertexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoundary2DFB),
            "::",
            stringify!(vertexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoundary2DFB),
            "::",
            stringify!(vertices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSemanticLabelsSupportInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrSemanticLabelsSupportFlagsFB,
    pub recognizedLabels: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XrSemanticLabelsSupportInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSemanticLabelsSupportInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSemanticLabelsSupportInfoFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrSemanticLabelsSupportInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSemanticLabelsSupportInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSemanticLabelsSupportInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSemanticLabelsSupportInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSemanticLabelsSupportInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSemanticLabelsSupportInfoFB),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recognizedLabels) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSemanticLabelsSupportInfoFB),
            "::",
            stringify!(recognizedLabels)
        )
    );
}
pub type PFN_xrGetSpaceBoundingBox2DFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        space: XrSpace,
        boundingBox2DOutput: *mut XrRect2Df,
    ) -> XrResult,
>;
pub type PFN_xrGetSpaceBoundingBox3DFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        space: XrSpace,
        boundingBox3DOutput: *mut XrRect3DfFB,
    ) -> XrResult,
>;
pub type PFN_xrGetSpaceSemanticLabelsFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        space: XrSpace,
        semanticLabelsOutput: *mut XrSemanticLabelsFB,
    ) -> XrResult,
>;
pub type PFN_xrGetSpaceBoundary2DFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        space: XrSpace,
        boundary2DOutput: *mut XrBoundary2DFB,
    ) -> XrResult,
>;
pub type PFN_xrGetSpaceRoomLayoutFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        space: XrSpace,
        roomLayoutOutput: *mut XrRoomLayoutFB,
    ) -> XrResult,
>;
pub type XrDigitalLensControlFlagsALMALENCE = XrFlags64;
pub const XR_DIGITAL_LENS_CONTROL_PROCESSING_DISABLE_BIT_ALMALENCE:
    XrDigitalLensControlFlagsALMALENCE = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDigitalLensControlALMALENCE {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrDigitalLensControlFlagsALMALENCE,
}
#[test]
fn bindgen_test_layout_XrDigitalLensControlALMALENCE() {
    const UNINIT: ::std::mem::MaybeUninit<XrDigitalLensControlALMALENCE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrDigitalLensControlALMALENCE>(),
        24usize,
        concat!("Size of: ", stringify!(XrDigitalLensControlALMALENCE))
    );
    assert_eq!(
        ::std::mem::align_of::<XrDigitalLensControlALMALENCE>(),
        8usize,
        concat!("Alignment of ", stringify!(XrDigitalLensControlALMALENCE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDigitalLensControlALMALENCE),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDigitalLensControlALMALENCE),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDigitalLensControlALMALENCE),
            "::",
            stringify!(flags)
        )
    );
}
pub type PFN_xrSetDigitalLensControlALMALENCE = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        digitalLensControl: *const XrDigitalLensControlALMALENCE,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSceneCaptureCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[test]
fn bindgen_test_layout_XrEventDataSceneCaptureCompleteFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataSceneCaptureCompleteFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataSceneCaptureCompleteFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrEventDataSceneCaptureCompleteFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataSceneCaptureCompleteFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataSceneCaptureCompleteFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSceneCaptureCompleteFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSceneCaptureCompleteFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSceneCaptureCompleteFB),
            "::",
            stringify!(requestId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSceneCaptureCompleteFB),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneCaptureRequestInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestByteCount: u32,
    pub request: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XrSceneCaptureRequestInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSceneCaptureRequestInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSceneCaptureRequestInfoFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrSceneCaptureRequestInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSceneCaptureRequestInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSceneCaptureRequestInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneCaptureRequestInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneCaptureRequestInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneCaptureRequestInfoFB),
            "::",
            stringify!(requestByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSceneCaptureRequestInfoFB),
            "::",
            stringify!(request)
        )
    );
}
pub type PFN_xrRequestSceneCaptureFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        info: *const XrSceneCaptureRequestInfoFB,
        requestId: *mut XrAsyncRequestIdFB,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceContainerFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub uuidCapacityInput: u32,
    pub uuidCountOutput: u32,
    pub uuids: *mut XrUuidEXT,
}
#[test]
fn bindgen_test_layout_XrSpaceContainerFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceContainerFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceContainerFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrSpaceContainerFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceContainerFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceContainerFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceContainerFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceContainerFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuidCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceContainerFB),
            "::",
            stringify!(uuidCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuidCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceContainerFB),
            "::",
            stringify!(uuidCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuids) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceContainerFB),
            "::",
            stringify!(uuids)
        )
    );
}
pub type PFN_xrGetSpaceContainerFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        space: XrSpace,
        spaceContainerOutput: *mut XrSpaceContainerFB,
    ) -> XrResult,
>;
pub type XrFoveationEyeTrackedProfileCreateFlagsMETA = XrFlags64;
pub type XrFoveationEyeTrackedStateFlagsMETA = XrFlags64;
pub const XR_FOVEATION_EYE_TRACKED_STATE_VALID_BIT_META: XrFoveationEyeTrackedStateFlagsMETA = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationEyeTrackedProfileCreateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrFoveationEyeTrackedProfileCreateFlagsMETA,
}
#[test]
fn bindgen_test_layout_XrFoveationEyeTrackedProfileCreateInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrFoveationEyeTrackedProfileCreateInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFoveationEyeTrackedProfileCreateInfoMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrFoveationEyeTrackedProfileCreateInfoMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrFoveationEyeTrackedProfileCreateInfoMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrFoveationEyeTrackedProfileCreateInfoMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationEyeTrackedProfileCreateInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationEyeTrackedProfileCreateInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationEyeTrackedProfileCreateInfoMETA),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationEyeTrackedStateMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub foveationCenter: [XrVector2f; 2usize],
    pub flags: XrFoveationEyeTrackedStateFlagsMETA,
}
#[test]
fn bindgen_test_layout_XrFoveationEyeTrackedStateMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrFoveationEyeTrackedStateMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFoveationEyeTrackedStateMETA>(),
        40usize,
        concat!("Size of: ", stringify!(XrFoveationEyeTrackedStateMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFoveationEyeTrackedStateMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFoveationEyeTrackedStateMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationEyeTrackedStateMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationEyeTrackedStateMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).foveationCenter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationEyeTrackedStateMETA),
            "::",
            stringify!(foveationCenter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationEyeTrackedStateMETA),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemFoveationEyeTrackedPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsFoveationEyeTracked: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemFoveationEyeTrackedPropertiesMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemFoveationEyeTrackedPropertiesMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemFoveationEyeTrackedPropertiesMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemFoveationEyeTrackedPropertiesMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemFoveationEyeTrackedPropertiesMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemFoveationEyeTrackedPropertiesMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFoveationEyeTrackedPropertiesMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFoveationEyeTrackedPropertiesMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsFoveationEyeTracked) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFoveationEyeTrackedPropertiesMETA),
            "::",
            stringify!(supportsFoveationEyeTracked)
        )
    );
}
pub type PFN_xrGetFoveationEyeTrackedStateMETA = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        foveationState: *mut XrFoveationEyeTrackedStateMETA,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceTrackerFB_T {
    _unused: [u8; 0],
}
pub type XrFaceTrackerFB = *mut XrFaceTrackerFB_T;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_BROW_LOWERER_L_FB: XrFaceExpressionFB = 0;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_BROW_LOWERER_R_FB: XrFaceExpressionFB = 1;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHEEK_PUFF_L_FB: XrFaceExpressionFB = 2;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHEEK_PUFF_R_FB: XrFaceExpressionFB = 3;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHEEK_RAISER_L_FB: XrFaceExpressionFB = 4;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHEEK_RAISER_R_FB: XrFaceExpressionFB = 5;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHEEK_SUCK_L_FB: XrFaceExpressionFB = 6;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHEEK_SUCK_R_FB: XrFaceExpressionFB = 7;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHIN_RAISER_B_FB: XrFaceExpressionFB = 8;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHIN_RAISER_T_FB: XrFaceExpressionFB = 9;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_DIMPLER_L_FB: XrFaceExpressionFB = 10;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_DIMPLER_R_FB: XrFaceExpressionFB = 11;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_CLOSED_L_FB: XrFaceExpressionFB = 12;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_CLOSED_R_FB: XrFaceExpressionFB = 13;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_DOWN_L_FB: XrFaceExpressionFB = 14;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_DOWN_R_FB: XrFaceExpressionFB = 15;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_LEFT_L_FB: XrFaceExpressionFB = 16;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_LEFT_R_FB: XrFaceExpressionFB = 17;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_RIGHT_L_FB: XrFaceExpressionFB = 18;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_RIGHT_R_FB: XrFaceExpressionFB = 19;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_UP_L_FB: XrFaceExpressionFB = 20;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_UP_R_FB: XrFaceExpressionFB = 21;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_INNER_BROW_RAISER_L_FB: XrFaceExpressionFB = 22;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_INNER_BROW_RAISER_R_FB: XrFaceExpressionFB = 23;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_JAW_DROP_FB: XrFaceExpressionFB = 24;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_JAW_SIDEWAYS_LEFT_FB: XrFaceExpressionFB = 25;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_JAW_SIDEWAYS_RIGHT_FB: XrFaceExpressionFB = 26;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_JAW_THRUST_FB: XrFaceExpressionFB = 27;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LID_TIGHTENER_L_FB: XrFaceExpressionFB = 28;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LID_TIGHTENER_R_FB: XrFaceExpressionFB = 29;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_CORNER_DEPRESSOR_L_FB: XrFaceExpressionFB = 30;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_CORNER_DEPRESSOR_R_FB: XrFaceExpressionFB = 31;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_CORNER_PULLER_L_FB: XrFaceExpressionFB = 32;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_CORNER_PULLER_R_FB: XrFaceExpressionFB = 33;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_FUNNELER_LB_FB: XrFaceExpressionFB = 34;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_FUNNELER_LT_FB: XrFaceExpressionFB = 35;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_FUNNELER_RB_FB: XrFaceExpressionFB = 36;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_FUNNELER_RT_FB: XrFaceExpressionFB = 37;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_PRESSOR_L_FB: XrFaceExpressionFB = 38;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_PRESSOR_R_FB: XrFaceExpressionFB = 39;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_PUCKER_L_FB: XrFaceExpressionFB = 40;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_PUCKER_R_FB: XrFaceExpressionFB = 41;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_STRETCHER_L_FB: XrFaceExpressionFB = 42;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_STRETCHER_R_FB: XrFaceExpressionFB = 43;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_SUCK_LB_FB: XrFaceExpressionFB = 44;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_SUCK_LT_FB: XrFaceExpressionFB = 45;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_SUCK_RB_FB: XrFaceExpressionFB = 46;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_SUCK_RT_FB: XrFaceExpressionFB = 47;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_TIGHTENER_L_FB: XrFaceExpressionFB = 48;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_TIGHTENER_R_FB: XrFaceExpressionFB = 49;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIPS_TOWARD_FB: XrFaceExpressionFB = 50;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LOWER_LIP_DEPRESSOR_L_FB: XrFaceExpressionFB = 51;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LOWER_LIP_DEPRESSOR_R_FB: XrFaceExpressionFB = 52;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_MOUTH_LEFT_FB: XrFaceExpressionFB = 53;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_MOUTH_RIGHT_FB: XrFaceExpressionFB = 54;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_NOSE_WRINKLER_L_FB: XrFaceExpressionFB = 55;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_NOSE_WRINKLER_R_FB: XrFaceExpressionFB = 56;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_OUTER_BROW_RAISER_L_FB: XrFaceExpressionFB = 57;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_OUTER_BROW_RAISER_R_FB: XrFaceExpressionFB = 58;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_UPPER_LID_RAISER_L_FB: XrFaceExpressionFB = 59;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_UPPER_LID_RAISER_R_FB: XrFaceExpressionFB = 60;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_UPPER_LIP_RAISER_L_FB: XrFaceExpressionFB = 61;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_UPPER_LIP_RAISER_R_FB: XrFaceExpressionFB = 62;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_COUNT_FB: XrFaceExpressionFB = 63;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_MAX_ENUM_FB: XrFaceExpressionFB = 2147483647;
pub type XrFaceExpressionFB = ::std::os::raw::c_int;
pub const XrFaceExpressionSetFB_XR_FACE_EXPRESSION_SET_DEFAULT_FB: XrFaceExpressionSetFB = 0;
pub const XrFaceExpressionSetFB_XR_FACE_EXPRESSION_SET_MAX_ENUM_FB: XrFaceExpressionSetFB =
    2147483647;
pub type XrFaceExpressionSetFB = ::std::os::raw::c_int;
pub const XrFaceConfidenceFB_XR_FACE_CONFIDENCE_LOWER_FACE_FB: XrFaceConfidenceFB = 0;
pub const XrFaceConfidenceFB_XR_FACE_CONFIDENCE_UPPER_FACE_FB: XrFaceConfidenceFB = 1;
pub const XrFaceConfidenceFB_XR_FACE_CONFIDENCE_COUNT_FB: XrFaceConfidenceFB = 2;
pub const XrFaceConfidenceFB_XR_FACE_CONFIDENCE_MAX_ENUM_FB: XrFaceConfidenceFB = 2147483647;
pub type XrFaceConfidenceFB = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemFaceTrackingPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsFaceTracking: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemFaceTrackingPropertiesFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemFaceTrackingPropertiesFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemFaceTrackingPropertiesFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemFaceTrackingPropertiesFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemFaceTrackingPropertiesFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemFaceTrackingPropertiesFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFaceTrackingPropertiesFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFaceTrackingPropertiesFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsFaceTracking) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFaceTrackingPropertiesFB),
            "::",
            stringify!(supportsFaceTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceTrackerCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub faceExpressionSet: XrFaceExpressionSetFB,
}
#[test]
fn bindgen_test_layout_XrFaceTrackerCreateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrFaceTrackerCreateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFaceTrackerCreateInfoFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrFaceTrackerCreateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFaceTrackerCreateInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFaceTrackerCreateInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceTrackerCreateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceTrackerCreateInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faceExpressionSet) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceTrackerCreateInfoFB),
            "::",
            stringify!(faceExpressionSet)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceExpressionInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrFaceExpressionInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrFaceExpressionInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFaceExpressionInfoFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrFaceExpressionInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFaceExpressionInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFaceExpressionInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionInfoFB),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceExpressionStatusFB {
    pub isValid: XrBool32,
    pub isEyeFollowingBlendshapesValid: XrBool32,
}
#[test]
fn bindgen_test_layout_XrFaceExpressionStatusFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrFaceExpressionStatusFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFaceExpressionStatusFB>(),
        8usize,
        concat!("Size of: ", stringify!(XrFaceExpressionStatusFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFaceExpressionStatusFB>(),
        4usize,
        concat!("Alignment of ", stringify!(XrFaceExpressionStatusFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isValid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionStatusFB),
            "::",
            stringify!(isValid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).isEyeFollowingBlendshapesValid) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionStatusFB),
            "::",
            stringify!(isEyeFollowingBlendshapesValid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceExpressionWeightsFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub weightCount: u32,
    pub weights: *mut f32,
    pub confidenceCount: u32,
    pub confidences: *mut f32,
    pub status: XrFaceExpressionStatusFB,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrFaceExpressionWeightsFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrFaceExpressionWeightsFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFaceExpressionWeightsFB>(),
        64usize,
        concat!("Size of: ", stringify!(XrFaceExpressionWeightsFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFaceExpressionWeightsFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFaceExpressionWeightsFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeightsFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeightsFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weightCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeightsFB),
            "::",
            stringify!(weightCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weights) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeightsFB),
            "::",
            stringify!(weights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidenceCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeightsFB),
            "::",
            stringify!(confidenceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidences) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeightsFB),
            "::",
            stringify!(confidences)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeightsFB),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeightsFB),
            "::",
            stringify!(time)
        )
    );
}
pub type PFN_xrCreateFaceTrackerFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrFaceTrackerCreateInfoFB,
        faceTracker: *mut XrFaceTrackerFB,
    ) -> XrResult,
>;
pub type PFN_xrDestroyFaceTrackerFB =
    ::std::option::Option<unsafe extern "C" fn(faceTracker: XrFaceTrackerFB) -> XrResult>;
pub type PFN_xrGetFaceExpressionWeightsFB = ::std::option::Option<
    unsafe extern "C" fn(
        faceTracker: XrFaceTrackerFB,
        expressionInfo: *const XrFaceExpressionInfoFB,
        expressionWeights: *mut XrFaceExpressionWeightsFB,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeTrackerFB_T {
    _unused: [u8; 0],
}
pub type XrEyeTrackerFB = *mut XrEyeTrackerFB_T;
pub const XrEyePositionFB_XR_EYE_POSITION_LEFT_FB: XrEyePositionFB = 0;
pub const XrEyePositionFB_XR_EYE_POSITION_RIGHT_FB: XrEyePositionFB = 1;
pub const XrEyePositionFB_XR_EYE_POSITION_COUNT_FB: XrEyePositionFB = 2;
pub const XrEyePositionFB_XR_EYE_POSITION_MAX_ENUM_FB: XrEyePositionFB = 2147483647;
pub type XrEyePositionFB = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeGazeFB {
    pub isValid: XrBool32,
    pub gazePose: XrPosef,
    pub gazeConfidence: f32,
}
#[test]
fn bindgen_test_layout_XrEyeGazeFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEyeGazeFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEyeGazeFB>(),
        36usize,
        concat!("Size of: ", stringify!(XrEyeGazeFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEyeGazeFB>(),
        4usize,
        concat!("Alignment of ", stringify!(XrEyeGazeFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isValid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazeFB),
            "::",
            stringify!(isValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gazePose) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazeFB),
            "::",
            stringify!(gazePose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gazeConfidence) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazeFB),
            "::",
            stringify!(gazeConfidence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeTrackerCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrEyeTrackerCreateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEyeTrackerCreateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEyeTrackerCreateInfoFB>(),
        16usize,
        concat!("Size of: ", stringify!(XrEyeTrackerCreateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEyeTrackerCreateInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEyeTrackerCreateInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeTrackerCreateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeTrackerCreateInfoFB),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeGazesInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrEyeGazesInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEyeGazesInfoFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEyeGazesInfoFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrEyeGazesInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEyeGazesInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEyeGazesInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazesInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazesInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseSpace) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazesInfoFB),
            "::",
            stringify!(baseSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazesInfoFB),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemEyeTrackingPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsEyeTracking: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemEyeTrackingPropertiesFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemEyeTrackingPropertiesFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemEyeTrackingPropertiesFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemEyeTrackingPropertiesFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemEyeTrackingPropertiesFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSystemEyeTrackingPropertiesFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEyeTrackingPropertiesFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEyeTrackingPropertiesFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsEyeTracking) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEyeTrackingPropertiesFB),
            "::",
            stringify!(supportsEyeTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeGazesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub gaze: [XrEyeGazeFB; 2usize],
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrEyeGazesFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEyeGazesFB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEyeGazesFB>(),
        96usize,
        concat!("Size of: ", stringify!(XrEyeGazesFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEyeGazesFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEyeGazesFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazesFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazesFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gaze) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazesFB),
            "::",
            stringify!(gaze)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazesFB),
            "::",
            stringify!(time)
        )
    );
}
pub type PFN_xrCreateEyeTrackerFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrEyeTrackerCreateInfoFB,
        eyeTracker: *mut XrEyeTrackerFB,
    ) -> XrResult,
>;
pub type PFN_xrDestroyEyeTrackerFB =
    ::std::option::Option<unsafe extern "C" fn(eyeTracker: XrEyeTrackerFB) -> XrResult>;
pub type PFN_xrGetEyeGazesFB = ::std::option::Option<
    unsafe extern "C" fn(
        eyeTracker: XrEyeTrackerFB,
        gazeInfo: *const XrEyeGazesInfoFB,
        eyeGazes: *mut XrEyeGazesFB,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughKeyboardHandsIntensityFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub leftHandIntensity: f32,
    pub rightHandIntensity: f32,
}
#[test]
fn bindgen_test_layout_XrPassthroughKeyboardHandsIntensityFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughKeyboardHandsIntensityFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughKeyboardHandsIntensityFB>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrPassthroughKeyboardHandsIntensityFB)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughKeyboardHandsIntensityFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrPassthroughKeyboardHandsIntensityFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughKeyboardHandsIntensityFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughKeyboardHandsIntensityFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leftHandIntensity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughKeyboardHandsIntensityFB),
            "::",
            stringify!(leftHandIntensity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rightHandIntensity) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughKeyboardHandsIntensityFB),
            "::",
            stringify!(rightHandIntensity)
        )
    );
}
pub type PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB = ::std::option::Option<
    unsafe extern "C" fn(
        layer: XrPassthroughLayerFB,
        intensity: *const XrPassthroughKeyboardHandsIntensityFB,
    ) -> XrResult,
>;
pub type XrCompositionLayerSettingsFlagsFB = XrFlags64;
pub const XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SUPER_SAMPLING_BIT_FB:
    XrCompositionLayerSettingsFlagsFB = 1;
pub const XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SUPER_SAMPLING_BIT_FB:
    XrCompositionLayerSettingsFlagsFB = 2;
pub const XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SHARPENING_BIT_FB:
    XrCompositionLayerSettingsFlagsFB = 4;
pub const XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SHARPENING_BIT_FB:
    XrCompositionLayerSettingsFlagsFB = 8;
pub const XR_COMPOSITION_LAYER_SETTINGS_AUTO_LAYER_FILTER_BIT_META:
    XrCompositionLayerSettingsFlagsFB = 32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerSettingsFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerSettingsFlagsFB,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerSettingsFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerSettingsFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerSettingsFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrCompositionLayerSettingsFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerSettingsFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerSettingsFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSettingsFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSettingsFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerSettingsFB),
            "::",
            stringify!(layerFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticPcmVibrationFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub bufferSize: u32,
    pub buffer: *const f32,
    pub sampleRate: f32,
    pub append: XrBool32,
    pub samplesConsumed: *mut u32,
}
#[test]
fn bindgen_test_layout_XrHapticPcmVibrationFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrHapticPcmVibrationFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHapticPcmVibrationFB>(),
        48usize,
        concat!("Size of: ", stringify!(XrHapticPcmVibrationFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHapticPcmVibrationFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHapticPcmVibrationFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticPcmVibrationFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticPcmVibrationFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticPcmVibrationFB),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticPcmVibrationFB),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticPcmVibrationFB),
            "::",
            stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).append) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticPcmVibrationFB),
            "::",
            stringify!(append)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplesConsumed) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticPcmVibrationFB),
            "::",
            stringify!(samplesConsumed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDevicePcmSampleRateStateFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub sampleRate: f32,
}
#[test]
fn bindgen_test_layout_XrDevicePcmSampleRateStateFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrDevicePcmSampleRateStateFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrDevicePcmSampleRateStateFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrDevicePcmSampleRateStateFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrDevicePcmSampleRateStateFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrDevicePcmSampleRateStateFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDevicePcmSampleRateStateFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDevicePcmSampleRateStateFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDevicePcmSampleRateStateFB),
            "::",
            stringify!(sampleRate)
        )
    );
}
pub type XrDevicePcmSampleRateGetInfoFB = XrDevicePcmSampleRateStateFB;
pub type PFN_xrGetDeviceSampleRateFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        hapticActionInfo: *const XrHapticActionInfo,
        deviceSampleRate: *mut XrDevicePcmSampleRateGetInfoFB,
    ) -> XrResult,
>;
pub const XrCompareOpFB_XR_COMPARE_OP_NEVER_FB: XrCompareOpFB = 0;
pub const XrCompareOpFB_XR_COMPARE_OP_LESS_FB: XrCompareOpFB = 1;
pub const XrCompareOpFB_XR_COMPARE_OP_EQUAL_FB: XrCompareOpFB = 2;
pub const XrCompareOpFB_XR_COMPARE_OP_LESS_OR_EQUAL_FB: XrCompareOpFB = 3;
pub const XrCompareOpFB_XR_COMPARE_OP_GREATER_FB: XrCompareOpFB = 4;
pub const XrCompareOpFB_XR_COMPARE_OP_NOT_EQUAL_FB: XrCompareOpFB = 5;
pub const XrCompareOpFB_XR_COMPARE_OP_GREATER_OR_EQUAL_FB: XrCompareOpFB = 6;
pub const XrCompareOpFB_XR_COMPARE_OP_ALWAYS_FB: XrCompareOpFB = 7;
pub const XrCompareOpFB_XR_COMPARE_OP_MAX_ENUM_FB: XrCompareOpFB = 2147483647;
pub type XrCompareOpFB = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerDepthTestFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub depthMask: XrBool32,
    pub compareOp: XrCompareOpFB,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerDepthTestFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerDepthTestFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerDepthTestFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrCompositionLayerDepthTestFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerDepthTestFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerDepthTestFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthTestFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthTestFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthTestFB),
            "::",
            stringify!(depthMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compareOp) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthTestFB),
            "::",
            stringify!(compareOp)
        )
    );
}
pub const XrLocalDimmingModeMETA_XR_LOCAL_DIMMING_MODE_OFF_META: XrLocalDimmingModeMETA = 0;
pub const XrLocalDimmingModeMETA_XR_LOCAL_DIMMING_MODE_ON_META: XrLocalDimmingModeMETA = 1;
pub const XrLocalDimmingModeMETA_XR_LOCAL_DIMMING_MODE_MAX_ENUM_META: XrLocalDimmingModeMETA =
    2147483647;
pub type XrLocalDimmingModeMETA = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLocalDimmingFrameEndInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub localDimmingMode: XrLocalDimmingModeMETA,
}
#[test]
fn bindgen_test_layout_XrLocalDimmingFrameEndInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrLocalDimmingFrameEndInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrLocalDimmingFrameEndInfoMETA>(),
        24usize,
        concat!("Size of: ", stringify!(XrLocalDimmingFrameEndInfoMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrLocalDimmingFrameEndInfoMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrLocalDimmingFrameEndInfoMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalDimmingFrameEndInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalDimmingFrameEndInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).localDimmingMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLocalDimmingFrameEndInfoMETA),
            "::",
            stringify!(localDimmingMode)
        )
    );
}
pub type XrPassthroughPreferenceFlagsMETA = XrFlags64;
pub const XR_PASSTHROUGH_PREFERENCE_DEFAULT_TO_ACTIVE_BIT_META: XrPassthroughPreferenceFlagsMETA =
    1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughPreferencesMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrPassthroughPreferenceFlagsMETA,
}
#[test]
fn bindgen_test_layout_XrPassthroughPreferencesMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughPreferencesMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughPreferencesMETA>(),
        24usize,
        concat!("Size of: ", stringify!(XrPassthroughPreferencesMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughPreferencesMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPassthroughPreferencesMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughPreferencesMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughPreferencesMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughPreferencesMETA),
            "::",
            stringify!(flags)
        )
    );
}
pub type PFN_xrGetPassthroughPreferencesMETA = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        preferences: *mut XrPassthroughPreferencesMETA,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardMETA_T {
    _unused: [u8; 0],
}
pub type XrVirtualKeyboardMETA = *mut XrVirtualKeyboardMETA_T;
pub const XrVirtualKeyboardLocationTypeMETA_XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_CUSTOM_META:
    XrVirtualKeyboardLocationTypeMETA = 0;
pub const XrVirtualKeyboardLocationTypeMETA_XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_FAR_META:
    XrVirtualKeyboardLocationTypeMETA = 1;
pub const XrVirtualKeyboardLocationTypeMETA_XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_DIRECT_META:
    XrVirtualKeyboardLocationTypeMETA = 2;
pub const XrVirtualKeyboardLocationTypeMETA_XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_MAX_ENUM_META:
    XrVirtualKeyboardLocationTypeMETA = 2147483647;
pub type XrVirtualKeyboardLocationTypeMETA = ::std::os::raw::c_int;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_RAY_LEFT_META : XrVirtualKeyboardInputSourceMETA = 1 ;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_RAY_RIGHT_META : XrVirtualKeyboardInputSourceMETA = 2 ;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_RAY_LEFT_META:
    XrVirtualKeyboardInputSourceMETA = 3;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_RAY_RIGHT_META:
    XrVirtualKeyboardInputSourceMETA = 4;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_DIRECT_LEFT_META : XrVirtualKeyboardInputSourceMETA = 5 ;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_DIRECT_RIGHT_META : XrVirtualKeyboardInputSourceMETA = 6 ;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_DIRECT_INDEX_TIP_LEFT_META : XrVirtualKeyboardInputSourceMETA = 7 ;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_DIRECT_INDEX_TIP_RIGHT_META : XrVirtualKeyboardInputSourceMETA = 8 ;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_MAX_ENUM_META:
    XrVirtualKeyboardInputSourceMETA = 2147483647;
pub type XrVirtualKeyboardInputSourceMETA = ::std::os::raw::c_int;
pub type XrVirtualKeyboardInputStateFlagsMETA = XrFlags64;
pub const XR_VIRTUAL_KEYBOARD_INPUT_STATE_PRESSED_BIT_META: XrVirtualKeyboardInputStateFlagsMETA =
    1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemVirtualKeyboardPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsVirtualKeyboard: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemVirtualKeyboardPropertiesMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemVirtualKeyboardPropertiesMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemVirtualKeyboardPropertiesMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemVirtualKeyboardPropertiesMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemVirtualKeyboardPropertiesMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemVirtualKeyboardPropertiesMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemVirtualKeyboardPropertiesMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemVirtualKeyboardPropertiesMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsVirtualKeyboard) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemVirtualKeyboardPropertiesMETA),
            "::",
            stringify!(supportsVirtualKeyboard)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardCreateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrVirtualKeyboardCreateInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrVirtualKeyboardCreateInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVirtualKeyboardCreateInfoMETA>(),
        16usize,
        concat!("Size of: ", stringify!(XrVirtualKeyboardCreateInfoMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVirtualKeyboardCreateInfoMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrVirtualKeyboardCreateInfoMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardCreateInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardCreateInfoMETA),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardSpaceCreateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub locationType: XrVirtualKeyboardLocationTypeMETA,
    pub space: XrSpace,
    pub poseInSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrVirtualKeyboardSpaceCreateInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrVirtualKeyboardSpaceCreateInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVirtualKeyboardSpaceCreateInfoMETA>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(XrVirtualKeyboardSpaceCreateInfoMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrVirtualKeyboardSpaceCreateInfoMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrVirtualKeyboardSpaceCreateInfoMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardSpaceCreateInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardSpaceCreateInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locationType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardSpaceCreateInfoMETA),
            "::",
            stringify!(locationType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardSpaceCreateInfoMETA),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInSpace) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardSpaceCreateInfoMETA),
            "::",
            stringify!(poseInSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardLocationInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub locationType: XrVirtualKeyboardLocationTypeMETA,
    pub space: XrSpace,
    pub poseInSpace: XrPosef,
    pub scale: f32,
}
#[test]
fn bindgen_test_layout_XrVirtualKeyboardLocationInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrVirtualKeyboardLocationInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVirtualKeyboardLocationInfoMETA>(),
        64usize,
        concat!("Size of: ", stringify!(XrVirtualKeyboardLocationInfoMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVirtualKeyboardLocationInfoMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrVirtualKeyboardLocationInfoMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardLocationInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardLocationInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locationType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardLocationInfoMETA),
            "::",
            stringify!(locationType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardLocationInfoMETA),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInSpace) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardLocationInfoMETA),
            "::",
            stringify!(poseInSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardLocationInfoMETA),
            "::",
            stringify!(scale)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardModelVisibilitySetInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub visible: XrBool32,
}
#[test]
fn bindgen_test_layout_XrVirtualKeyboardModelVisibilitySetInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrVirtualKeyboardModelVisibilitySetInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVirtualKeyboardModelVisibilitySetInfoMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrVirtualKeyboardModelVisibilitySetInfoMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrVirtualKeyboardModelVisibilitySetInfoMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrVirtualKeyboardModelVisibilitySetInfoMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardModelVisibilitySetInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardModelVisibilitySetInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visible) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardModelVisibilitySetInfoMETA),
            "::",
            stringify!(visible)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardAnimationStateMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub animationIndex: i32,
    pub fraction: f32,
}
#[test]
fn bindgen_test_layout_XrVirtualKeyboardAnimationStateMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrVirtualKeyboardAnimationStateMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVirtualKeyboardAnimationStateMETA>(),
        24usize,
        concat!("Size of: ", stringify!(XrVirtualKeyboardAnimationStateMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVirtualKeyboardAnimationStateMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrVirtualKeyboardAnimationStateMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardAnimationStateMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardAnimationStateMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).animationIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardAnimationStateMETA),
            "::",
            stringify!(animationIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fraction) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardAnimationStateMETA),
            "::",
            stringify!(fraction)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardModelAnimationStatesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub stateCapacityInput: u32,
    pub stateCountOutput: u32,
    pub states: *mut XrVirtualKeyboardAnimationStateMETA,
}
#[test]
fn bindgen_test_layout_XrVirtualKeyboardModelAnimationStatesMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrVirtualKeyboardModelAnimationStatesMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVirtualKeyboardModelAnimationStatesMETA>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrVirtualKeyboardModelAnimationStatesMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrVirtualKeyboardModelAnimationStatesMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrVirtualKeyboardModelAnimationStatesMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardModelAnimationStatesMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardModelAnimationStatesMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stateCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardModelAnimationStatesMETA),
            "::",
            stringify!(stateCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stateCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardModelAnimationStatesMETA),
            "::",
            stringify!(stateCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).states) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardModelAnimationStatesMETA),
            "::",
            stringify!(states)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardTextureDataMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub textureWidth: u32,
    pub textureHeight: u32,
    pub bufferCapacityInput: u32,
    pub bufferCountOutput: u32,
    pub buffer: *mut u8,
}
#[test]
fn bindgen_test_layout_XrVirtualKeyboardTextureDataMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrVirtualKeyboardTextureDataMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVirtualKeyboardTextureDataMETA>(),
        40usize,
        concat!("Size of: ", stringify!(XrVirtualKeyboardTextureDataMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVirtualKeyboardTextureDataMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrVirtualKeyboardTextureDataMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardTextureDataMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardTextureDataMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureWidth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardTextureDataMETA),
            "::",
            stringify!(textureWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureHeight) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardTextureDataMETA),
            "::",
            stringify!(textureHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferCapacityInput) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardTextureDataMETA),
            "::",
            stringify!(bufferCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferCountOutput) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardTextureDataMETA),
            "::",
            stringify!(bufferCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardTextureDataMETA),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardInputInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub inputSource: XrVirtualKeyboardInputSourceMETA,
    pub inputSpace: XrSpace,
    pub inputPoseInSpace: XrPosef,
    pub inputState: XrVirtualKeyboardInputStateFlagsMETA,
}
#[test]
fn bindgen_test_layout_XrVirtualKeyboardInputInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrVirtualKeyboardInputInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVirtualKeyboardInputInfoMETA>(),
        72usize,
        concat!("Size of: ", stringify!(XrVirtualKeyboardInputInfoMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVirtualKeyboardInputInfoMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrVirtualKeyboardInputInfoMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardInputInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardInputInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputSource) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardInputInfoMETA),
            "::",
            stringify!(inputSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputSpace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardInputInfoMETA),
            "::",
            stringify!(inputSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputPoseInSpace) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardInputInfoMETA),
            "::",
            stringify!(inputPoseInSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputState) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardInputInfoMETA),
            "::",
            stringify!(inputState)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardTextContextChangeInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub textContext: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XrVirtualKeyboardTextContextChangeInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrVirtualKeyboardTextContextChangeInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrVirtualKeyboardTextContextChangeInfoMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrVirtualKeyboardTextContextChangeInfoMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrVirtualKeyboardTextContextChangeInfoMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrVirtualKeyboardTextContextChangeInfoMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardTextContextChangeInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardTextContextChangeInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textContext) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVirtualKeyboardTextContextChangeInfoMETA),
            "::",
            stringify!(textContext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVirtualKeyboardCommitTextMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub keyboard: XrVirtualKeyboardMETA,
    pub text: [::std::os::raw::c_char; 3992usize],
}
#[test]
fn bindgen_test_layout_XrEventDataVirtualKeyboardCommitTextMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataVirtualKeyboardCommitTextMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataVirtualKeyboardCommitTextMETA>(),
        4016usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataVirtualKeyboardCommitTextMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataVirtualKeyboardCommitTextMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataVirtualKeyboardCommitTextMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardCommitTextMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardCommitTextMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyboard) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardCommitTextMETA),
            "::",
            stringify!(keyboard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardCommitTextMETA),
            "::",
            stringify!(text)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVirtualKeyboardBackspaceMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub keyboard: XrVirtualKeyboardMETA,
}
#[test]
fn bindgen_test_layout_XrEventDataVirtualKeyboardBackspaceMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataVirtualKeyboardBackspaceMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataVirtualKeyboardBackspaceMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataVirtualKeyboardBackspaceMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataVirtualKeyboardBackspaceMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataVirtualKeyboardBackspaceMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardBackspaceMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardBackspaceMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyboard) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardBackspaceMETA),
            "::",
            stringify!(keyboard)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVirtualKeyboardEnterMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub keyboard: XrVirtualKeyboardMETA,
}
#[test]
fn bindgen_test_layout_XrEventDataVirtualKeyboardEnterMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataVirtualKeyboardEnterMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataVirtualKeyboardEnterMETA>(),
        24usize,
        concat!("Size of: ", stringify!(XrEventDataVirtualKeyboardEnterMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataVirtualKeyboardEnterMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataVirtualKeyboardEnterMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardEnterMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardEnterMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyboard) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardEnterMETA),
            "::",
            stringify!(keyboard)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVirtualKeyboardShownMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub keyboard: XrVirtualKeyboardMETA,
}
#[test]
fn bindgen_test_layout_XrEventDataVirtualKeyboardShownMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataVirtualKeyboardShownMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataVirtualKeyboardShownMETA>(),
        24usize,
        concat!("Size of: ", stringify!(XrEventDataVirtualKeyboardShownMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataVirtualKeyboardShownMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataVirtualKeyboardShownMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardShownMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardShownMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyboard) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardShownMETA),
            "::",
            stringify!(keyboard)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVirtualKeyboardHiddenMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub keyboard: XrVirtualKeyboardMETA,
}
#[test]
fn bindgen_test_layout_XrEventDataVirtualKeyboardHiddenMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataVirtualKeyboardHiddenMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataVirtualKeyboardHiddenMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataVirtualKeyboardHiddenMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataVirtualKeyboardHiddenMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataVirtualKeyboardHiddenMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardHiddenMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardHiddenMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyboard) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVirtualKeyboardHiddenMETA),
            "::",
            stringify!(keyboard)
        )
    );
}
pub type PFN_xrCreateVirtualKeyboardMETA = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrVirtualKeyboardCreateInfoMETA,
        keyboard: *mut XrVirtualKeyboardMETA,
    ) -> XrResult,
>;
pub type PFN_xrDestroyVirtualKeyboardMETA =
    ::std::option::Option<unsafe extern "C" fn(keyboard: XrVirtualKeyboardMETA) -> XrResult>;
pub type PFN_xrCreateVirtualKeyboardSpaceMETA = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        keyboard: XrVirtualKeyboardMETA,
        createInfo: *const XrVirtualKeyboardSpaceCreateInfoMETA,
        keyboardSpace: *mut XrSpace,
    ) -> XrResult,
>;
pub type PFN_xrSuggestVirtualKeyboardLocationMETA = ::std::option::Option<
    unsafe extern "C" fn(
        keyboard: XrVirtualKeyboardMETA,
        locationInfo: *const XrVirtualKeyboardLocationInfoMETA,
    ) -> XrResult,
>;
pub type PFN_xrGetVirtualKeyboardScaleMETA = ::std::option::Option<
    unsafe extern "C" fn(keyboard: XrVirtualKeyboardMETA, scale: *mut f32) -> XrResult,
>;
pub type PFN_xrSetVirtualKeyboardModelVisibilityMETA = ::std::option::Option<
    unsafe extern "C" fn(
        keyboard: XrVirtualKeyboardMETA,
        modelVisibility: *const XrVirtualKeyboardModelVisibilitySetInfoMETA,
    ) -> XrResult,
>;
pub type PFN_xrGetVirtualKeyboardModelAnimationStatesMETA = ::std::option::Option<
    unsafe extern "C" fn(
        keyboard: XrVirtualKeyboardMETA,
        animationStates: *mut XrVirtualKeyboardModelAnimationStatesMETA,
    ) -> XrResult,
>;
pub type PFN_xrGetVirtualKeyboardDirtyTexturesMETA = ::std::option::Option<
    unsafe extern "C" fn(
        keyboard: XrVirtualKeyboardMETA,
        textureIdCapacityInput: u32,
        textureIdCountOutput: *mut u32,
        textureIds: *mut u64,
    ) -> XrResult,
>;
pub type PFN_xrGetVirtualKeyboardTextureDataMETA = ::std::option::Option<
    unsafe extern "C" fn(
        keyboard: XrVirtualKeyboardMETA,
        textureId: u64,
        textureData: *mut XrVirtualKeyboardTextureDataMETA,
    ) -> XrResult,
>;
pub type PFN_xrSendVirtualKeyboardInputMETA = ::std::option::Option<
    unsafe extern "C" fn(
        keyboard: XrVirtualKeyboardMETA,
        info: *const XrVirtualKeyboardInputInfoMETA,
        interactorRootPose: *mut XrPosef,
    ) -> XrResult,
>;
pub type PFN_xrChangeVirtualKeyboardTextContextMETA = ::std::option::Option<
    unsafe extern "C" fn(
        keyboard: XrVirtualKeyboardMETA,
        changeInfo: *const XrVirtualKeyboardTextContextChangeInfoMETA,
    ) -> XrResult,
>;
pub const XrExternalCameraAttachedToDeviceOCULUS_XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_NONE_OCULUS : XrExternalCameraAttachedToDeviceOCULUS = 0 ;
pub const XrExternalCameraAttachedToDeviceOCULUS_XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_HMD_OCULUS : XrExternalCameraAttachedToDeviceOCULUS = 1 ;
pub const XrExternalCameraAttachedToDeviceOCULUS_XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_LTOUCH_OCULUS : XrExternalCameraAttachedToDeviceOCULUS = 2 ;
pub const XrExternalCameraAttachedToDeviceOCULUS_XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_RTOUCH_OCULUS : XrExternalCameraAttachedToDeviceOCULUS = 3 ;
pub const XrExternalCameraAttachedToDeviceOCULUS_XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_MAX_ENUM_OCULUS : XrExternalCameraAttachedToDeviceOCULUS = 2147483647 ;
pub type XrExternalCameraAttachedToDeviceOCULUS = ::std::os::raw::c_int;
pub type XrExternalCameraStatusFlagsOCULUS = XrFlags64;
pub const XR_EXTERNAL_CAMERA_STATUS_CONNECTED_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 1;
pub const XR_EXTERNAL_CAMERA_STATUS_CALIBRATING_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 2;
pub const XR_EXTERNAL_CAMERA_STATUS_CALIBRATION_FAILED_BIT_OCULUS:
    XrExternalCameraStatusFlagsOCULUS = 4;
pub const XR_EXTERNAL_CAMERA_STATUS_CALIBRATED_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 8;
pub const XR_EXTERNAL_CAMERA_STATUS_CAPTURING_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExternalCameraIntrinsicsOCULUS {
    pub lastChangeTime: XrTime,
    pub fov: XrFovf,
    pub virtualNearPlaneDistance: f32,
    pub virtualFarPlaneDistance: f32,
    pub imageSensorPixelResolution: XrExtent2Di,
}
#[test]
fn bindgen_test_layout_XrExternalCameraIntrinsicsOCULUS() {
    const UNINIT: ::std::mem::MaybeUninit<XrExternalCameraIntrinsicsOCULUS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrExternalCameraIntrinsicsOCULUS>(),
        40usize,
        concat!("Size of: ", stringify!(XrExternalCameraIntrinsicsOCULUS))
    );
    assert_eq!(
        ::std::mem::align_of::<XrExternalCameraIntrinsicsOCULUS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrExternalCameraIntrinsicsOCULUS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastChangeTime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraIntrinsicsOCULUS),
            "::",
            stringify!(lastChangeTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fov) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraIntrinsicsOCULUS),
            "::",
            stringify!(fov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtualNearPlaneDistance) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraIntrinsicsOCULUS),
            "::",
            stringify!(virtualNearPlaneDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtualFarPlaneDistance) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraIntrinsicsOCULUS),
            "::",
            stringify!(virtualFarPlaneDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageSensorPixelResolution) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraIntrinsicsOCULUS),
            "::",
            stringify!(imageSensorPixelResolution)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExternalCameraExtrinsicsOCULUS {
    pub lastChangeTime: XrTime,
    pub cameraStatusFlags: XrExternalCameraStatusFlagsOCULUS,
    pub attachedToDevice: XrExternalCameraAttachedToDeviceOCULUS,
    pub relativePose: XrPosef,
}
#[test]
fn bindgen_test_layout_XrExternalCameraExtrinsicsOCULUS() {
    const UNINIT: ::std::mem::MaybeUninit<XrExternalCameraExtrinsicsOCULUS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrExternalCameraExtrinsicsOCULUS>(),
        48usize,
        concat!("Size of: ", stringify!(XrExternalCameraExtrinsicsOCULUS))
    );
    assert_eq!(
        ::std::mem::align_of::<XrExternalCameraExtrinsicsOCULUS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrExternalCameraExtrinsicsOCULUS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastChangeTime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraExtrinsicsOCULUS),
            "::",
            stringify!(lastChangeTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cameraStatusFlags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraExtrinsicsOCULUS),
            "::",
            stringify!(cameraStatusFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachedToDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraExtrinsicsOCULUS),
            "::",
            stringify!(attachedToDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relativePose) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraExtrinsicsOCULUS),
            "::",
            stringify!(relativePose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExternalCameraOCULUS {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 32usize],
    pub intrinsics: XrExternalCameraIntrinsicsOCULUS,
    pub extrinsics: XrExternalCameraExtrinsicsOCULUS,
}
#[test]
fn bindgen_test_layout_XrExternalCameraOCULUS() {
    const UNINIT: ::std::mem::MaybeUninit<XrExternalCameraOCULUS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrExternalCameraOCULUS>(),
        136usize,
        concat!("Size of: ", stringify!(XrExternalCameraOCULUS))
    );
    assert_eq!(
        ::std::mem::align_of::<XrExternalCameraOCULUS>(),
        8usize,
        concat!("Alignment of ", stringify!(XrExternalCameraOCULUS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraOCULUS),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraOCULUS),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraOCULUS),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intrinsics) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraOCULUS),
            "::",
            stringify!(intrinsics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extrinsics) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExternalCameraOCULUS),
            "::",
            stringify!(extrinsics)
        )
    );
}
pub type PFN_xrEnumerateExternalCamerasOCULUS = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        cameraCapacityInput: u32,
        cameraCountOutput: *mut u32,
        cameras: *mut XrExternalCameraOCULUS,
    ) -> XrResult,
>;
pub const XrPerformanceMetricsCounterUnitMETA_XR_PERFORMANCE_METRICS_COUNTER_UNIT_GENERIC_META:
    XrPerformanceMetricsCounterUnitMETA = 0;
pub const XrPerformanceMetricsCounterUnitMETA_XR_PERFORMANCE_METRICS_COUNTER_UNIT_PERCENTAGE_META : XrPerformanceMetricsCounterUnitMETA = 1 ;
pub const XrPerformanceMetricsCounterUnitMETA_XR_PERFORMANCE_METRICS_COUNTER_UNIT_MILLISECONDS_META : XrPerformanceMetricsCounterUnitMETA = 2 ;
pub const XrPerformanceMetricsCounterUnitMETA_XR_PERFORMANCE_METRICS_COUNTER_UNIT_BYTES_META:
    XrPerformanceMetricsCounterUnitMETA = 3;
pub const XrPerformanceMetricsCounterUnitMETA_XR_PERFORMANCE_METRICS_COUNTER_UNIT_HERTZ_META:
    XrPerformanceMetricsCounterUnitMETA = 4;
pub const XrPerformanceMetricsCounterUnitMETA_XR_PERFORMANCE_METRICS_COUNTER_UNIT_MAX_ENUM_META:
    XrPerformanceMetricsCounterUnitMETA = 2147483647;
pub type XrPerformanceMetricsCounterUnitMETA = ::std::os::raw::c_int;
pub type XrPerformanceMetricsCounterFlagsMETA = XrFlags64;
pub const XR_PERFORMANCE_METRICS_COUNTER_ANY_VALUE_VALID_BIT_META:
    XrPerformanceMetricsCounterFlagsMETA = 1;
pub const XR_PERFORMANCE_METRICS_COUNTER_UINT_VALUE_VALID_BIT_META:
    XrPerformanceMetricsCounterFlagsMETA = 2;
pub const XR_PERFORMANCE_METRICS_COUNTER_FLOAT_VALUE_VALID_BIT_META:
    XrPerformanceMetricsCounterFlagsMETA = 4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPerformanceMetricsStateMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub enabled: XrBool32,
}
#[test]
fn bindgen_test_layout_XrPerformanceMetricsStateMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrPerformanceMetricsStateMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPerformanceMetricsStateMETA>(),
        24usize,
        concat!("Size of: ", stringify!(XrPerformanceMetricsStateMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPerformanceMetricsStateMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPerformanceMetricsStateMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPerformanceMetricsStateMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPerformanceMetricsStateMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPerformanceMetricsStateMETA),
            "::",
            stringify!(enabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPerformanceMetricsCounterMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub counterFlags: XrPerformanceMetricsCounterFlagsMETA,
    pub counterUnit: XrPerformanceMetricsCounterUnitMETA,
    pub uintValue: u32,
    pub floatValue: f32,
}
#[test]
fn bindgen_test_layout_XrPerformanceMetricsCounterMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrPerformanceMetricsCounterMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPerformanceMetricsCounterMETA>(),
        40usize,
        concat!("Size of: ", stringify!(XrPerformanceMetricsCounterMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPerformanceMetricsCounterMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPerformanceMetricsCounterMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPerformanceMetricsCounterMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPerformanceMetricsCounterMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPerformanceMetricsCounterMETA),
            "::",
            stringify!(counterFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterUnit) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPerformanceMetricsCounterMETA),
            "::",
            stringify!(counterUnit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uintValue) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPerformanceMetricsCounterMETA),
            "::",
            stringify!(uintValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).floatValue) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPerformanceMetricsCounterMETA),
            "::",
            stringify!(floatValue)
        )
    );
}
pub type PFN_xrEnumeratePerformanceMetricsCounterPathsMETA = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        counterPathCapacityInput: u32,
        counterPathCountOutput: *mut u32,
        counterPaths: *mut XrPath,
    ) -> XrResult,
>;
pub type PFN_xrSetPerformanceMetricsStateMETA = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        state: *const XrPerformanceMetricsStateMETA,
    ) -> XrResult,
>;
pub type PFN_xrGetPerformanceMetricsStateMETA = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, state: *mut XrPerformanceMetricsStateMETA) -> XrResult,
>;
pub type PFN_xrQueryPerformanceMetricsCounterMETA = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        counterPath: XrPath,
        counter: *mut XrPerformanceMetricsCounterMETA,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceListSaveInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub spaceCount: u32,
    pub spaces: *mut XrSpace,
    pub location: XrSpaceStorageLocationFB,
}
#[test]
fn bindgen_test_layout_XrSpaceListSaveInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceListSaveInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceListSaveInfoFB>(),
        40usize,
        concat!("Size of: ", stringify!(XrSpaceListSaveInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceListSaveInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceListSaveInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceListSaveInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceListSaveInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaceCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceListSaveInfoFB),
            "::",
            stringify!(spaceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaces) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceListSaveInfoFB),
            "::",
            stringify!(spaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceListSaveInfoFB),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceListSaveCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[test]
fn bindgen_test_layout_XrEventDataSpaceListSaveCompleteFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataSpaceListSaveCompleteFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataSpaceListSaveCompleteFB>(),
        32usize,
        concat!("Size of: ", stringify!(XrEventDataSpaceListSaveCompleteFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataSpaceListSaveCompleteFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataSpaceListSaveCompleteFB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceListSaveCompleteFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceListSaveCompleteFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceListSaveCompleteFB),
            "::",
            stringify!(requestId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSpaceListSaveCompleteFB),
            "::",
            stringify!(result)
        )
    );
}
pub type PFN_xrSaveSpaceListFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        info: *const XrSpaceListSaveInfoFB,
        requestId: *mut XrAsyncRequestIdFB,
    ) -> XrResult,
>;
pub type XrSpaceUserIdFB = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceUserCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub userId: XrSpaceUserIdFB,
}
#[test]
fn bindgen_test_layout_XrSpaceUserCreateInfoFB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceUserCreateInfoFB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceUserCreateInfoFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSpaceUserCreateInfoFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceUserCreateInfoFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceUserCreateInfoFB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceUserCreateInfoFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceUserCreateInfoFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceUserCreateInfoFB),
            "::",
            stringify!(userId)
        )
    );
}
pub type PFN_xrCreateSpaceUserFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        info: *const XrSpaceUserCreateInfoFB,
        user: *mut XrSpaceUserFB,
    ) -> XrResult,
>;
pub type PFN_xrGetSpaceUserIdFB = ::std::option::Option<
    unsafe extern "C" fn(user: XrSpaceUserFB, userId: *mut XrSpaceUserIdFB) -> XrResult,
>;
pub type PFN_xrDestroySpaceUserFB =
    ::std::option::Option<unsafe extern "C" fn(user: XrSpaceUserFB) -> XrResult>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemHeadsetIdPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub id: XrUuidEXT,
}
#[test]
fn bindgen_test_layout_XrSystemHeadsetIdPropertiesMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemHeadsetIdPropertiesMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemHeadsetIdPropertiesMETA>(),
        32usize,
        concat!("Size of: ", stringify!(XrSystemHeadsetIdPropertiesMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemHeadsetIdPropertiesMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSystemHeadsetIdPropertiesMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHeadsetIdPropertiesMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHeadsetIdPropertiesMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHeadsetIdPropertiesMETA),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRecommendedLayerResolutionMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub recommendedImageDimensions: XrExtent2Di,
    pub isValid: XrBool32,
}
#[test]
fn bindgen_test_layout_XrRecommendedLayerResolutionMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrRecommendedLayerResolutionMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrRecommendedLayerResolutionMETA>(),
        32usize,
        concat!("Size of: ", stringify!(XrRecommendedLayerResolutionMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrRecommendedLayerResolutionMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrRecommendedLayerResolutionMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRecommendedLayerResolutionMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRecommendedLayerResolutionMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recommendedImageDimensions) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRecommendedLayerResolutionMETA),
            "::",
            stringify!(recommendedImageDimensions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isValid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRecommendedLayerResolutionMETA),
            "::",
            stringify!(isValid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRecommendedLayerResolutionGetInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layer: *const XrCompositionLayerBaseHeader,
    pub predictedDisplayTime: XrTime,
}
#[test]
fn bindgen_test_layout_XrRecommendedLayerResolutionGetInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrRecommendedLayerResolutionGetInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrRecommendedLayerResolutionGetInfoMETA>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrRecommendedLayerResolutionGetInfoMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrRecommendedLayerResolutionGetInfoMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrRecommendedLayerResolutionGetInfoMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRecommendedLayerResolutionGetInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRecommendedLayerResolutionGetInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRecommendedLayerResolutionGetInfoMETA),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).predictedDisplayTime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRecommendedLayerResolutionGetInfoMETA),
            "::",
            stringify!(predictedDisplayTime)
        )
    );
}
pub type PFN_xrGetRecommendedLayerResolutionMETA = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        info: *const XrRecommendedLayerResolutionGetInfoMETA,
        resolution: *mut XrRecommendedLayerResolutionMETA,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorLutMETA_T {
    _unused: [u8; 0],
}
pub type XrPassthroughColorLutMETA = *mut XrPassthroughColorLutMETA_T;
pub const XrPassthroughColorLutChannelsMETA_XR_PASSTHROUGH_COLOR_LUT_CHANNELS_RGB_META:
    XrPassthroughColorLutChannelsMETA = 1;
pub const XrPassthroughColorLutChannelsMETA_XR_PASSTHROUGH_COLOR_LUT_CHANNELS_RGBA_META:
    XrPassthroughColorLutChannelsMETA = 2;
pub const XrPassthroughColorLutChannelsMETA_XR_PASSTHROUGH_COLOR_LUT_CHANNELS_MAX_ENUM_META:
    XrPassthroughColorLutChannelsMETA = 2147483647;
pub type XrPassthroughColorLutChannelsMETA = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorLutDataMETA {
    pub bufferSize: u32,
    pub buffer: *const u8,
}
#[test]
fn bindgen_test_layout_XrPassthroughColorLutDataMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughColorLutDataMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughColorLutDataMETA>(),
        16usize,
        concat!("Size of: ", stringify!(XrPassthroughColorLutDataMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughColorLutDataMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPassthroughColorLutDataMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorLutDataMETA),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorLutDataMETA),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorLutCreateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub channels: XrPassthroughColorLutChannelsMETA,
    pub resolution: u32,
    pub data: XrPassthroughColorLutDataMETA,
}
#[test]
fn bindgen_test_layout_XrPassthroughColorLutCreateInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughColorLutCreateInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughColorLutCreateInfoMETA>(),
        40usize,
        concat!("Size of: ", stringify!(XrPassthroughColorLutCreateInfoMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughColorLutCreateInfoMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrPassthroughColorLutCreateInfoMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorLutCreateInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorLutCreateInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorLutCreateInfoMETA),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolution) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorLutCreateInfoMETA),
            "::",
            stringify!(resolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorLutCreateInfoMETA),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorLutUpdateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub data: XrPassthroughColorLutDataMETA,
}
#[test]
fn bindgen_test_layout_XrPassthroughColorLutUpdateInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughColorLutUpdateInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughColorLutUpdateInfoMETA>(),
        32usize,
        concat!("Size of: ", stringify!(XrPassthroughColorLutUpdateInfoMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughColorLutUpdateInfoMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrPassthroughColorLutUpdateInfoMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorLutUpdateInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorLutUpdateInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorLutUpdateInfoMETA),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorMapLutMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub colorLut: XrPassthroughColorLutMETA,
    pub weight: f32,
}
#[test]
fn bindgen_test_layout_XrPassthroughColorMapLutMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughColorMapLutMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughColorMapLutMETA>(),
        32usize,
        concat!("Size of: ", stringify!(XrPassthroughColorMapLutMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughColorMapLutMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPassthroughColorMapLutMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapLutMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapLutMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorLut) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapLutMETA),
            "::",
            stringify!(colorLut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapLutMETA),
            "::",
            stringify!(weight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorMapInterpolatedLutMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub sourceColorLut: XrPassthroughColorLutMETA,
    pub targetColorLut: XrPassthroughColorLutMETA,
    pub weight: f32,
}
#[test]
fn bindgen_test_layout_XrPassthroughColorMapInterpolatedLutMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughColorMapInterpolatedLutMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughColorMapInterpolatedLutMETA>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(XrPassthroughColorMapInterpolatedLutMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughColorMapInterpolatedLutMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrPassthroughColorMapInterpolatedLutMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapInterpolatedLutMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapInterpolatedLutMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceColorLut) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapInterpolatedLutMETA),
            "::",
            stringify!(sourceColorLut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targetColorLut) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapInterpolatedLutMETA),
            "::",
            stringify!(targetColorLut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorMapInterpolatedLutMETA),
            "::",
            stringify!(weight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemPassthroughColorLutPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub maxColorLutResolution: u32,
}
#[test]
fn bindgen_test_layout_XrSystemPassthroughColorLutPropertiesMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemPassthroughColorLutPropertiesMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemPassthroughColorLutPropertiesMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemPassthroughColorLutPropertiesMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemPassthroughColorLutPropertiesMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemPassthroughColorLutPropertiesMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemPassthroughColorLutPropertiesMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemPassthroughColorLutPropertiesMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxColorLutResolution) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemPassthroughColorLutPropertiesMETA),
            "::",
            stringify!(maxColorLutResolution)
        )
    );
}
pub type PFN_xrCreatePassthroughColorLutMETA = ::std::option::Option<
    unsafe extern "C" fn(
        passthrough: XrPassthroughFB,
        createInfo: *const XrPassthroughColorLutCreateInfoMETA,
        colorLut: *mut XrPassthroughColorLutMETA,
    ) -> XrResult,
>;
pub type PFN_xrDestroyPassthroughColorLutMETA =
    ::std::option::Option<unsafe extern "C" fn(colorLut: XrPassthroughColorLutMETA) -> XrResult>;
pub type PFN_xrUpdatePassthroughColorLutMETA = ::std::option::Option<
    unsafe extern "C" fn(
        colorLut: XrPassthroughColorLutMETA,
        updateInfo: *const XrPassthroughColorLutUpdateInfoMETA,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceTriangleMeshGetInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSpaceTriangleMeshGetInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceTriangleMeshGetInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceTriangleMeshGetInfoMETA>(),
        16usize,
        concat!("Size of: ", stringify!(XrSpaceTriangleMeshGetInfoMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceTriangleMeshGetInfoMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceTriangleMeshGetInfoMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceTriangleMeshGetInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceTriangleMeshGetInfoMETA),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceTriangleMeshMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrVector3f,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut u32,
}
#[test]
fn bindgen_test_layout_XrSpaceTriangleMeshMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpaceTriangleMeshMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpaceTriangleMeshMETA>(),
        48usize,
        concat!("Size of: ", stringify!(XrSpaceTriangleMeshMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceTriangleMeshMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceTriangleMeshMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceTriangleMeshMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceTriangleMeshMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceTriangleMeshMETA),
            "::",
            stringify!(vertexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceTriangleMeshMETA),
            "::",
            stringify!(vertexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceTriangleMeshMETA),
            "::",
            stringify!(vertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCapacityInput) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceTriangleMeshMETA),
            "::",
            stringify!(indexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCountOutput) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceTriangleMeshMETA),
            "::",
            stringify!(indexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indices) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceTriangleMeshMETA),
            "::",
            stringify!(indices)
        )
    );
}
pub type PFN_xrGetSpaceTriangleMeshMETA = ::std::option::Option<
    unsafe extern "C" fn(
        space: XrSpace,
        getInfo: *const XrSpaceTriangleMeshGetInfoMETA,
        triangleMeshOutput: *mut XrSpaceTriangleMeshMETA,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceTracker2FB_T {
    _unused: [u8; 0],
}
pub type XrFaceTracker2FB = *mut XrFaceTracker2FB_T;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_BROW_LOWERER_L_FB: XrFaceExpression2FB = 0;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_BROW_LOWERER_R_FB: XrFaceExpression2FB = 1;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHEEK_PUFF_L_FB: XrFaceExpression2FB = 2;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHEEK_PUFF_R_FB: XrFaceExpression2FB = 3;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHEEK_RAISER_L_FB: XrFaceExpression2FB = 4;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHEEK_RAISER_R_FB: XrFaceExpression2FB = 5;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHEEK_SUCK_L_FB: XrFaceExpression2FB = 6;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHEEK_SUCK_R_FB: XrFaceExpression2FB = 7;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHIN_RAISER_B_FB: XrFaceExpression2FB = 8;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHIN_RAISER_T_FB: XrFaceExpression2FB = 9;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_DIMPLER_L_FB: XrFaceExpression2FB = 10;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_DIMPLER_R_FB: XrFaceExpression2FB = 11;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_CLOSED_L_FB: XrFaceExpression2FB = 12;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_CLOSED_R_FB: XrFaceExpression2FB = 13;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_DOWN_L_FB: XrFaceExpression2FB = 14;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_DOWN_R_FB: XrFaceExpression2FB = 15;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_LEFT_L_FB: XrFaceExpression2FB = 16;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_LEFT_R_FB: XrFaceExpression2FB = 17;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_RIGHT_L_FB: XrFaceExpression2FB = 18;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_RIGHT_R_FB: XrFaceExpression2FB = 19;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_UP_L_FB: XrFaceExpression2FB = 20;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_UP_R_FB: XrFaceExpression2FB = 21;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_INNER_BROW_RAISER_L_FB: XrFaceExpression2FB = 22;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_INNER_BROW_RAISER_R_FB: XrFaceExpression2FB = 23;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_JAW_DROP_FB: XrFaceExpression2FB = 24;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_JAW_SIDEWAYS_LEFT_FB: XrFaceExpression2FB = 25;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_JAW_SIDEWAYS_RIGHT_FB: XrFaceExpression2FB = 26;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_JAW_THRUST_FB: XrFaceExpression2FB = 27;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LID_TIGHTENER_L_FB: XrFaceExpression2FB = 28;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LID_TIGHTENER_R_FB: XrFaceExpression2FB = 29;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_CORNER_DEPRESSOR_L_FB: XrFaceExpression2FB =
    30;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_CORNER_DEPRESSOR_R_FB: XrFaceExpression2FB =
    31;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_CORNER_PULLER_L_FB: XrFaceExpression2FB = 32;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_CORNER_PULLER_R_FB: XrFaceExpression2FB = 33;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_FUNNELER_LB_FB: XrFaceExpression2FB = 34;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_FUNNELER_LT_FB: XrFaceExpression2FB = 35;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_FUNNELER_RB_FB: XrFaceExpression2FB = 36;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_FUNNELER_RT_FB: XrFaceExpression2FB = 37;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_PRESSOR_L_FB: XrFaceExpression2FB = 38;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_PRESSOR_R_FB: XrFaceExpression2FB = 39;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_PUCKER_L_FB: XrFaceExpression2FB = 40;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_PUCKER_R_FB: XrFaceExpression2FB = 41;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_STRETCHER_L_FB: XrFaceExpression2FB = 42;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_STRETCHER_R_FB: XrFaceExpression2FB = 43;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_SUCK_LB_FB: XrFaceExpression2FB = 44;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_SUCK_LT_FB: XrFaceExpression2FB = 45;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_SUCK_RB_FB: XrFaceExpression2FB = 46;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_SUCK_RT_FB: XrFaceExpression2FB = 47;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_TIGHTENER_L_FB: XrFaceExpression2FB = 48;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_TIGHTENER_R_FB: XrFaceExpression2FB = 49;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIPS_TOWARD_FB: XrFaceExpression2FB = 50;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LOWER_LIP_DEPRESSOR_L_FB: XrFaceExpression2FB =
    51;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LOWER_LIP_DEPRESSOR_R_FB: XrFaceExpression2FB =
    52;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_MOUTH_LEFT_FB: XrFaceExpression2FB = 53;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_MOUTH_RIGHT_FB: XrFaceExpression2FB = 54;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_NOSE_WRINKLER_L_FB: XrFaceExpression2FB = 55;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_NOSE_WRINKLER_R_FB: XrFaceExpression2FB = 56;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_OUTER_BROW_RAISER_L_FB: XrFaceExpression2FB = 57;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_OUTER_BROW_RAISER_R_FB: XrFaceExpression2FB = 58;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_UPPER_LID_RAISER_L_FB: XrFaceExpression2FB = 59;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_UPPER_LID_RAISER_R_FB: XrFaceExpression2FB = 60;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_UPPER_LIP_RAISER_L_FB: XrFaceExpression2FB = 61;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_UPPER_LIP_RAISER_R_FB: XrFaceExpression2FB = 62;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_TIP_INTERDENTAL_FB: XrFaceExpression2FB =
    63;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_TIP_ALVEOLAR_FB: XrFaceExpression2FB = 64;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_FRONT_DORSAL_PALATE_FB:
    XrFaceExpression2FB = 65;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_MID_DORSAL_PALATE_FB: XrFaceExpression2FB =
    66;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_BACK_DORSAL_VELAR_FB: XrFaceExpression2FB =
    67;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_OUT_FB: XrFaceExpression2FB = 68;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_RETREAT_FB: XrFaceExpression2FB = 69;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_COUNT_FB: XrFaceExpression2FB = 70;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION_2FB_MAX_ENUM_FB: XrFaceExpression2FB = 2147483647;
pub type XrFaceExpression2FB = ::std::os::raw::c_int;
pub const XrFaceExpressionSet2FB_XR_FACE_EXPRESSION_SET2_DEFAULT_FB: XrFaceExpressionSet2FB = 0;
pub const XrFaceExpressionSet2FB_XR_FACE_EXPRESSION_SET_2FB_MAX_ENUM_FB: XrFaceExpressionSet2FB =
    2147483647;
pub type XrFaceExpressionSet2FB = ::std::os::raw::c_int;
pub const XrFaceTrackingDataSource2FB_XR_FACE_TRACKING_DATA_SOURCE2_VISUAL_FB:
    XrFaceTrackingDataSource2FB = 0;
pub const XrFaceTrackingDataSource2FB_XR_FACE_TRACKING_DATA_SOURCE2_AUDIO_FB:
    XrFaceTrackingDataSource2FB = 1;
pub const XrFaceTrackingDataSource2FB_XR_FACE_TRACKING_DATA_SOURCE_2FB_MAX_ENUM_FB:
    XrFaceTrackingDataSource2FB = 2147483647;
pub type XrFaceTrackingDataSource2FB = ::std::os::raw::c_int;
pub const XrFaceConfidence2FB_XR_FACE_CONFIDENCE2_LOWER_FACE_FB: XrFaceConfidence2FB = 0;
pub const XrFaceConfidence2FB_XR_FACE_CONFIDENCE2_UPPER_FACE_FB: XrFaceConfidence2FB = 1;
pub const XrFaceConfidence2FB_XR_FACE_CONFIDENCE2_COUNT_FB: XrFaceConfidence2FB = 2;
pub const XrFaceConfidence2FB_XR_FACE_CONFIDENCE_2FB_MAX_ENUM_FB: XrFaceConfidence2FB = 2147483647;
pub type XrFaceConfidence2FB = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemFaceTrackingProperties2FB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsVisualFaceTracking: XrBool32,
    pub supportsAudioFaceTracking: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemFaceTrackingProperties2FB() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemFaceTrackingProperties2FB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemFaceTrackingProperties2FB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemFaceTrackingProperties2FB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemFaceTrackingProperties2FB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemFaceTrackingProperties2FB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFaceTrackingProperties2FB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFaceTrackingProperties2FB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsVisualFaceTracking) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFaceTrackingProperties2FB),
            "::",
            stringify!(supportsVisualFaceTracking)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsAudioFaceTracking) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFaceTrackingProperties2FB),
            "::",
            stringify!(supportsAudioFaceTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceTrackerCreateInfo2FB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub faceExpressionSet: XrFaceExpressionSet2FB,
    pub requestedDataSourceCount: u32,
    pub requestedDataSources: *mut XrFaceTrackingDataSource2FB,
}
#[test]
fn bindgen_test_layout_XrFaceTrackerCreateInfo2FB() {
    const UNINIT: ::std::mem::MaybeUninit<XrFaceTrackerCreateInfo2FB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFaceTrackerCreateInfo2FB>(),
        32usize,
        concat!("Size of: ", stringify!(XrFaceTrackerCreateInfo2FB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFaceTrackerCreateInfo2FB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFaceTrackerCreateInfo2FB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceTrackerCreateInfo2FB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceTrackerCreateInfo2FB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faceExpressionSet) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceTrackerCreateInfo2FB),
            "::",
            stringify!(faceExpressionSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestedDataSourceCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceTrackerCreateInfo2FB),
            "::",
            stringify!(requestedDataSourceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestedDataSources) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceTrackerCreateInfo2FB),
            "::",
            stringify!(requestedDataSources)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceExpressionInfo2FB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrFaceExpressionInfo2FB() {
    const UNINIT: ::std::mem::MaybeUninit<XrFaceExpressionInfo2FB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFaceExpressionInfo2FB>(),
        24usize,
        concat!("Size of: ", stringify!(XrFaceExpressionInfo2FB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFaceExpressionInfo2FB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFaceExpressionInfo2FB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionInfo2FB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionInfo2FB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionInfo2FB),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceExpressionWeights2FB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub weightCount: u32,
    pub weights: *mut f32,
    pub confidenceCount: u32,
    pub confidences: *mut f32,
    pub isValid: XrBool32,
    pub isEyeFollowingBlendshapesValid: XrBool32,
    pub dataSource: XrFaceTrackingDataSource2FB,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrFaceExpressionWeights2FB() {
    const UNINIT: ::std::mem::MaybeUninit<XrFaceExpressionWeights2FB> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFaceExpressionWeights2FB>(),
        72usize,
        concat!("Size of: ", stringify!(XrFaceExpressionWeights2FB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFaceExpressionWeights2FB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFaceExpressionWeights2FB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeights2FB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeights2FB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weightCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeights2FB),
            "::",
            stringify!(weightCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weights) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeights2FB),
            "::",
            stringify!(weights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidenceCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeights2FB),
            "::",
            stringify!(confidenceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidences) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeights2FB),
            "::",
            stringify!(confidences)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isValid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeights2FB),
            "::",
            stringify!(isValid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).isEyeFollowingBlendshapesValid) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeights2FB),
            "::",
            stringify!(isEyeFollowingBlendshapesValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSource) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeights2FB),
            "::",
            stringify!(dataSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFaceExpressionWeights2FB),
            "::",
            stringify!(time)
        )
    );
}
pub type PFN_xrCreateFaceTracker2FB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrFaceTrackerCreateInfo2FB,
        faceTracker: *mut XrFaceTracker2FB,
    ) -> XrResult,
>;
pub type PFN_xrDestroyFaceTracker2FB =
    ::std::option::Option<unsafe extern "C" fn(faceTracker: XrFaceTracker2FB) -> XrResult>;
pub type PFN_xrGetFaceExpressionWeights2FB = ::std::option::Option<
    unsafe extern "C" fn(
        faceTracker: XrFaceTracker2FB,
        expressionInfo: *const XrFaceExpressionInfo2FB,
        expressionWeights: *mut XrFaceExpressionWeights2FB,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthProviderMETA_T {
    _unused: [u8; 0],
}
pub type XrEnvironmentDepthProviderMETA = *mut XrEnvironmentDepthProviderMETA_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthSwapchainMETA_T {
    _unused: [u8; 0],
}
pub type XrEnvironmentDepthSwapchainMETA = *mut XrEnvironmentDepthSwapchainMETA_T;
pub type XrEnvironmentDepthProviderCreateFlagsMETA = XrFlags64;
pub type XrEnvironmentDepthSwapchainCreateFlagsMETA = XrFlags64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthProviderCreateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrEnvironmentDepthProviderCreateFlagsMETA,
}
#[test]
fn bindgen_test_layout_XrEnvironmentDepthProviderCreateInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrEnvironmentDepthProviderCreateInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEnvironmentDepthProviderCreateInfoMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrEnvironmentDepthProviderCreateInfoMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEnvironmentDepthProviderCreateInfoMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEnvironmentDepthProviderCreateInfoMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthProviderCreateInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthProviderCreateInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthProviderCreateInfoMETA),
            "::",
            stringify!(createFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthSwapchainCreateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrEnvironmentDepthSwapchainCreateFlagsMETA,
}
#[test]
fn bindgen_test_layout_XrEnvironmentDepthSwapchainCreateInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrEnvironmentDepthSwapchainCreateInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEnvironmentDepthSwapchainCreateInfoMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrEnvironmentDepthSwapchainCreateInfoMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEnvironmentDepthSwapchainCreateInfoMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEnvironmentDepthSwapchainCreateInfoMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthSwapchainCreateInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthSwapchainCreateInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthSwapchainCreateInfoMETA),
            "::",
            stringify!(createFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthSwapchainStateMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub width: u32,
    pub height: u32,
}
#[test]
fn bindgen_test_layout_XrEnvironmentDepthSwapchainStateMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrEnvironmentDepthSwapchainStateMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEnvironmentDepthSwapchainStateMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrEnvironmentDepthSwapchainStateMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEnvironmentDepthSwapchainStateMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEnvironmentDepthSwapchainStateMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthSwapchainStateMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthSwapchainStateMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthSwapchainStateMETA),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthSwapchainStateMETA),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthImageAcquireInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub displayTime: XrTime,
}
#[test]
fn bindgen_test_layout_XrEnvironmentDepthImageAcquireInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrEnvironmentDepthImageAcquireInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEnvironmentDepthImageAcquireInfoMETA>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrEnvironmentDepthImageAcquireInfoMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEnvironmentDepthImageAcquireInfoMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEnvironmentDepthImageAcquireInfoMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageAcquireInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageAcquireInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageAcquireInfoMETA),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayTime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageAcquireInfoMETA),
            "::",
            stringify!(displayTime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthImageViewMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub fov: XrFovf,
    pub pose: XrPosef,
}
#[test]
fn bindgen_test_layout_XrEnvironmentDepthImageViewMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrEnvironmentDepthImageViewMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEnvironmentDepthImageViewMETA>(),
        64usize,
        concat!("Size of: ", stringify!(XrEnvironmentDepthImageViewMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEnvironmentDepthImageViewMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEnvironmentDepthImageViewMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageViewMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageViewMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageViewMETA),
            "::",
            stringify!(fov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageViewMETA),
            "::",
            stringify!(pose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthImageMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub swapchainIndex: u32,
    pub nearZ: f32,
    pub farZ: f32,
    pub views: [XrEnvironmentDepthImageViewMETA; 2usize],
}
#[test]
fn bindgen_test_layout_XrEnvironmentDepthImageMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrEnvironmentDepthImageMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEnvironmentDepthImageMETA>(),
        160usize,
        concat!("Size of: ", stringify!(XrEnvironmentDepthImageMETA))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEnvironmentDepthImageMETA>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEnvironmentDepthImageMETA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchainIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageMETA),
            "::",
            stringify!(swapchainIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nearZ) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageMETA),
            "::",
            stringify!(nearZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).farZ) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageMETA),
            "::",
            stringify!(farZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).views) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthImageMETA),
            "::",
            stringify!(views)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthHandRemovalSetInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub enabled: XrBool32,
}
#[test]
fn bindgen_test_layout_XrEnvironmentDepthHandRemovalSetInfoMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrEnvironmentDepthHandRemovalSetInfoMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEnvironmentDepthHandRemovalSetInfoMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrEnvironmentDepthHandRemovalSetInfoMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEnvironmentDepthHandRemovalSetInfoMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEnvironmentDepthHandRemovalSetInfoMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthHandRemovalSetInfoMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthHandRemovalSetInfoMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEnvironmentDepthHandRemovalSetInfoMETA),
            "::",
            stringify!(enabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemEnvironmentDepthPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsEnvironmentDepth: XrBool32,
    pub supportsHandRemoval: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemEnvironmentDepthPropertiesMETA() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemEnvironmentDepthPropertiesMETA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemEnvironmentDepthPropertiesMETA>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemEnvironmentDepthPropertiesMETA)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemEnvironmentDepthPropertiesMETA>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemEnvironmentDepthPropertiesMETA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEnvironmentDepthPropertiesMETA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEnvironmentDepthPropertiesMETA),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsEnvironmentDepth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEnvironmentDepthPropertiesMETA),
            "::",
            stringify!(supportsEnvironmentDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsHandRemoval) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEnvironmentDepthPropertiesMETA),
            "::",
            stringify!(supportsHandRemoval)
        )
    );
}
pub type PFN_xrCreateEnvironmentDepthProviderMETA = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrEnvironmentDepthProviderCreateInfoMETA,
        environmentDepthProvider: *mut XrEnvironmentDepthProviderMETA,
    ) -> XrResult,
>;
pub type PFN_xrDestroyEnvironmentDepthProviderMETA = ::std::option::Option<
    unsafe extern "C" fn(environmentDepthProvider: XrEnvironmentDepthProviderMETA) -> XrResult,
>;
pub type PFN_xrStartEnvironmentDepthProviderMETA = ::std::option::Option<
    unsafe extern "C" fn(environmentDepthProvider: XrEnvironmentDepthProviderMETA) -> XrResult,
>;
pub type PFN_xrStopEnvironmentDepthProviderMETA = ::std::option::Option<
    unsafe extern "C" fn(environmentDepthProvider: XrEnvironmentDepthProviderMETA) -> XrResult,
>;
pub type PFN_xrCreateEnvironmentDepthSwapchainMETA = ::std::option::Option<
    unsafe extern "C" fn(
        environmentDepthProvider: XrEnvironmentDepthProviderMETA,
        createInfo: *const XrEnvironmentDepthSwapchainCreateInfoMETA,
        swapchain: *mut XrEnvironmentDepthSwapchainMETA,
    ) -> XrResult,
>;
pub type PFN_xrDestroyEnvironmentDepthSwapchainMETA = ::std::option::Option<
    unsafe extern "C" fn(swapchain: XrEnvironmentDepthSwapchainMETA) -> XrResult,
>;
pub type PFN_xrEnumerateEnvironmentDepthSwapchainImagesMETA = ::std::option::Option<
    unsafe extern "C" fn(
        swapchain: XrEnvironmentDepthSwapchainMETA,
        imageCapacityInput: u32,
        imageCountOutput: *mut u32,
        images: *mut XrSwapchainImageBaseHeader,
    ) -> XrResult,
>;
pub type PFN_xrGetEnvironmentDepthSwapchainStateMETA = ::std::option::Option<
    unsafe extern "C" fn(
        swapchain: XrEnvironmentDepthSwapchainMETA,
        state: *mut XrEnvironmentDepthSwapchainStateMETA,
    ) -> XrResult,
>;
pub type PFN_xrAcquireEnvironmentDepthImageMETA = ::std::option::Option<
    unsafe extern "C" fn(
        environmentDepthProvider: XrEnvironmentDepthProviderMETA,
        acquireInfo: *const XrEnvironmentDepthImageAcquireInfoMETA,
        environmentDepthImage: *mut XrEnvironmentDepthImageMETA,
    ) -> XrResult,
>;
pub type PFN_xrSetEnvironmentDepthHandRemovalMETA = ::std::option::Option<
    unsafe extern "C" fn(
        environmentDepthProvider: XrEnvironmentDepthProviderMETA,
        setInfo: *const XrEnvironmentDepthHandRemovalSetInfoMETA,
    ) -> XrResult,
>;
pub const XrTrackingOptimizationSettingsDomainQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_DOMAIN_ALL_QCOM : XrTrackingOptimizationSettingsDomainQCOM = 1 ;
pub const XrTrackingOptimizationSettingsDomainQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_DOMAIN_MAX_ENUM_QCOM : XrTrackingOptimizationSettingsDomainQCOM = 2147483647 ;
pub type XrTrackingOptimizationSettingsDomainQCOM = ::std::os::raw::c_int;
pub const XrTrackingOptimizationSettingsHintQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_NONE_QCOM : XrTrackingOptimizationSettingsHintQCOM = 0 ;
pub const XrTrackingOptimizationSettingsHintQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_LONG_RANGE_PRIORIZATION_QCOM : XrTrackingOptimizationSettingsHintQCOM = 1 ;
pub const XrTrackingOptimizationSettingsHintQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_CLOSE_RANGE_PRIORIZATION_QCOM : XrTrackingOptimizationSettingsHintQCOM = 2 ;
pub const XrTrackingOptimizationSettingsHintQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_LOW_POWER_PRIORIZATION_QCOM : XrTrackingOptimizationSettingsHintQCOM = 3 ;
pub const XrTrackingOptimizationSettingsHintQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_HIGH_POWER_PRIORIZATION_QCOM : XrTrackingOptimizationSettingsHintQCOM = 4 ;
pub const XrTrackingOptimizationSettingsHintQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_MAX_ENUM_QCOM : XrTrackingOptimizationSettingsHintQCOM = 2147483647 ;
pub type XrTrackingOptimizationSettingsHintQCOM = ::std::os::raw::c_int;
pub type PFN_xrSetTrackingOptimizationSettingsHintQCOM = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        domain: XrTrackingOptimizationSettingsDomainQCOM,
        hint: XrTrackingOptimizationSettingsHintQCOM,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughHTC_T {
    _unused: [u8; 0],
}
pub type XrPassthroughHTC = *mut XrPassthroughHTC_T;
pub const XrPassthroughFormHTC_XR_PASSTHROUGH_FORM_PLANAR_HTC: XrPassthroughFormHTC = 0;
pub const XrPassthroughFormHTC_XR_PASSTHROUGH_FORM_PROJECTED_HTC: XrPassthroughFormHTC = 1;
pub const XrPassthroughFormHTC_XR_PASSTHROUGH_FORM_MAX_ENUM_HTC: XrPassthroughFormHTC = 2147483647;
pub type XrPassthroughFormHTC = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughCreateInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub form: XrPassthroughFormHTC,
}
#[test]
fn bindgen_test_layout_XrPassthroughCreateInfoHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughCreateInfoHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughCreateInfoHTC>(),
        24usize,
        concat!("Size of: ", stringify!(XrPassthroughCreateInfoHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughCreateInfoHTC>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPassthroughCreateInfoHTC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughCreateInfoHTC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughCreateInfoHTC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).form) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughCreateInfoHTC),
            "::",
            stringify!(form)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub alpha: f32,
}
#[test]
fn bindgen_test_layout_XrPassthroughColorHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughColorHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughColorHTC>(),
        24usize,
        concat!("Size of: ", stringify!(XrPassthroughColorHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughColorHTC>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPassthroughColorHTC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorHTC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorHTC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughColorHTC),
            "::",
            stringify!(alpha)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughMeshTransformInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub vertexCount: u32,
    pub vertices: *const XrVector3f,
    pub indexCount: u32,
    pub indices: *const u32,
    pub baseSpace: XrSpace,
    pub time: XrTime,
    pub pose: XrPosef,
    pub scale: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrPassthroughMeshTransformInfoHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrPassthroughMeshTransformInfoHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPassthroughMeshTransformInfoHTC>(),
        104usize,
        concat!("Size of: ", stringify!(XrPassthroughMeshTransformInfoHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPassthroughMeshTransformInfoHTC>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrPassthroughMeshTransformInfoHTC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughMeshTransformInfoHTC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughMeshTransformInfoHTC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughMeshTransformInfoHTC),
            "::",
            stringify!(vertexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughMeshTransformInfoHTC),
            "::",
            stringify!(vertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughMeshTransformInfoHTC),
            "::",
            stringify!(indexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indices) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughMeshTransformInfoHTC),
            "::",
            stringify!(indices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseSpace) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughMeshTransformInfoHTC),
            "::",
            stringify!(baseSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughMeshTransformInfoHTC),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughMeshTransformInfoHTC),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPassthroughMeshTransformInfoHTC),
            "::",
            stringify!(scale)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerPassthroughHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub passthrough: XrPassthroughHTC,
    pub color: XrPassthroughColorHTC,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerPassthroughHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrCompositionLayerPassthroughHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerPassthroughHTC>(),
        64usize,
        concat!("Size of: ", stringify!(XrCompositionLayerPassthroughHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerPassthroughHTC>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrCompositionLayerPassthroughHTC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerPassthroughHTC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerPassthroughHTC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerPassthroughHTC),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerPassthroughHTC),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passthrough) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerPassthroughHTC),
            "::",
            stringify!(passthrough)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerPassthroughHTC),
            "::",
            stringify!(color)
        )
    );
}
pub type PFN_xrCreatePassthroughHTC = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrPassthroughCreateInfoHTC,
        passthrough: *mut XrPassthroughHTC,
    ) -> XrResult,
>;
pub type PFN_xrDestroyPassthroughHTC =
    ::std::option::Option<unsafe extern "C" fn(passthrough: XrPassthroughHTC) -> XrResult>;
pub const XrFoveationModeHTC_XR_FOVEATION_MODE_DISABLE_HTC: XrFoveationModeHTC = 0;
pub const XrFoveationModeHTC_XR_FOVEATION_MODE_FIXED_HTC: XrFoveationModeHTC = 1;
pub const XrFoveationModeHTC_XR_FOVEATION_MODE_DYNAMIC_HTC: XrFoveationModeHTC = 2;
pub const XrFoveationModeHTC_XR_FOVEATION_MODE_CUSTOM_HTC: XrFoveationModeHTC = 3;
pub const XrFoveationModeHTC_XR_FOVEATION_MODE_MAX_ENUM_HTC: XrFoveationModeHTC = 2147483647;
pub type XrFoveationModeHTC = ::std::os::raw::c_int;
pub const XrFoveationLevelHTC_XR_FOVEATION_LEVEL_NONE_HTC: XrFoveationLevelHTC = 0;
pub const XrFoveationLevelHTC_XR_FOVEATION_LEVEL_LOW_HTC: XrFoveationLevelHTC = 1;
pub const XrFoveationLevelHTC_XR_FOVEATION_LEVEL_MEDIUM_HTC: XrFoveationLevelHTC = 2;
pub const XrFoveationLevelHTC_XR_FOVEATION_LEVEL_HIGH_HTC: XrFoveationLevelHTC = 3;
pub const XrFoveationLevelHTC_XR_FOVEATION_LEVEL_MAX_ENUM_HTC: XrFoveationLevelHTC = 2147483647;
pub type XrFoveationLevelHTC = ::std::os::raw::c_int;
pub type XrFoveationDynamicFlagsHTC = XrFlags64;
pub const XR_FOVEATION_DYNAMIC_LEVEL_ENABLED_BIT_HTC: XrFoveationDynamicFlagsHTC = 1;
pub const XR_FOVEATION_DYNAMIC_CLEAR_FOV_ENABLED_BIT_HTC: XrFoveationDynamicFlagsHTC = 2;
pub const XR_FOVEATION_DYNAMIC_FOCAL_CENTER_OFFSET_ENABLED_BIT_HTC: XrFoveationDynamicFlagsHTC = 4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationApplyInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub mode: XrFoveationModeHTC,
    pub subImageCount: u32,
    pub subImages: *mut XrSwapchainSubImage,
}
#[test]
fn bindgen_test_layout_XrFoveationApplyInfoHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrFoveationApplyInfoHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFoveationApplyInfoHTC>(),
        32usize,
        concat!("Size of: ", stringify!(XrFoveationApplyInfoHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFoveationApplyInfoHTC>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFoveationApplyInfoHTC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationApplyInfoHTC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationApplyInfoHTC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationApplyInfoHTC),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subImageCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationApplyInfoHTC),
            "::",
            stringify!(subImageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subImages) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationApplyInfoHTC),
            "::",
            stringify!(subImages)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationConfigurationHTC {
    pub level: XrFoveationLevelHTC,
    pub clearFovDegree: f32,
    pub focalCenterOffset: XrVector2f,
}
#[test]
fn bindgen_test_layout_XrFoveationConfigurationHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrFoveationConfigurationHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFoveationConfigurationHTC>(),
        16usize,
        concat!("Size of: ", stringify!(XrFoveationConfigurationHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFoveationConfigurationHTC>(),
        4usize,
        concat!("Alignment of ", stringify!(XrFoveationConfigurationHTC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationConfigurationHTC),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clearFovDegree) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationConfigurationHTC),
            "::",
            stringify!(clearFovDegree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).focalCenterOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationConfigurationHTC),
            "::",
            stringify!(focalCenterOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationDynamicModeInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub dynamicFlags: XrFoveationDynamicFlagsHTC,
}
#[test]
fn bindgen_test_layout_XrFoveationDynamicModeInfoHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrFoveationDynamicModeInfoHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFoveationDynamicModeInfoHTC>(),
        24usize,
        concat!("Size of: ", stringify!(XrFoveationDynamicModeInfoHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFoveationDynamicModeInfoHTC>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFoveationDynamicModeInfoHTC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationDynamicModeInfoHTC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationDynamicModeInfoHTC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationDynamicModeInfoHTC),
            "::",
            stringify!(dynamicFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationCustomModeInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub configCount: u32,
    pub configs: *const XrFoveationConfigurationHTC,
}
#[test]
fn bindgen_test_layout_XrFoveationCustomModeInfoHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrFoveationCustomModeInfoHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFoveationCustomModeInfoHTC>(),
        32usize,
        concat!("Size of: ", stringify!(XrFoveationCustomModeInfoHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFoveationCustomModeInfoHTC>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFoveationCustomModeInfoHTC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationCustomModeInfoHTC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationCustomModeInfoHTC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationCustomModeInfoHTC),
            "::",
            stringify!(configCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveationCustomModeInfoHTC),
            "::",
            stringify!(configs)
        )
    );
}
pub type PFN_xrApplyFoveationHTC = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, applyInfo: *const XrFoveationApplyInfoHTC) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemAnchorPropertiesHTC {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsAnchor: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemAnchorPropertiesHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemAnchorPropertiesHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemAnchorPropertiesHTC>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemAnchorPropertiesHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemAnchorPropertiesHTC>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSystemAnchorPropertiesHTC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemAnchorPropertiesHTC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemAnchorPropertiesHTC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsAnchor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemAnchorPropertiesHTC),
            "::",
            stringify!(supportsAnchor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorNameHTC {
    pub name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_XrSpatialAnchorNameHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpatialAnchorNameHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpatialAnchorNameHTC>(),
        256usize,
        concat!("Size of: ", stringify!(XrSpatialAnchorNameHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialAnchorNameHTC>(),
        1usize,
        concat!("Alignment of ", stringify!(XrSpatialAnchorNameHTC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorNameHTC),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorCreateInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub poseInSpace: XrPosef,
    pub name: XrSpatialAnchorNameHTC,
}
#[test]
fn bindgen_test_layout_XrSpatialAnchorCreateInfoHTC() {
    const UNINIT: ::std::mem::MaybeUninit<XrSpatialAnchorCreateInfoHTC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSpatialAnchorCreateInfoHTC>(),
        312usize,
        concat!("Size of: ", stringify!(XrSpatialAnchorCreateInfoHTC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialAnchorCreateInfoHTC>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpatialAnchorCreateInfoHTC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoHTC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoHTC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoHTC),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poseInSpace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoHTC),
            "::",
            stringify!(poseInSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoHTC),
            "::",
            stringify!(name)
        )
    );
}
pub type PFN_xrCreateSpatialAnchorHTC = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrSpatialAnchorCreateInfoHTC,
        anchor: *mut XrSpace,
    ) -> XrResult,
>;
pub type PFN_xrGetSpatialAnchorNameHTC = ::std::option::Option<
    unsafe extern "C" fn(anchor: XrSpace, name: *mut XrSpatialAnchorNameHTC) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActiveActionSetPriorityEXT {
    pub actionSet: XrActionSet,
    pub priorityOverride: u32,
}
#[test]
fn bindgen_test_layout_XrActiveActionSetPriorityEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrActiveActionSetPriorityEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActiveActionSetPriorityEXT>(),
        16usize,
        concat!("Size of: ", stringify!(XrActiveActionSetPriorityEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActiveActionSetPriorityEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActiveActionSetPriorityEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionSet) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActiveActionSetPriorityEXT),
            "::",
            stringify!(actionSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priorityOverride) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActiveActionSetPriorityEXT),
            "::",
            stringify!(priorityOverride)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActiveActionSetPrioritiesEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub actionSetPriorityCount: u32,
    pub actionSetPriorities: *const XrActiveActionSetPriorityEXT,
}
#[test]
fn bindgen_test_layout_XrActiveActionSetPrioritiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrActiveActionSetPrioritiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrActiveActionSetPrioritiesEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrActiveActionSetPrioritiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActiveActionSetPrioritiesEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActiveActionSetPrioritiesEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActiveActionSetPrioritiesEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActiveActionSetPrioritiesEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionSetPriorityCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActiveActionSetPrioritiesEXT),
            "::",
            stringify!(actionSetPriorityCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionSetPriorities) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActiveActionSetPrioritiesEXT),
            "::",
            stringify!(actionSetPriorities)
        )
    );
}
pub const XrForceFeedbackCurlLocationMNDX_XR_FORCE_FEEDBACK_CURL_LOCATION_THUMB_CURL_MNDX:
    XrForceFeedbackCurlLocationMNDX = 0;
pub const XrForceFeedbackCurlLocationMNDX_XR_FORCE_FEEDBACK_CURL_LOCATION_INDEX_CURL_MNDX:
    XrForceFeedbackCurlLocationMNDX = 1;
pub const XrForceFeedbackCurlLocationMNDX_XR_FORCE_FEEDBACK_CURL_LOCATION_MIDDLE_CURL_MNDX:
    XrForceFeedbackCurlLocationMNDX = 2;
pub const XrForceFeedbackCurlLocationMNDX_XR_FORCE_FEEDBACK_CURL_LOCATION_RING_CURL_MNDX:
    XrForceFeedbackCurlLocationMNDX = 3;
pub const XrForceFeedbackCurlLocationMNDX_XR_FORCE_FEEDBACK_CURL_LOCATION_LITTLE_CURL_MNDX:
    XrForceFeedbackCurlLocationMNDX = 4;
pub const XrForceFeedbackCurlLocationMNDX_XR_FORCE_FEEDBACK_CURL_LOCATION_MAX_ENUM_MNDX:
    XrForceFeedbackCurlLocationMNDX = 2147483647;
pub type XrForceFeedbackCurlLocationMNDX = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemForceFeedbackCurlPropertiesMNDX {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsForceFeedbackCurl: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemForceFeedbackCurlPropertiesMNDX() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemForceFeedbackCurlPropertiesMNDX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemForceFeedbackCurlPropertiesMNDX>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemForceFeedbackCurlPropertiesMNDX)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemForceFeedbackCurlPropertiesMNDX>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemForceFeedbackCurlPropertiesMNDX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemForceFeedbackCurlPropertiesMNDX),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemForceFeedbackCurlPropertiesMNDX),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsForceFeedbackCurl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemForceFeedbackCurlPropertiesMNDX),
            "::",
            stringify!(supportsForceFeedbackCurl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrForceFeedbackCurlApplyLocationMNDX {
    pub location: XrForceFeedbackCurlLocationMNDX,
    pub value: f32,
}
#[test]
fn bindgen_test_layout_XrForceFeedbackCurlApplyLocationMNDX() {
    const UNINIT: ::std::mem::MaybeUninit<XrForceFeedbackCurlApplyLocationMNDX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrForceFeedbackCurlApplyLocationMNDX>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(XrForceFeedbackCurlApplyLocationMNDX)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrForceFeedbackCurlApplyLocationMNDX>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(XrForceFeedbackCurlApplyLocationMNDX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrForceFeedbackCurlApplyLocationMNDX),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrForceFeedbackCurlApplyLocationMNDX),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrForceFeedbackCurlApplyLocationsMNDX {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub locationCount: u32,
    pub locations: *mut XrForceFeedbackCurlApplyLocationMNDX,
}
#[test]
fn bindgen_test_layout_XrForceFeedbackCurlApplyLocationsMNDX() {
    const UNINIT: ::std::mem::MaybeUninit<XrForceFeedbackCurlApplyLocationsMNDX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrForceFeedbackCurlApplyLocationsMNDX>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrForceFeedbackCurlApplyLocationsMNDX)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrForceFeedbackCurlApplyLocationsMNDX>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrForceFeedbackCurlApplyLocationsMNDX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrForceFeedbackCurlApplyLocationsMNDX),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrForceFeedbackCurlApplyLocationsMNDX),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locationCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrForceFeedbackCurlApplyLocationsMNDX),
            "::",
            stringify!(locationCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locations) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrForceFeedbackCurlApplyLocationsMNDX),
            "::",
            stringify!(locations)
        )
    );
}
pub type PFN_xrApplyForceFeedbackCurlMNDX = ::std::option::Option<
    unsafe extern "C" fn(
        handTracker: XrHandTrackerEXT,
        locations: *const XrForceFeedbackCurlApplyLocationsMNDX,
    ) -> XrResult,
>;
pub const XrHandTrackingDataSourceEXT_XR_HAND_TRACKING_DATA_SOURCE_UNOBSTRUCTED_EXT:
    XrHandTrackingDataSourceEXT = 1;
pub const XrHandTrackingDataSourceEXT_XR_HAND_TRACKING_DATA_SOURCE_CONTROLLER_EXT:
    XrHandTrackingDataSourceEXT = 2;
pub const XrHandTrackingDataSourceEXT_XR_HAND_TRACKING_DATA_SOURCE_MAX_ENUM_EXT:
    XrHandTrackingDataSourceEXT = 2147483647;
pub type XrHandTrackingDataSourceEXT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackingDataSourceInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestedDataSourceCount: u32,
    pub requestedDataSources: *mut XrHandTrackingDataSourceEXT,
}
#[test]
fn bindgen_test_layout_XrHandTrackingDataSourceInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandTrackingDataSourceInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandTrackingDataSourceInfoEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandTrackingDataSourceInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandTrackingDataSourceInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandTrackingDataSourceInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingDataSourceInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingDataSourceInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestedDataSourceCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingDataSourceInfoEXT),
            "::",
            stringify!(requestedDataSourceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestedDataSources) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingDataSourceInfoEXT),
            "::",
            stringify!(requestedDataSources)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackingDataSourceStateEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
    pub dataSource: XrHandTrackingDataSourceEXT,
}
#[test]
fn bindgen_test_layout_XrHandTrackingDataSourceStateEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrHandTrackingDataSourceStateEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrHandTrackingDataSourceStateEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandTrackingDataSourceStateEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandTrackingDataSourceStateEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrHandTrackingDataSourceStateEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingDataSourceStateEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingDataSourceStateEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isActive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingDataSourceStateEXT),
            "::",
            stringify!(isActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSource) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackingDataSourceStateEXT),
            "::",
            stringify!(dataSource)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorEXT_T {
    _unused: [u8; 0],
}
pub type XrPlaneDetectorEXT = *mut XrPlaneDetectorEXT_T;
pub const XrPlaneDetectorOrientationEXT_XR_PLANE_DETECTOR_ORIENTATION_HORIZONTAL_UPWARD_EXT:
    XrPlaneDetectorOrientationEXT = 0;
pub const XrPlaneDetectorOrientationEXT_XR_PLANE_DETECTOR_ORIENTATION_HORIZONTAL_DOWNWARD_EXT:
    XrPlaneDetectorOrientationEXT = 1;
pub const XrPlaneDetectorOrientationEXT_XR_PLANE_DETECTOR_ORIENTATION_VERTICAL_EXT:
    XrPlaneDetectorOrientationEXT = 2;
pub const XrPlaneDetectorOrientationEXT_XR_PLANE_DETECTOR_ORIENTATION_ARBITRARY_EXT:
    XrPlaneDetectorOrientationEXT = 3;
pub const XrPlaneDetectorOrientationEXT_XR_PLANE_DETECTOR_ORIENTATION_MAX_ENUM_EXT:
    XrPlaneDetectorOrientationEXT = 2147483647;
pub type XrPlaneDetectorOrientationEXT = ::std::os::raw::c_int;
pub const XrPlaneDetectorSemanticTypeEXT_XR_PLANE_DETECTOR_SEMANTIC_TYPE_UNDEFINED_EXT:
    XrPlaneDetectorSemanticTypeEXT = 0;
pub const XrPlaneDetectorSemanticTypeEXT_XR_PLANE_DETECTOR_SEMANTIC_TYPE_CEILING_EXT:
    XrPlaneDetectorSemanticTypeEXT = 1;
pub const XrPlaneDetectorSemanticTypeEXT_XR_PLANE_DETECTOR_SEMANTIC_TYPE_FLOOR_EXT:
    XrPlaneDetectorSemanticTypeEXT = 2;
pub const XrPlaneDetectorSemanticTypeEXT_XR_PLANE_DETECTOR_SEMANTIC_TYPE_WALL_EXT:
    XrPlaneDetectorSemanticTypeEXT = 3;
pub const XrPlaneDetectorSemanticTypeEXT_XR_PLANE_DETECTOR_SEMANTIC_TYPE_PLATFORM_EXT:
    XrPlaneDetectorSemanticTypeEXT = 4;
pub const XrPlaneDetectorSemanticTypeEXT_XR_PLANE_DETECTOR_SEMANTIC_TYPE_MAX_ENUM_EXT:
    XrPlaneDetectorSemanticTypeEXT = 2147483647;
pub type XrPlaneDetectorSemanticTypeEXT = ::std::os::raw::c_int;
pub const XrPlaneDetectionStateEXT_XR_PLANE_DETECTION_STATE_NONE_EXT: XrPlaneDetectionStateEXT = 0;
pub const XrPlaneDetectionStateEXT_XR_PLANE_DETECTION_STATE_PENDING_EXT: XrPlaneDetectionStateEXT =
    1;
pub const XrPlaneDetectionStateEXT_XR_PLANE_DETECTION_STATE_DONE_EXT: XrPlaneDetectionStateEXT = 2;
pub const XrPlaneDetectionStateEXT_XR_PLANE_DETECTION_STATE_ERROR_EXT: XrPlaneDetectionStateEXT = 3;
pub const XrPlaneDetectionStateEXT_XR_PLANE_DETECTION_STATE_FATAL_EXT: XrPlaneDetectionStateEXT = 4;
pub const XrPlaneDetectionStateEXT_XR_PLANE_DETECTION_STATE_MAX_ENUM_EXT: XrPlaneDetectionStateEXT =
    2147483647;
pub type XrPlaneDetectionStateEXT = ::std::os::raw::c_int;
pub type XrPlaneDetectionCapabilityFlagsEXT = XrFlags64;
pub const XR_PLANE_DETECTION_CAPABILITY_PLANE_DETECTION_BIT_EXT:
    XrPlaneDetectionCapabilityFlagsEXT = 1;
pub const XR_PLANE_DETECTION_CAPABILITY_PLANE_HOLES_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT = 2;
pub const XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_CEILING_BIT_EXT:
    XrPlaneDetectionCapabilityFlagsEXT = 4;
pub const XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_FLOOR_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT =
    8;
pub const XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_WALL_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT =
    16;
pub const XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_PLATFORM_BIT_EXT:
    XrPlaneDetectionCapabilityFlagsEXT = 32;
pub const XR_PLANE_DETECTION_CAPABILITY_ORIENTATION_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT =
    64;
pub type XrPlaneDetectorFlagsEXT = XrFlags64;
pub const XR_PLANE_DETECTOR_ENABLE_CONTOUR_BIT_EXT: XrPlaneDetectorFlagsEXT = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemPlaneDetectionPropertiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportedFeatures: XrPlaneDetectionCapabilityFlagsEXT,
}
#[test]
fn bindgen_test_layout_XrSystemPlaneDetectionPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemPlaneDetectionPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemPlaneDetectionPropertiesEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemPlaneDetectionPropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemPlaneDetectionPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemPlaneDetectionPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemPlaneDetectionPropertiesEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemPlaneDetectionPropertiesEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedFeatures) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemPlaneDetectionPropertiesEXT),
            "::",
            stringify!(supportedFeatures)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorCreateInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrPlaneDetectorFlagsEXT,
}
#[test]
fn bindgen_test_layout_XrPlaneDetectorCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrPlaneDetectorCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPlaneDetectorCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrPlaneDetectorCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPlaneDetectorCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPlaneDetectorCreateInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorCreateInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorCreateInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
}
pub type XrExtent3DfEXT = XrExtent3Df;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorBeginInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
    pub orientationCount: u32,
    pub orientations: *const XrPlaneDetectorOrientationEXT,
    pub semanticTypeCount: u32,
    pub semanticTypes: *const XrPlaneDetectorSemanticTypeEXT,
    pub maxPlanes: u32,
    pub minArea: f32,
    pub boundingBoxPose: XrPosef,
    pub boundingBoxExtent: XrExtent3DfEXT,
}
#[test]
fn bindgen_test_layout_XrPlaneDetectorBeginInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrPlaneDetectorBeginInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPlaneDetectorBeginInfoEXT>(),
        112usize,
        concat!("Size of: ", stringify!(XrPlaneDetectorBeginInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPlaneDetectorBeginInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPlaneDetectorBeginInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorBeginInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorBeginInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseSpace) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorBeginInfoEXT),
            "::",
            stringify!(baseSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorBeginInfoEXT),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientationCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorBeginInfoEXT),
            "::",
            stringify!(orientationCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientations) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorBeginInfoEXT),
            "::",
            stringify!(orientations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semanticTypeCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorBeginInfoEXT),
            "::",
            stringify!(semanticTypeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semanticTypes) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorBeginInfoEXT),
            "::",
            stringify!(semanticTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPlanes) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorBeginInfoEXT),
            "::",
            stringify!(maxPlanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minArea) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorBeginInfoEXT),
            "::",
            stringify!(minArea)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boundingBoxPose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorBeginInfoEXT),
            "::",
            stringify!(boundingBoxPose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boundingBoxExtent) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorBeginInfoEXT),
            "::",
            stringify!(boundingBoxExtent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorGetInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrPlaneDetectorGetInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrPlaneDetectorGetInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPlaneDetectorGetInfoEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrPlaneDetectorGetInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPlaneDetectorGetInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPlaneDetectorGetInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorGetInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorGetInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseSpace) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorGetInfoEXT),
            "::",
            stringify!(baseSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorGetInfoEXT),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorLocationEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub planeId: u64,
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
    pub extents: XrExtent2Df,
    pub orientation: XrPlaneDetectorOrientationEXT,
    pub semanticType: XrPlaneDetectorSemanticTypeEXT,
    pub polygonBufferCount: u32,
}
#[test]
fn bindgen_test_layout_XrPlaneDetectorLocationEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrPlaneDetectorLocationEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPlaneDetectorLocationEXT>(),
        80usize,
        concat!("Size of: ", stringify!(XrPlaneDetectorLocationEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPlaneDetectorLocationEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPlaneDetectorLocationEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationEXT),
            "::",
            stringify!(planeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locationFlags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationEXT),
            "::",
            stringify!(locationFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationEXT),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extents) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationEXT),
            "::",
            stringify!(extents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationEXT),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semanticType) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationEXT),
            "::",
            stringify!(semanticType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).polygonBufferCount) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationEXT),
            "::",
            stringify!(polygonBufferCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorLocationsEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub planeLocationCapacityInput: u32,
    pub planeLocationCountOutput: u32,
    pub planeLocations: *mut XrPlaneDetectorLocationEXT,
}
#[test]
fn bindgen_test_layout_XrPlaneDetectorLocationsEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrPlaneDetectorLocationsEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPlaneDetectorLocationsEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrPlaneDetectorLocationsEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPlaneDetectorLocationsEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPlaneDetectorLocationsEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationsEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationsEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeLocationCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationsEXT),
            "::",
            stringify!(planeLocationCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeLocationCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationsEXT),
            "::",
            stringify!(planeLocationCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeLocations) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorLocationsEXT),
            "::",
            stringify!(planeLocations)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorPolygonBufferEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrVector2f,
}
#[test]
fn bindgen_test_layout_XrPlaneDetectorPolygonBufferEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrPlaneDetectorPolygonBufferEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrPlaneDetectorPolygonBufferEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrPlaneDetectorPolygonBufferEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPlaneDetectorPolygonBufferEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrPlaneDetectorPolygonBufferEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorPolygonBufferEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorPolygonBufferEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCapacityInput) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorPolygonBufferEXT),
            "::",
            stringify!(vertexCapacityInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCountOutput) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorPolygonBufferEXT),
            "::",
            stringify!(vertexCountOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPlaneDetectorPolygonBufferEXT),
            "::",
            stringify!(vertices)
        )
    );
}
pub type PFN_xrCreatePlaneDetectorEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrPlaneDetectorCreateInfoEXT,
        planeDetector: *mut XrPlaneDetectorEXT,
    ) -> XrResult,
>;
pub type PFN_xrDestroyPlaneDetectorEXT =
    ::std::option::Option<unsafe extern "C" fn(planeDetector: XrPlaneDetectorEXT) -> XrResult>;
pub type PFN_xrBeginPlaneDetectionEXT = ::std::option::Option<
    unsafe extern "C" fn(
        planeDetector: XrPlaneDetectorEXT,
        beginInfo: *const XrPlaneDetectorBeginInfoEXT,
    ) -> XrResult,
>;
pub type PFN_xrGetPlaneDetectionStateEXT = ::std::option::Option<
    unsafe extern "C" fn(
        planeDetector: XrPlaneDetectorEXT,
        state: *mut XrPlaneDetectionStateEXT,
    ) -> XrResult,
>;
pub type PFN_xrGetPlaneDetectionsEXT = ::std::option::Option<
    unsafe extern "C" fn(
        planeDetector: XrPlaneDetectorEXT,
        info: *const XrPlaneDetectorGetInfoEXT,
        locations: *mut XrPlaneDetectorLocationsEXT,
    ) -> XrResult,
>;
pub type PFN_xrGetPlanePolygonBufferEXT = ::std::option::Option<
    unsafe extern "C" fn(
        planeDetector: XrPlaneDetectorEXT,
        planeId: u64,
        polygonBufferIndex: u32,
        polygonBuffer: *mut XrPlaneDetectorPolygonBufferEXT,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFutureEXT_T {
    _unused: [u8; 0],
}
pub type XrFutureEXT = *mut XrFutureEXT_T;
pub const XrFutureStateEXT_XR_FUTURE_STATE_PENDING_EXT: XrFutureStateEXT = 1;
pub const XrFutureStateEXT_XR_FUTURE_STATE_READY_EXT: XrFutureStateEXT = 2;
pub const XrFutureStateEXT_XR_FUTURE_STATE_MAX_ENUM_EXT: XrFutureStateEXT = 2147483647;
pub type XrFutureStateEXT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFutureCancelInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub future: XrFutureEXT,
}
#[test]
fn bindgen_test_layout_XrFutureCancelInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrFutureCancelInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFutureCancelInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrFutureCancelInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFutureCancelInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFutureCancelInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFutureCancelInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFutureCancelInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).future) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFutureCancelInfoEXT),
            "::",
            stringify!(future)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFuturePollInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub future: XrFutureEXT,
}
#[test]
fn bindgen_test_layout_XrFuturePollInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrFuturePollInfoEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFuturePollInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrFuturePollInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFuturePollInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFuturePollInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFuturePollInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFuturePollInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).future) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFuturePollInfoEXT),
            "::",
            stringify!(future)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFutureCompletionBaseHeaderEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub futureResult: XrResult,
}
#[test]
fn bindgen_test_layout_XrFutureCompletionBaseHeaderEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrFutureCompletionBaseHeaderEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFutureCompletionBaseHeaderEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrFutureCompletionBaseHeaderEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFutureCompletionBaseHeaderEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFutureCompletionBaseHeaderEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFutureCompletionBaseHeaderEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFutureCompletionBaseHeaderEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).futureResult) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFutureCompletionBaseHeaderEXT),
            "::",
            stringify!(futureResult)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFutureCompletionEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub futureResult: XrResult,
}
#[test]
fn bindgen_test_layout_XrFutureCompletionEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrFutureCompletionEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFutureCompletionEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrFutureCompletionEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFutureCompletionEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFutureCompletionEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFutureCompletionEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFutureCompletionEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).futureResult) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFutureCompletionEXT),
            "::",
            stringify!(futureResult)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFuturePollResultEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub state: XrFutureStateEXT,
}
#[test]
fn bindgen_test_layout_XrFuturePollResultEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrFuturePollResultEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrFuturePollResultEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrFuturePollResultEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFuturePollResultEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFuturePollResultEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFuturePollResultEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFuturePollResultEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFuturePollResultEXT),
            "::",
            stringify!(state)
        )
    );
}
pub type PFN_xrPollFutureEXT = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        pollInfo: *const XrFuturePollInfoEXT,
        pollResult: *mut XrFuturePollResultEXT,
    ) -> XrResult,
>;
pub type PFN_xrCancelFutureEXT = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        cancelInfo: *const XrFutureCancelInfoEXT,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataUserPresenceChangedEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub isUserPresent: XrBool32,
}
#[test]
fn bindgen_test_layout_XrEventDataUserPresenceChangedEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataUserPresenceChangedEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataUserPresenceChangedEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrEventDataUserPresenceChangedEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataUserPresenceChangedEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataUserPresenceChangedEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataUserPresenceChangedEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataUserPresenceChangedEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataUserPresenceChangedEXT),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isUserPresent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataUserPresenceChangedEXT),
            "::",
            stringify!(isUserPresent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemUserPresencePropertiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsUserPresence: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemUserPresencePropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<XrSystemUserPresencePropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrSystemUserPresencePropertiesEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemUserPresencePropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemUserPresencePropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemUserPresencePropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemUserPresencePropertiesEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemUserPresencePropertiesEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsUserPresence) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemUserPresencePropertiesEXT),
            "::",
            stringify!(supportsUserPresence)
        )
    );
}
pub const XrHeadsetFitStatusML_XR_HEADSET_FIT_STATUS_UNKNOWN_ML: XrHeadsetFitStatusML = 0;
pub const XrHeadsetFitStatusML_XR_HEADSET_FIT_STATUS_NOT_WORN_ML: XrHeadsetFitStatusML = 1;
pub const XrHeadsetFitStatusML_XR_HEADSET_FIT_STATUS_GOOD_FIT_ML: XrHeadsetFitStatusML = 2;
pub const XrHeadsetFitStatusML_XR_HEADSET_FIT_STATUS_BAD_FIT_ML: XrHeadsetFitStatusML = 3;
pub const XrHeadsetFitStatusML_XR_HEADSET_FIT_STATUS_MAX_ENUM_ML: XrHeadsetFitStatusML = 2147483647;
pub type XrHeadsetFitStatusML = ::std::os::raw::c_int;
pub const XrEyeCalibrationStatusML_XR_EYE_CALIBRATION_STATUS_UNKNOWN_ML: XrEyeCalibrationStatusML =
    0;
pub const XrEyeCalibrationStatusML_XR_EYE_CALIBRATION_STATUS_NONE_ML: XrEyeCalibrationStatusML = 1;
pub const XrEyeCalibrationStatusML_XR_EYE_CALIBRATION_STATUS_COARSE_ML: XrEyeCalibrationStatusML =
    2;
pub const XrEyeCalibrationStatusML_XR_EYE_CALIBRATION_STATUS_FINE_ML: XrEyeCalibrationStatusML = 3;
pub const XrEyeCalibrationStatusML_XR_EYE_CALIBRATION_STATUS_MAX_ENUM_ML: XrEyeCalibrationStatusML =
    2147483647;
pub type XrEyeCalibrationStatusML = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataHeadsetFitChangedML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub status: XrHeadsetFitStatusML,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrEventDataHeadsetFitChangedML() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataHeadsetFitChangedML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataHeadsetFitChangedML>(),
        32usize,
        concat!("Size of: ", stringify!(XrEventDataHeadsetFitChangedML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataHeadsetFitChangedML>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataHeadsetFitChangedML))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataHeadsetFitChangedML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataHeadsetFitChangedML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataHeadsetFitChangedML),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataHeadsetFitChangedML),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataEyeCalibrationChangedML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub status: XrEyeCalibrationStatusML,
}
#[test]
fn bindgen_test_layout_XrEventDataEyeCalibrationChangedML() {
    const UNINIT: ::std::mem::MaybeUninit<XrEventDataEyeCalibrationChangedML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrEventDataEyeCalibrationChangedML>(),
        24usize,
        concat!("Size of: ", stringify!(XrEventDataEyeCalibrationChangedML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataEyeCalibrationChangedML>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataEyeCalibrationChangedML)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataEyeCalibrationChangedML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataEyeCalibrationChangedML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataEyeCalibrationChangedML),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrUserCalibrationEnableEventsInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub enabled: XrBool32,
}
#[test]
fn bindgen_test_layout_XrUserCalibrationEnableEventsInfoML() {
    const UNINIT: ::std::mem::MaybeUninit<XrUserCalibrationEnableEventsInfoML> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XrUserCalibrationEnableEventsInfoML>(),
        24usize,
        concat!("Size of: ", stringify!(XrUserCalibrationEnableEventsInfoML))
    );
    assert_eq!(
        ::std::mem::align_of::<XrUserCalibrationEnableEventsInfoML>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrUserCalibrationEnableEventsInfoML)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrUserCalibrationEnableEventsInfoML),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrUserCalibrationEnableEventsInfoML),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrUserCalibrationEnableEventsInfoML),
            "::",
            stringify!(enabled)
        )
    );
}
pub type PFN_xrEnableUserCalibrationEventsML = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        enableInfo: *const XrUserCalibrationEnableEventsInfoML,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
